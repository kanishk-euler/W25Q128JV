
flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a48  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002bdc  08002bdc  00012bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c24  08002c24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c24  08002c24  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c24  08002c24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002c38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002c38  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000075f2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001742  00000000  00000000  00027671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  00028db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d7  00000000  00000000  00029588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002046c  00000000  00000000  00029b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c2f  00000000  00000000  00049fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3c2b  00000000  00000000  00052bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e80  00000000  00000000  00116828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001186a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002bc4 	.word	0x08002bc4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002bc4 	.word	0x08002bc4

080001d4 <W25Q128JV_WriteEnable>:
#define CMD_WRITE_ENABLE    0x06
#define CMD_PAGE_PROGRAM    0x02
#define CMD_READ            0x03
#define CMD_CHIP_ERASE      0x20 // Chip Erase command

void W25Q128JV_WriteEnable(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    uint8_t cmd = CMD_WRITE_ENABLE;
 80001da:	2306      	movs	r3, #6
 80001dc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 80001de:	2200      	movs	r2, #0
 80001e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e8:	f000 fe02 	bl	8000df0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80001ec:	1df9      	adds	r1, r7, #7
 80001ee:	f04f 33ff 	mov.w	r3, #4294967295
 80001f2:	2201      	movs	r2, #1
 80001f4:	4806      	ldr	r0, [pc, #24]	; (8000210 <W25Q128JV_WriteEnable+0x3c>)
 80001f6:	f001 fd1a 	bl	8001c2e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000204:	f000 fdf4 	bl	8000df0 <HAL_GPIO_WritePin>
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000028 	.word	0x20000028

08000214 <W25Q128JV_ChipErase>:

void W25Q128JV_ChipErase(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
    W25Q128JV_WriteEnable();
 800021a:	f7ff ffdb 	bl	80001d4 <W25Q128JV_WriteEnable>

    uint8_t cmd = CMD_CHIP_ERASE;
 800021e:	2320      	movs	r3, #32
 8000220:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 8000222:	2200      	movs	r2, #0
 8000224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022c:	f000 fde0 	bl	8000df0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000230:	1df9      	adds	r1, r7, #7
 8000232:	f04f 33ff 	mov.w	r3, #4294967295
 8000236:	2201      	movs	r2, #1
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <W25Q128JV_ChipErase+0x40>)
 800023a:	f001 fcf8 	bl	8001c2e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 800023e:	2201      	movs	r2, #1
 8000240:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000248:	f000 fdd2 	bl	8000df0 <HAL_GPIO_WritePin>
}
 800024c:	bf00      	nop
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000028 	.word	0x20000028

08000258 <PageProgram>:

void PageProgram(uint32_t address, uint8_t *data, uint16_t length) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	4613      	mov	r3, r2
 8000264:	80fb      	strh	r3, [r7, #6]
    W25Q128JV_WriteEnable();
 8000266:	f7ff ffb5 	bl	80001d4 <W25Q128JV_WriteEnable>

    uint8_t cmd[4];
    cmd[0] = CMD_PAGE_PROGRAM;
 800026a:	2302      	movs	r3, #2
 800026c:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	0c1b      	lsrs	r3, r3, #16
 8000272:	b2db      	uxtb	r3, r3
 8000274:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	0a1b      	lsrs	r3, r3, #8
 800027a:	b2db      	uxtb	r3, r3
 800027c:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	b2db      	uxtb	r3, r3
 8000282:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f000 fdaf 	bl	8000df0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 8000292:	f107 0114 	add.w	r1, r7, #20
 8000296:	f04f 33ff 	mov.w	r3, #4294967295
 800029a:	2204      	movs	r2, #4
 800029c:	480a      	ldr	r0, [pc, #40]	; (80002c8 <PageProgram+0x70>)
 800029e:	f001 fcc6 	bl	8001c2e <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, data, length, HAL_MAX_DELAY);
 80002a2:	88fa      	ldrh	r2, [r7, #6]
 80002a4:	f04f 33ff 	mov.w	r3, #4294967295
 80002a8:	68b9      	ldr	r1, [r7, #8]
 80002aa:	4807      	ldr	r0, [pc, #28]	; (80002c8 <PageProgram+0x70>)
 80002ac:	f001 fcbf 	bl	8001c2e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 80002b0:	2201      	movs	r2, #1
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ba:	f000 fd99 	bl	8000df0 <HAL_GPIO_WritePin>
}
 80002be:	bf00      	nop
 80002c0:	3718      	adds	r7, #24
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000028 	.word	0x20000028

080002cc <Read>:

void Read(uint32_t address, uint8_t *data, uint16_t length) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	4613      	mov	r3, r2
 80002d8:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4];
    cmd[0] = CMD_READ;
 80002da:	2303      	movs	r3, #3
 80002dc:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	0a1b      	lsrs	r3, r3, #8
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 80002f4:	2200      	movs	r2, #0
 80002f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fe:	f000 fd77 	bl	8000df0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 8000302:	f107 0114 	add.w	r1, r7, #20
 8000306:	f04f 33ff 	mov.w	r3, #4294967295
 800030a:	2204      	movs	r2, #4
 800030c:	480a      	ldr	r0, [pc, #40]	; (8000338 <Read+0x6c>)
 800030e:	f001 fc8e 	bl	8001c2e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, data, length, HAL_MAX_DELAY);
 8000312:	88fa      	ldrh	r2, [r7, #6]
 8000314:	f04f 33ff 	mov.w	r3, #4294967295
 8000318:	68b9      	ldr	r1, [r7, #8]
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <Read+0x6c>)
 800031c:	f001 fdfc 	bl	8001f18 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032a:	f000 fd61 	bl	8000df0 <HAL_GPIO_WritePin>
}
 800032e:	bf00      	nop
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000028 	.word	0x20000028

0800033c <main>:

int main(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
    HAL_Init();
 8000342:	f000 f9f0 	bl	8000726 <HAL_Init>
    SystemClock_Config();
 8000346:	f000 f82f 	bl	80003a8 <SystemClock_Config>
    MX_GPIO_Init();
 800034a:	f000 f8b1 	bl	80004b0 <MX_GPIO_Init>
    MX_SPI2_Init();
 800034e:	f000 f871 	bl	8000434 <MX_SPI2_Init>

    uint8_t data[] = {0xDD, 0xCC, 0xBB, 0xAA, 0xFF};
 8000352:	4a13      	ldr	r2, [pc, #76]	; (80003a0 <main+0x64>)
 8000354:	f107 0308 	add.w	r3, r7, #8
 8000358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800035c:	6018      	str	r0, [r3, #0]
 800035e:	3304      	adds	r3, #4
 8000360:	7019      	strb	r1, [r3, #0]
    uint8_t data_read[5];

    // Perform a chip erase
    W25Q128JV_ChipErase();
 8000362:	f7ff ff57 	bl	8000214 <W25Q128JV_ChipErase>

    HAL_Delay(100000);
 8000366:	480f      	ldr	r0, [pc, #60]	; (80003a4 <main+0x68>)
 8000368:	f000 fa52 	bl	8000810 <HAL_Delay>
    // Read data from address 0x800000 after chip erase
    Read(0x800000, data_read, sizeof(data));
 800036c:	463b      	mov	r3, r7
 800036e:	2205      	movs	r2, #5
 8000370:	4619      	mov	r1, r3
 8000372:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000376:	f7ff ffa9 	bl	80002cc <Read>

    // Write data to address 0x800000
    PageProgram(0x800000, data, sizeof(data));
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	2205      	movs	r2, #5
 8000380:	4619      	mov	r1, r3
 8000382:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000386:	f7ff ff67 	bl	8000258 <PageProgram>

    // Read data from address 0x800000 after writing
    Read(0x800000, data_read, sizeof(data));
 800038a:	463b      	mov	r3, r7
 800038c:	2205      	movs	r2, #5
 800038e:	4619      	mov	r1, r3
 8000390:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000394:	f7ff ff9a 	bl	80002cc <Read>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f806 	bl	80003a8 <SystemClock_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800039c:	e7fe      	b.n	800039c <main+0x60>
 800039e:	bf00      	nop
 80003a0:	08002bdc 	.word	0x08002bdc
 80003a4:	000186a0 	.word	0x000186a0

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b096      	sub	sp, #88	; 0x58
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	2244      	movs	r2, #68	; 0x44
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 fbd8 	bl	8002b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	463b      	mov	r3, r7
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ce:	f000 fd35 	bl	8000e3c <HAL_PWREx_ControlVoltageScaling>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003d8:	f000 f8c0 	bl	800055c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003dc:	2310      	movs	r3, #16
 80003de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003e0:	2301      	movs	r3, #1
 80003e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003e8:	2360      	movs	r3, #96	; 0x60
 80003ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fd77 	bl	8000ee8 <HAL_RCC_OscConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000400:	f000 f8ac 	bl	800055c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000404:	230f      	movs	r3, #15
 8000406:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000408:	2300      	movs	r3, #0
 800040a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000418:	463b      	mov	r3, r7
 800041a:	2100      	movs	r1, #0
 800041c:	4618      	mov	r0, r3
 800041e:	f001 f977 	bl	8001710 <HAL_RCC_ClockConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000428:	f000 f898 	bl	800055c <Error_Handler>
  }
}
 800042c:	bf00      	nop
 800042e:	3758      	adds	r7, #88	; 0x58
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_SPI2_Init+0x74>)
 800043a:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <MX_SPI2_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_SPI2_Init+0x74>)
 8000440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000444:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000446:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_SPI2_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <MX_SPI2_Init+0x74>)
 800044e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000452:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_SPI2_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_SPI2_Init+0x74>)
 800045c:	2200      	movs	r2, #0
 800045e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_SPI2_Init+0x74>)
 8000462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000466:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_SPI2_Init+0x74>)
 800046a:	2228      	movs	r2, #40	; 0x28
 800046c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_SPI2_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_SPI2_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_SPI2_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_SPI2_Init+0x74>)
 8000482:	2207      	movs	r2, #7
 8000484:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_SPI2_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_SPI2_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_SPI2_Init+0x74>)
 8000494:	f001 fb28 	bl	8001ae8 <HAL_SPI_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800049e:	f000 f85d 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000028 	.word	0x20000028
 80004ac:	40003800 	.word	0x40003800

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b6:	f107 030c 	add.w	r3, r7, #12
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
 80004c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b23      	ldr	r3, [pc, #140]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	4a22      	ldr	r2, [pc, #136]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004d2:	4b20      	ldr	r3, [pc, #128]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a1c      	ldr	r2, [pc, #112]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <MX_GPIO_Init+0xa4>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f000 fc76 	bl	8000df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	2120      	movs	r1, #32
 8000508:	4813      	ldr	r0, [pc, #76]	; (8000558 <MX_GPIO_Init+0xa8>)
 800050a:	f000 fc71 	bl	8000df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 800050e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000514:	2301      	movs	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800051c:	2303      	movs	r3, #3
 800051e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052a:	f000 fae7 	bl	8000afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800052e:	2320      	movs	r3, #32
 8000530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800053a:	2303      	movs	r3, #3
 800053c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	4619      	mov	r1, r3
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <MX_GPIO_Init+0xa8>)
 8000546:	f000 fad9 	bl	8000afc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800054a:	bf00      	nop
 800054c:	3720      	adds	r7, #32
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	48000400 	.word	0x48000400

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
}
 8000562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000564:	e7fe      	b.n	8000564 <Error_Handler+0x8>
	...

08000568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_MspInit+0x44>)
 8000570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <HAL_MspInit+0x44>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6613      	str	r3, [r2, #96]	; 0x60
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_MspInit+0x44>)
 800057c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_MspInit+0x44>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058a:	4a08      	ldr	r2, [pc, #32]	; (80005ac <HAL_MspInit+0x44>)
 800058c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000590:	6593      	str	r3, [r2, #88]	; 0x58
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_MspInit+0x44>)
 8000594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000

080005b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a1b      	ldr	r2, [pc, #108]	; (800063c <HAL_SPI_MspInit+0x8c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d130      	bne.n	8000634 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <HAL_SPI_MspInit+0x90>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	4a1a      	ldr	r2, [pc, #104]	; (8000640 <HAL_SPI_MspInit+0x90>)
 80005d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005dc:	6593      	str	r3, [r2, #88]	; 0x58
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <HAL_SPI_MspInit+0x90>)
 80005e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_SPI_MspInit+0x90>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a14      	ldr	r2, [pc, #80]	; (8000640 <HAL_SPI_MspInit+0x90>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_SPI_MspInit+0x90>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8000602:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000614:	2305      	movs	r3, #5
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <HAL_SPI_MspInit+0x94>)
 8000620:	f000 fa6c 	bl	8000afc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	2024      	movs	r0, #36	; 0x24
 800062a:	f000 f9f0 	bl	8000a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800062e:	2024      	movs	r0, #36	; 0x24
 8000630:	f000 fa09 	bl	8000a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40003800 	.word	0x40003800
 8000640:	40021000 	.word	0x40021000
 8000644:	48000400 	.word	0x48000400

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000694:	f000 f89c 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <SPI2_IRQHandler+0x10>)
 80006a2:	f001 ff93 	bl	80025cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028

080006b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <SystemInit+0x20>)
 80006b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ba:	4a05      	ldr	r2, [pc, #20]	; (80006d0 <SystemInit+0x20>)
 80006bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800070c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d8:	f7ff ffea 	bl	80006b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <LoopForever+0x6>)
  ldr r1, =_edata
 80006de:	490d      	ldr	r1, [pc, #52]	; (8000714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <LoopForever+0xe>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f4:	4c0a      	ldr	r4, [pc, #40]	; (8000720 <LoopForever+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000702:	f002 fa3b 	bl	8002b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000706:	f7ff fe19 	bl	800033c <main>

0800070a <LoopForever>:

LoopForever:
    b LoopForever
 800070a:	e7fe      	b.n	800070a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800070c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000714:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000718:	08002c2c 	.word	0x08002c2c
  ldr r2, =_sbss
 800071c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000720:	20000090 	.word	0x20000090

08000724 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_IRQHandler>

08000726 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800072c:	2300      	movs	r3, #0
 800072e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f961 	bl	80009f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000736:	200f      	movs	r0, #15
 8000738:	f000 f80e 	bl	8000758 <HAL_InitTick>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d002      	beq.n	8000748 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	e001      	b.n	800074c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000748:	f7ff ff0e 	bl	8000568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800074c:	79fb      	ldrb	r3, [r7, #7]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_InitTick+0x6c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d023      	beq.n	80007b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <HAL_InitTick+0x70>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <HAL_InitTick+0x6c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	fbb3 f3f1 	udiv	r3, r3, r1
 800077e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f96d 	bl	8000a62 <HAL_SYSTICK_Config>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10f      	bne.n	80007ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d809      	bhi.n	80007a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000794:	2200      	movs	r2, #0
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f000 f937 	bl	8000a0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007a0:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <HAL_InitTick+0x74>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	e007      	b.n	80007b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e004      	b.n	80007b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	e001      	b.n	80007b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_IncTick+0x20>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_IncTick+0x24>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_IncTick+0x24>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000008 	.word	0x20000008
 80007f4:	2000008c 	.word	0x2000008c

080007f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <HAL_GetTick+0x14>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	2000008c 	.word	0x2000008c

08000810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000818:	f7ff ffee 	bl	80007f8 <HAL_GetTick>
 800081c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000828:	d005      	beq.n	8000836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_Delay+0x44>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4413      	add	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000836:	bf00      	nop
 8000838:	f7ff ffde 	bl	80007f8 <HAL_GetTick>
 800083c:	4602      	mov	r2, r0
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	429a      	cmp	r2, r3
 8000846:	d8f7      	bhi.n	8000838 <HAL_Delay+0x28>
  {
  }
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000008 	.word	0x20000008

08000858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60d3      	str	r3, [r2, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <__NVIC_GetPriorityGrouping+0x18>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	f003 0307 	and.w	r3, r3, #7
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	db0b      	blt.n	80008e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 021f 	and.w	r2, r3, #31
 80008d4:	4907      	ldr	r1, [pc, #28]	; (80008f4 <__NVIC_EnableIRQ+0x38>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	095b      	lsrs	r3, r3, #5
 80008dc:	2001      	movs	r0, #1
 80008de:	fa00 f202 	lsl.w	r2, r0, r2
 80008e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	; (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	; (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	; 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	; 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c4:	d301      	bcc.n	80009ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00f      	b.n	80009ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <SysTick_Config+0x40>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d2:	210f      	movs	r1, #15
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f7ff ff8e 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SysTick_Config+0x40>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SysTick_Config+0x40>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	e000e010 	.word	0xe000e010

080009f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff29 	bl	8000858 <__NVIC_SetPriorityGrouping>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a20:	f7ff ff3e 	bl	80008a0 <__NVIC_GetPriorityGrouping>
 8000a24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	6978      	ldr	r0, [r7, #20]
 8000a2c:	f7ff ff8e 	bl	800094c <NVIC_EncodePriority>
 8000a30:	4602      	mov	r2, r0
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff5d 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff31 	bl	80008bc <__NVIC_EnableIRQ>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ffa2 	bl	80009b4 <SysTick_Config>
 8000a70:	4603      	mov	r3, r0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d005      	beq.n	8000a9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2204      	movs	r2, #4
 8000a96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e029      	b.n	8000af2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f022 020e 	bic.w	r2, r2, #14
 8000aac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 0201 	bic.w	r2, r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f003 021c 	and.w	r2, r3, #28
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	2101      	movs	r1, #1
 8000acc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	4798      	blx	r3
    }
  }
  return status;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0a:	e154      	b.n	8000db6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	2101      	movs	r1, #1
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 8146 	beq.w	8000db0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d005      	beq.n	8000b3c <HAL_GPIO_Init+0x40>
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d130      	bne.n	8000b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2203      	movs	r2, #3
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68da      	ldr	r2, [r3, #12]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b72:	2201      	movs	r2, #1
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	091b      	lsrs	r3, r3, #4
 8000b88:	f003 0201 	and.w	r2, r3, #1
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d017      	beq.n	8000bda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d123      	bne.n	8000c2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	08da      	lsrs	r2, r3, #3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3208      	adds	r2, #8
 8000bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	691a      	ldr	r2, [r3, #16]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 0307 	and.w	r3, r3, #7
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	6939      	ldr	r1, [r7, #16]
 8000c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0203 	and.w	r2, r3, #3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 80a0 	beq.w	8000db0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c70:	4b58      	ldr	r3, [pc, #352]	; (8000dd4 <HAL_GPIO_Init+0x2d8>)
 8000c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c74:	4a57      	ldr	r2, [pc, #348]	; (8000dd4 <HAL_GPIO_Init+0x2d8>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7c:	4b55      	ldr	r3, [pc, #340]	; (8000dd4 <HAL_GPIO_Init+0x2d8>)
 8000c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c88:	4a53      	ldr	r2, [pc, #332]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	3302      	adds	r3, #2
 8000c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cb2:	d019      	beq.n	8000ce8 <HAL_GPIO_Init+0x1ec>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a49      	ldr	r2, [pc, #292]	; (8000ddc <HAL_GPIO_Init+0x2e0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d013      	beq.n	8000ce4 <HAL_GPIO_Init+0x1e8>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a48      	ldr	r2, [pc, #288]	; (8000de0 <HAL_GPIO_Init+0x2e4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d00d      	beq.n	8000ce0 <HAL_GPIO_Init+0x1e4>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a47      	ldr	r2, [pc, #284]	; (8000de4 <HAL_GPIO_Init+0x2e8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d007      	beq.n	8000cdc <HAL_GPIO_Init+0x1e0>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a46      	ldr	r2, [pc, #280]	; (8000de8 <HAL_GPIO_Init+0x2ec>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d101      	bne.n	8000cd8 <HAL_GPIO_Init+0x1dc>
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	e008      	b.n	8000cea <HAL_GPIO_Init+0x1ee>
 8000cd8:	2307      	movs	r3, #7
 8000cda:	e006      	b.n	8000cea <HAL_GPIO_Init+0x1ee>
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e004      	b.n	8000cea <HAL_GPIO_Init+0x1ee>
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	e002      	b.n	8000cea <HAL_GPIO_Init+0x1ee>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e000      	b.n	8000cea <HAL_GPIO_Init+0x1ee>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	f002 0203 	and.w	r2, r2, #3
 8000cf0:	0092      	lsls	r2, r2, #2
 8000cf2:	4093      	lsls	r3, r2
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cfa:	4937      	ldr	r1, [pc, #220]	; (8000dd8 <HAL_GPIO_Init+0x2dc>)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	3302      	adds	r3, #2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d08:	4b38      	ldr	r3, [pc, #224]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d003      	beq.n	8000d2c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d2c:	4a2f      	ldr	r2, [pc, #188]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d56:	4a25      	ldr	r2, [pc, #148]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d80:	4a1a      	ldr	r2, [pc, #104]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <HAL_GPIO_Init+0x2f0>)
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	3301      	adds	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f47f aea3 	bne.w	8000b0c <HAL_GPIO_Init+0x10>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	371c      	adds	r7, #28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000
 8000ddc:	48000400 	.word	0x48000400
 8000de0:	48000800 	.word	0x48000800
 8000de4:	48000c00 	.word	0x48000c00
 8000de8:	48001000 	.word	0x48001000
 8000dec:	40010400 	.word	0x40010400

08000df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e00:	787b      	ldrb	r3, [r7, #1]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e0c:	e002      	b.n	8000e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e0e:	887a      	ldrh	r2, [r7, #2]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40007000 	.word	0x40007000

08000e3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e4a:	d130      	bne.n	8000eae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e58:	d038      	beq.n	8000ecc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e62:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2232      	movs	r2, #50	; 0x32
 8000e70:	fb02 f303 	mul.w	r3, r2, r3
 8000e74:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	0c9b      	lsrs	r3, r3, #18
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e80:	e002      	b.n	8000e88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e94:	d102      	bne.n	8000e9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1f2      	bne.n	8000e82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea8:	d110      	bne.n	8000ecc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e00f      	b.n	8000ece <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eba:	d007      	beq.n	8000ecc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40007000 	.word	0x40007000
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	431bde83 	.word	0x431bde83

08000ee8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d102      	bne.n	8000efc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f000 bc02 	b.w	8001700 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000efc:	4b96      	ldr	r3, [pc, #600]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f003 030c 	and.w	r3, r3, #12
 8000f04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f06:	4b94      	ldr	r3, [pc, #592]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 80e4 	beq.w	80010e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d007      	beq.n	8000f34 <HAL_RCC_OscConfig+0x4c>
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2b0c      	cmp	r3, #12
 8000f28:	f040 808b 	bne.w	8001042 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	f040 8087 	bne.w	8001042 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f34:	4b88      	ldr	r3, [pc, #544]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d005      	beq.n	8000f4c <HAL_RCC_OscConfig+0x64>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e3d9      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a1a      	ldr	r2, [r3, #32]
 8000f50:	4b81      	ldr	r3, [pc, #516]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d004      	beq.n	8000f66 <HAL_RCC_OscConfig+0x7e>
 8000f5c:	4b7e      	ldr	r3, [pc, #504]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f64:	e005      	b.n	8000f72 <HAL_RCC_OscConfig+0x8a>
 8000f66:	4b7c      	ldr	r3, [pc, #496]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d223      	bcs.n	8000fbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fd54 	bl	8001a28 <RCC_SetFlashLatencyFromMSIRange>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e3ba      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f8a:	4b73      	ldr	r3, [pc, #460]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a72      	ldr	r2, [pc, #456]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b70      	ldr	r3, [pc, #448]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	496d      	ldr	r1, [pc, #436]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fa8:	4b6b      	ldr	r3, [pc, #428]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	4968      	ldr	r1, [pc, #416]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]
 8000fbc:	e025      	b.n	800100a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fbe:	4b66      	ldr	r3, [pc, #408]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a65      	ldr	r2, [pc, #404]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	4b63      	ldr	r3, [pc, #396]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4960      	ldr	r1, [pc, #384]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fdc:	4b5e      	ldr	r3, [pc, #376]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	495b      	ldr	r1, [pc, #364]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fd14 	bl	8001a28 <RCC_SetFlashLatencyFromMSIRange>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e37a      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800100a:	f000 fc81 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 800100e:	4602      	mov	r2, r0
 8001010:	4b51      	ldr	r3, [pc, #324]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	4950      	ldr	r1, [pc, #320]	; (800115c <HAL_RCC_OscConfig+0x274>)
 800101c:	5ccb      	ldrb	r3, [r1, r3]
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	fa22 f303 	lsr.w	r3, r2, r3
 8001026:	4a4e      	ldr	r2, [pc, #312]	; (8001160 <HAL_RCC_OscConfig+0x278>)
 8001028:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800102a:	4b4e      	ldr	r3, [pc, #312]	; (8001164 <HAL_RCC_OscConfig+0x27c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fb92 	bl	8000758 <HAL_InitTick>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d052      	beq.n	80010e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	e35e      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d032      	beq.n	80010b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800104a:	4b43      	ldr	r3, [pc, #268]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a42      	ldr	r2, [pc, #264]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001056:	f7ff fbcf 	bl	80007f8 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800105e:	f7ff fbcb 	bl	80007f8 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e347      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a35      	ldr	r2, [pc, #212]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b33      	ldr	r3, [pc, #204]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4930      	ldr	r1, [pc, #192]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8001096:	4313      	orrs	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	492b      	ldr	r1, [pc, #172]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	604b      	str	r3, [r1, #4]
 80010ae:	e01a      	b.n	80010e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a28      	ldr	r2, [pc, #160]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 80010b6:	f023 0301 	bic.w	r3, r3, #1
 80010ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fb9c 	bl	80007f8 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010c4:	f7ff fb98 	bl	80007f8 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e314      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x1dc>
 80010e2:	e000      	b.n	80010e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d073      	beq.n	80011da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d005      	beq.n	8001104 <HAL_RCC_OscConfig+0x21c>
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2b0c      	cmp	r3, #12
 80010fc:	d10e      	bne.n	800111c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d10b      	bne.n	800111c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d063      	beq.n	80011d8 <HAL_RCC_OscConfig+0x2f0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d15f      	bne.n	80011d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e2f1      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001124:	d106      	bne.n	8001134 <HAL_RCC_OscConfig+0x24c>
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e025      	b.n	8001180 <HAL_RCC_OscConfig+0x298>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800113c:	d114      	bne.n	8001168 <HAL_RCC_OscConfig+0x280>
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a02      	ldr	r2, [pc, #8]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e013      	b.n	8001180 <HAL_RCC_OscConfig+0x298>
 8001158:	40021000 	.word	0x40021000
 800115c:	08002be4 	.word	0x08002be4
 8001160:	20000000 	.word	0x20000000
 8001164:	20000004 	.word	0x20000004
 8001168:	4ba0      	ldr	r3, [pc, #640]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a9f      	ldr	r2, [pc, #636]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 800116e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b9d      	ldr	r3, [pc, #628]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a9c      	ldr	r2, [pc, #624]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 800117a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d013      	beq.n	80011b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001188:	f7ff fb36 	bl	80007f8 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001190:	f7ff fb32 	bl	80007f8 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b64      	cmp	r3, #100	; 0x64
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e2ae      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011a2:	4b92      	ldr	r3, [pc, #584]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x2a8>
 80011ae:	e014      	b.n	80011da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fb22 	bl	80007f8 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fb1e 	bl	80007f8 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e29a      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ca:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x2d0>
 80011d6:	e000      	b.n	80011da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d060      	beq.n	80012a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d005      	beq.n	80011f8 <HAL_RCC_OscConfig+0x310>
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2b0c      	cmp	r3, #12
 80011f0:	d119      	bne.n	8001226 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d116      	bne.n	8001226 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011f8:	4b7c      	ldr	r3, [pc, #496]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_RCC_OscConfig+0x328>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e277      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	061b      	lsls	r3, r3, #24
 800121e:	4973      	ldr	r1, [pc, #460]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001224:	e040      	b.n	80012a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d023      	beq.n	8001276 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800122e:	4b6f      	ldr	r3, [pc, #444]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a6e      	ldr	r2, [pc, #440]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123a:	f7ff fadd 	bl	80007f8 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff fad9 	bl	80007f8 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e255      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001254:	4b65      	ldr	r3, [pc, #404]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	4b62      	ldr	r3, [pc, #392]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	061b      	lsls	r3, r3, #24
 800126e:	495f      	ldr	r1, [pc, #380]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
 8001274:	e018      	b.n	80012a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a5c      	ldr	r2, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 800127c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fab9 	bl	80007f8 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fab5 	bl	80007f8 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e231      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d03c      	beq.n	800132e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d01c      	beq.n	80012f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012bc:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80012be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c2:	4a4a      	ldr	r2, [pc, #296]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012cc:	f7ff fa94 	bl	80007f8 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d4:	f7ff fa90 	bl	80007f8 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e20c      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012e6:	4b41      	ldr	r3, [pc, #260]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80012e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0ef      	beq.n	80012d4 <HAL_RCC_OscConfig+0x3ec>
 80012f4:	e01b      	b.n	800132e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80012f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012fc:	4a3b      	ldr	r2, [pc, #236]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001306:	f7ff fa77 	bl	80007f8 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130e:	f7ff fa73 	bl	80007f8 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e1ef      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001320:	4b32      	ldr	r3, [pc, #200]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ef      	bne.n	800130e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 80a6 	beq.w	8001488 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10d      	bne.n	8001368 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134c:	4b27      	ldr	r3, [pc, #156]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	4a26      	ldr	r2, [pc, #152]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 8001352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001356:	6593      	str	r3, [r2, #88]	; 0x58
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 800135a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001364:	2301      	movs	r3, #1
 8001366:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_RCC_OscConfig+0x508>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d118      	bne.n	80013a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_RCC_OscConfig+0x508>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_RCC_OscConfig+0x508>)
 800137a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001380:	f7ff fa3a 	bl	80007f8 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001388:	f7ff fa36 	bl	80007f8 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1b2      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_RCC_OscConfig+0x508>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <HAL_RCC_OscConfig+0x4d8>
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80013b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013be:	e029      	b.n	8001414 <HAL_RCC_OscConfig+0x52c>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b05      	cmp	r3, #5
 80013c6:	d115      	bne.n	80013f4 <HAL_RCC_OscConfig+0x50c>
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80013ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ce:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80013da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013de:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_RCC_OscConfig+0x504>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013e8:	e014      	b.n	8001414 <HAL_RCC_OscConfig+0x52c>
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40007000 	.word	0x40007000
 80013f4:	4b9a      	ldr	r3, [pc, #616]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 80013f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fa:	4a99      	ldr	r2, [pc, #612]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001404:	4b96      	ldr	r3, [pc, #600]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 8001406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140a:	4a95      	ldr	r2, [pc, #596]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 800140c:	f023 0304 	bic.w	r3, r3, #4
 8001410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d016      	beq.n	800144a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff f9ec 	bl	80007f8 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff f9e8 	bl	80007f8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e162      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800143a:	4b89      	ldr	r3, [pc, #548]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 800143c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0ed      	beq.n	8001424 <HAL_RCC_OscConfig+0x53c>
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144a:	f7ff f9d5 	bl	80007f8 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001450:	e00a      	b.n	8001468 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7ff f9d1 	bl	80007f8 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001460:	4293      	cmp	r3, r2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e14b      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001468:	4b7d      	ldr	r3, [pc, #500]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 800146a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ed      	bne.n	8001452 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001476:	7ffb      	ldrb	r3, [r7, #31]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147c:	4b78      	ldr	r3, [pc, #480]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	4a77      	ldr	r2, [pc, #476]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 8001482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001486:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	2b00      	cmp	r3, #0
 8001492:	d03c      	beq.n	800150e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800149c:	4b70      	ldr	r3, [pc, #448]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 800149e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014a2:	4a6f      	ldr	r2, [pc, #444]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff f9a4 	bl	80007f8 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014b4:	f7ff f9a0 	bl	80007f8 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e11c      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014c6:	4b66      	ldr	r3, [pc, #408]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 80014c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ef      	beq.n	80014b4 <HAL_RCC_OscConfig+0x5cc>
 80014d4:	e01b      	b.n	800150e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014d6:	4b62      	ldr	r3, [pc, #392]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 80014d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014dc:	4a60      	ldr	r2, [pc, #384]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff f987 	bl	80007f8 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ee:	f7ff f983 	bl	80007f8 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e0ff      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001500:	4b57      	ldr	r3, [pc, #348]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 8001502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ef      	bne.n	80014ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80f3 	beq.w	80016fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	2b02      	cmp	r3, #2
 800151e:	f040 80c9 	bne.w	80016b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001522:	4b4f      	ldr	r3, [pc, #316]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 0203 	and.w	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	429a      	cmp	r2, r3
 8001534:	d12c      	bne.n	8001590 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	3b01      	subs	r3, #1
 8001542:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d123      	bne.n	8001590 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001552:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d11b      	bne.n	8001590 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001562:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d113      	bne.n	8001590 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	3b01      	subs	r3, #1
 8001576:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001578:	429a      	cmp	r2, r3
 800157a:	d109      	bne.n	8001590 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	3b01      	subs	r3, #1
 800158a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d06b      	beq.n	8001668 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d062      	beq.n	800165c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001596:	4b32      	ldr	r3, [pc, #200]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0ac      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a2d      	ldr	r2, [pc, #180]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 80015ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015b2:	f7ff f921 	bl	80007f8 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff f91d 	bl	80007f8 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e099      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <HAL_RCC_OscConfig+0x77c>)
 80015de:	4013      	ands	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015e8:	3a01      	subs	r2, #1
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	4311      	orrs	r1, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015f2:	0212      	lsls	r2, r2, #8
 80015f4:	4311      	orrs	r1, r2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	3a01      	subs	r2, #1
 80015fe:	0552      	lsls	r2, r2, #21
 8001600:	4311      	orrs	r1, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001606:	0852      	lsrs	r2, r2, #1
 8001608:	3a01      	subs	r2, #1
 800160a:	0652      	lsls	r2, r2, #25
 800160c:	4311      	orrs	r1, r2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001612:	06d2      	lsls	r2, r2, #27
 8001614:	430a      	orrs	r2, r1
 8001616:	4912      	ldr	r1, [pc, #72]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 8001618:	4313      	orrs	r3, r2
 800161a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 8001622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001626:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 800162e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001632:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001634:	f7ff f8e0 	bl	80007f8 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff f8dc 	bl	80007f8 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e058      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <HAL_RCC_OscConfig+0x778>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800165a:	e050      	b.n	80016fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e04f      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
 8001660:	40021000 	.word	0x40021000
 8001664:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x820>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d144      	bne.n	80016fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <HAL_RCC_OscConfig+0x820>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a23      	ldr	r2, [pc, #140]	; (8001708 <HAL_RCC_OscConfig+0x820>)
 800167a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800167e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001680:	4b21      	ldr	r3, [pc, #132]	; (8001708 <HAL_RCC_OscConfig+0x820>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4a20      	ldr	r2, [pc, #128]	; (8001708 <HAL_RCC_OscConfig+0x820>)
 8001686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800168a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800168c:	f7ff f8b4 	bl	80007f8 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff f8b0 	bl	80007f8 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e02c      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_RCC_OscConfig+0x820>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x7ac>
 80016b2:	e024      	b.n	80016fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d01f      	beq.n	80016fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <HAL_RCC_OscConfig+0x820>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <HAL_RCC_OscConfig+0x820>)
 80016c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff f897 	bl	80007f8 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff f893 	bl	80007f8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e00f      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_OscConfig+0x820>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_RCC_OscConfig+0x820>)
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	4905      	ldr	r1, [pc, #20]	; (8001708 <HAL_RCC_OscConfig+0x820>)
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_RCC_OscConfig+0x824>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	60cb      	str	r3, [r1, #12]
 80016f8:	e001      	b.n	80016fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	feeefffc 	.word	0xfeeefffc

08001710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0e7      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b75      	ldr	r3, [pc, #468]	; (80018fc <HAL_RCC_ClockConfig+0x1ec>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d910      	bls.n	8001754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b72      	ldr	r3, [pc, #456]	; (80018fc <HAL_RCC_ClockConfig+0x1ec>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 0207 	bic.w	r2, r3, #7
 800173a:	4970      	ldr	r1, [pc, #448]	; (80018fc <HAL_RCC_ClockConfig+0x1ec>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b6e      	ldr	r3, [pc, #440]	; (80018fc <HAL_RCC_ClockConfig+0x1ec>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0cf      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d010      	beq.n	8001782 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b66      	ldr	r3, [pc, #408]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800176c:	429a      	cmp	r2, r3
 800176e:	d908      	bls.n	8001782 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	4b63      	ldr	r3, [pc, #396]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4960      	ldr	r1, [pc, #384]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 800177e:	4313      	orrs	r3, r2
 8001780:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d04c      	beq.n	8001828 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b03      	cmp	r3, #3
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001796:	4b5a      	ldr	r3, [pc, #360]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d121      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0a6      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ae:	4b54      	ldr	r3, [pc, #336]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d115      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e09a      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c6:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e08e      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d6:	4b4a      	ldr	r3, [pc, #296]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e086      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017e6:	4b46      	ldr	r3, [pc, #280]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f023 0203 	bic.w	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4943      	ldr	r1, [pc, #268]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017f8:	f7fe fffe 	bl	80007f8 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001800:	f7fe fffa 	bl	80007f8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e06e      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	4b3a      	ldr	r3, [pc, #232]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 020c 	and.w	r2, r3, #12
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	429a      	cmp	r2, r3
 8001826:	d1eb      	bne.n	8001800 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d010      	beq.n	8001856 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	4b31      	ldr	r3, [pc, #196]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001840:	429a      	cmp	r2, r3
 8001842:	d208      	bcs.n	8001856 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001844:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	492b      	ldr	r1, [pc, #172]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 8001852:	4313      	orrs	r3, r2
 8001854:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_RCC_ClockConfig+0x1ec>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d210      	bcs.n	8001886 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_RCC_ClockConfig+0x1ec>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 0207 	bic.w	r2, r3, #7
 800186c:	4923      	ldr	r1, [pc, #140]	; (80018fc <HAL_RCC_ClockConfig+0x1ec>)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_RCC_ClockConfig+0x1ec>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d001      	beq.n	8001886 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e036      	b.n	80018f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4918      	ldr	r1, [pc, #96]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d009      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4910      	ldr	r1, [pc, #64]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018c4:	f000 f824 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_RCC_ClockConfig+0x1f0>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	490b      	ldr	r1, [pc, #44]	; (8001904 <HAL_RCC_ClockConfig+0x1f4>)
 80018d6:	5ccb      	ldrb	r3, [r1, r3]
 80018d8:	f003 031f 	and.w	r3, r3, #31
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
 80018e0:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1f8>)
 80018e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1fc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe ff35 	bl	8000758 <HAL_InitTick>
 80018ee:	4603      	mov	r3, r0
 80018f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80018f2:	7afb      	ldrb	r3, [r7, #11]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40022000 	.word	0x40022000
 8001900:	40021000 	.word	0x40021000
 8001904:	08002be4 	.word	0x08002be4
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191e:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001928:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x108>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x34>
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	2b0c      	cmp	r3, #12
 800193c:	d121      	bne.n	8001982 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d11e      	bne.n	8001982 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d107      	bne.n	8001960 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001950:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	e005      	b.n	800196c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800196c:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x10c>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10d      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001980:	e00a      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d102      	bne.n	800198e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x110>)
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	e004      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b08      	cmp	r3, #8
 8001992:	d101      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x114>)
 8001996:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d134      	bne.n	8001a08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d003      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0xac>
 80019b4:	e005      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x110>)
 80019b8:	617b      	str	r3, [r7, #20]
      break;
 80019ba:	e005      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x114>)
 80019be:	617b      	str	r3, [r7, #20]
      break;
 80019c0:	e002      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	617b      	str	r3, [r7, #20]
      break;
 80019c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	3301      	adds	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	fb03 f202 	mul.w	r2, r3, r2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	0e5b      	lsrs	r3, r3, #25
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	3301      	adds	r3, #1
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a08:	69bb      	ldr	r3, [r7, #24]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08002bf4 	.word	0x08002bf4
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	007a1200 	.word	0x007a1200

08001a28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a40:	f7ff f9ee 	bl	8000e20 <HAL_PWREx_GetVoltageRange>
 8001a44:	6178      	str	r0, [r7, #20]
 8001a46:	e014      	b.n	8001a72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4c:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a52:	6593      	str	r3, [r2, #88]	; 0x58
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a60:	f7ff f9de 	bl	8000e20 <HAL_PWREx_GetVoltageRange>
 8001a64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a66:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a78:	d10b      	bne.n	8001a92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b80      	cmp	r3, #128	; 0x80
 8001a7e:	d919      	bls.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2ba0      	cmp	r3, #160	; 0xa0
 8001a84:	d902      	bls.n	8001a8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a86:	2302      	movs	r3, #2
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	e013      	b.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	e010      	b.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b80      	cmp	r3, #128	; 0x80
 8001a96:	d902      	bls.n	8001a9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a98:	2303      	movs	r3, #3
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	e00a      	b.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b80      	cmp	r3, #128	; 0x80
 8001aa2:	d102      	bne.n	8001aaa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	e004      	b.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b70      	cmp	r3, #112	; 0x70
 8001aae:	d101      	bne.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 0207 	bic.w	r2, r3, #7
 8001abc:	4909      	ldr	r1, [pc, #36]	; (8001ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40022000 	.word	0x40022000

08001ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e095      	b.n	8001c26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d108      	bne.n	8001b14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b0a:	d009      	beq.n	8001b20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
 8001b12:	e005      	b.n	8001b20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7fe fd38 	bl	80005b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b60:	d902      	bls.n	8001b68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e002      	b.n	8001b6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001b76:	d007      	beq.n	8001b88 <HAL_SPI_Init+0xa0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b80:	d002      	beq.n	8001b88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bca:	ea42 0103 	orr.w	r1, r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	f003 0204 	and.w	r2, r3, #4
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c04:	ea42 0103 	orr.w	r1, r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b088      	sub	sp, #32
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_SPI_Transmit+0x22>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e15f      	b.n	8001f10 <HAL_SPI_Transmit+0x2e2>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c58:	f7fe fdce 	bl	80007f8 <HAL_GetTick>
 8001c5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d002      	beq.n	8001c74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c72:	e148      	b.n	8001f06 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_SPI_Transmit+0x52>
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c84:	e13f      	b.n	8001f06 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	88fa      	ldrh	r2, [r7, #6]
 8001ca4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ce0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cf0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfc:	2b40      	cmp	r3, #64	; 0x40
 8001cfe:	d007      	beq.n	8001d10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d18:	d94f      	bls.n	8001dba <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <HAL_SPI_Transmit+0xfa>
 8001d22:	8afb      	ldrh	r3, [r7, #22]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d142      	bne.n	8001dae <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	881a      	ldrh	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	1c9a      	adds	r2, r3, #2
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d4c:	e02f      	b.n	8001dae <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d112      	bne.n	8001d82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	881a      	ldrh	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	1c9a      	adds	r2, r3, #2
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d80:	e015      	b.n	8001dae <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d82:	f7fe fd39 	bl	80007f8 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d803      	bhi.n	8001d9a <HAL_SPI_Transmit+0x16c>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d102      	bne.n	8001da0 <HAL_SPI_Transmit+0x172>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d106      	bne.n	8001dae <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001dac:	e0ab      	b.n	8001f06 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ca      	bne.n	8001d4e <HAL_SPI_Transmit+0x120>
 8001db8:	e080      	b.n	8001ebc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <HAL_SPI_Transmit+0x19a>
 8001dc2:	8afb      	ldrh	r3, [r7, #22]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d174      	bne.n	8001eb2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d912      	bls.n	8001df8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd6:	881a      	ldrh	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de2:	1c9a      	adds	r2, r3, #2
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	3b02      	subs	r3, #2
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001df6:	e05c      	b.n	8001eb2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	330c      	adds	r3, #12
 8001e02:	7812      	ldrb	r2, [r2, #0]
 8001e04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001e1e:	e048      	b.n	8001eb2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d12b      	bne.n	8001e86 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d912      	bls.n	8001e5e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e48:	1c9a      	adds	r2, r3, #2
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b02      	subs	r3, #2
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e5c:	e029      	b.n	8001eb2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	330c      	adds	r3, #12
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e84:	e015      	b.n	8001eb2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e86:	f7fe fcb7 	bl	80007f8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d803      	bhi.n	8001e9e <HAL_SPI_Transmit+0x270>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d102      	bne.n	8001ea4 <HAL_SPI_Transmit+0x276>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d106      	bne.n	8001eb2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001eb0:	e029      	b.n	8001f06 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1b1      	bne.n	8001e20 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	6839      	ldr	r1, [r7, #0]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fe0d 	bl	8002ae0 <SPI_EndRxTxTransaction>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	77fb      	strb	r3, [r7, #31]
 8001efc:	e003      	b.n	8001f06 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3720      	adds	r7, #32
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d002      	beq.n	8001f3e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f3c:	e11a      	b.n	8002174 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f46:	d112      	bne.n	8001f6e <HAL_SPI_Receive+0x56>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10e      	bne.n	8001f6e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2204      	movs	r2, #4
 8001f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f58:	88fa      	ldrh	r2, [r7, #6]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f90e 	bl	8002186 <HAL_SPI_TransmitReceive>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	e107      	b.n	800217e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_SPI_Receive+0x64>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e100      	b.n	800217e <HAL_SPI_Receive+0x266>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f84:	f7fe fc38 	bl	80007f8 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_SPI_Receive+0x7e>
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f9a:	e0eb      	b.n	8002174 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	88fa      	ldrh	r2, [r7, #6]
 8001fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fe6:	d908      	bls.n	8001ffa <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	e007      	b.n	800200a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002008:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002012:	d10f      	bne.n	8002034 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002022:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002032:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d007      	beq.n	8002052 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800205a:	d86f      	bhi.n	800213c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800205c:	e034      	b.n	80020c8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d117      	bne.n	800209c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f103 020c 	add.w	r2, r3, #12
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800209a:	e015      	b.n	80020c8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800209c:	f7fe fbac 	bl	80007f8 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d803      	bhi.n	80020b4 <HAL_SPI_Receive+0x19c>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b2:	d102      	bne.n	80020ba <HAL_SPI_Receive+0x1a2>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80020c6:	e055      	b.n	8002174 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1c4      	bne.n	800205e <HAL_SPI_Receive+0x146>
 80020d4:	e038      	b.n	8002148 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d115      	bne.n	8002110 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	b292      	uxth	r2, r2
 80020f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	1c9a      	adds	r2, r3, #2
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800210e:	e015      	b.n	800213c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002110:	f7fe fb72 	bl	80007f8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d803      	bhi.n	8002128 <HAL_SPI_Receive+0x210>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002126:	d102      	bne.n	800212e <HAL_SPI_Receive+0x216>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800213a:	e01b      	b.n	8002174 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1c6      	bne.n	80020d6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fc6f 	bl	8002a30 <SPI_EndRxTransaction>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	75fb      	strb	r3, [r7, #23]
 800216a:	e003      	b.n	8002174 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800217c:	7dfb      	ldrb	r3, [r7, #23]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b08a      	sub	sp, #40	; 0x28
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002194:	2301      	movs	r3, #1
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_SPI_TransmitReceive+0x26>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e20a      	b.n	80025c2 <HAL_SPI_TransmitReceive+0x43c>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021b4:	f7fe fb20 	bl	80007f8 <HAL_GetTick>
 80021b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80021c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80021c8:	887b      	ldrh	r3, [r7, #2]
 80021ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021d0:	7efb      	ldrb	r3, [r7, #27]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d00e      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0x6e>
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021dc:	d106      	bne.n	80021ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <HAL_SPI_TransmitReceive+0x66>
 80021e6:	7efb      	ldrb	r3, [r7, #27]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d003      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
 80021ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80021f2:	e1e0      	b.n	80025b6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_SPI_TransmitReceive+0x80>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_SPI_TransmitReceive+0x80>
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800220c:	e1d3      	b.n	80025b6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b04      	cmp	r3, #4
 8002218:	d003      	beq.n	8002222 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2205      	movs	r2, #5
 800221e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	887a      	ldrh	r2, [r7, #2]
 8002232:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	887a      	ldrh	r2, [r7, #2]
 800223a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	887a      	ldrh	r2, [r7, #2]
 800224e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002264:	d802      	bhi.n	800226c <HAL_SPI_TransmitReceive+0xe6>
 8002266:	8a3b      	ldrh	r3, [r7, #16]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d908      	bls.n	800227e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	e007      	b.n	800228e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800228c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b40      	cmp	r3, #64	; 0x40
 800229a:	d007      	beq.n	80022ac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022b4:	f240 8081 	bls.w	80023ba <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <HAL_SPI_TransmitReceive+0x140>
 80022c0:	8a7b      	ldrh	r3, [r7, #18]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d16d      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ca:	881a      	ldrh	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	1c9a      	adds	r2, r3, #2
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022ea:	e05a      	b.n	80023a2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d11b      	bne.n	8002332 <HAL_SPI_TransmitReceive+0x1ac>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d016      	beq.n	8002332 <HAL_SPI_TransmitReceive+0x1ac>
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	2b01      	cmp	r3, #1
 8002308:	d113      	bne.n	8002332 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	881a      	ldrh	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	1c9a      	adds	r2, r3, #2
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002324:	b29b      	uxth	r3, r3
 8002326:	3b01      	subs	r3, #1
 8002328:	b29a      	uxth	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d11c      	bne.n	800237a <HAL_SPI_TransmitReceive+0x1f4>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d016      	beq.n	800237a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	b292      	uxth	r2, r2
 8002358:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	1c9a      	adds	r2, r3, #2
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800236a:	b29b      	uxth	r3, r3
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002376:	2301      	movs	r3, #1
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800237a:	f7fe fa3d 	bl	80007f8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002386:	429a      	cmp	r2, r3
 8002388:	d80b      	bhi.n	80023a2 <HAL_SPI_TransmitReceive+0x21c>
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d007      	beq.n	80023a2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80023a0:	e109      	b.n	80025b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d19f      	bne.n	80022ec <HAL_SPI_TransmitReceive+0x166>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d199      	bne.n	80022ec <HAL_SPI_TransmitReceive+0x166>
 80023b8:	e0e3      	b.n	8002582 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_SPI_TransmitReceive+0x244>
 80023c2:	8a7b      	ldrh	r3, [r7, #18]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	f040 80cf 	bne.w	8002568 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d912      	bls.n	80023fa <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	881a      	ldrh	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	1c9a      	adds	r2, r3, #2
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b02      	subs	r3, #2
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023f8:	e0b6      	b.n	8002568 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002420:	e0a2      	b.n	8002568 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b02      	cmp	r3, #2
 800242e:	d134      	bne.n	800249a <HAL_SPI_TransmitReceive+0x314>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d02f      	beq.n	800249a <HAL_SPI_TransmitReceive+0x314>
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	2b01      	cmp	r3, #1
 800243e:	d12c      	bne.n	800249a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d912      	bls.n	8002470 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	1c9a      	adds	r2, r3, #2
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b02      	subs	r3, #2
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800246e:	e012      	b.n	8002496 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	330c      	adds	r3, #12
 800247a:	7812      	ldrb	r2, [r2, #0]
 800247c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d148      	bne.n	800253a <HAL_SPI_TransmitReceive+0x3b4>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d042      	beq.n	800253a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d923      	bls.n	8002508 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	b292      	uxth	r2, r2
 80024cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	1c9a      	adds	r2, r3, #2
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b02      	subs	r3, #2
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d81f      	bhi.n	8002536 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	e016      	b.n	8002536 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f103 020c 	add.w	r2, r3, #12
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002536:	2301      	movs	r3, #1
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800253a:	f7fe f95d 	bl	80007f8 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002546:	429a      	cmp	r2, r3
 8002548:	d803      	bhi.n	8002552 <HAL_SPI_TransmitReceive+0x3cc>
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d102      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x3d2>
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	2b00      	cmp	r3, #0
 8002556:	d107      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002566:	e026      	b.n	80025b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	f47f af57 	bne.w	8002422 <HAL_SPI_TransmitReceive+0x29c>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	f47f af50 	bne.w	8002422 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 faaa 	bl	8002ae0 <SPI_EndRxTxTransaction>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80025ac:	e003      	b.n	80025b6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80025be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3728      	adds	r7, #40	; 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10e      	bne.n	800260c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
    return;
 800260a:	e0ce      	b.n	80027aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_SPI_IRQHandler+0x5e>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
    return;
 8002628:	e0bf      	b.n	80027aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <HAL_SPI_IRQHandler+0x7e>
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80b0 	beq.w	80027aa <HAL_SPI_IRQHandler+0x1de>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80aa 	beq.w	80027aa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	d023      	beq.n	80026a8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b03      	cmp	r3, #3
 800266a:	d011      	beq.n	8002690 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002670:	f043 0204 	orr.w	r2, r3, #4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	e00b      	b.n	80026a8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
        return;
 80026a6:	e080      	b.n	80027aa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d014      	beq.n	80026dc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b6:	f043 0201 	orr.w	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00c      	beq.n	8002700 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	f043 0208 	orr.w	r2, r3, #8
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002704:	2b00      	cmp	r3, #0
 8002706:	d04f      	beq.n	80027a8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002716:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <HAL_SPI_IRQHandler+0x168>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d034      	beq.n	800279e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0203 	bic.w	r2, r2, #3
 8002742:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	2b00      	cmp	r3, #0
 800274a:	d011      	beq.n	8002770 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_SPI_IRQHandler+0x1e4>)
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe f98e 	bl	8000a7a <HAL_DMA_Abort_IT>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002768:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	2b00      	cmp	r3, #0
 8002776:	d016      	beq.n	80027a6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <HAL_SPI_IRQHandler+0x1e4>)
 800277e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe f978 	bl	8000a7a <HAL_DMA_Abort_IT>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002794:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800279c:	e003      	b.n	80027a6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f808 	bl	80027b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80027a4:	e000      	b.n	80027a8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80027a6:	bf00      	nop
    return;
 80027a8:	bf00      	nop
  }
}
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	080027c9 	.word	0x080027c9

080027b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7ff ffe5 	bl	80027b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002804:	f7fd fff8 	bl	80007f8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	4413      	add	r3, r2
 8002812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002814:	f7fd fff0 	bl	80007f8 <HAL_GetTick>
 8002818:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800281a:	4b39      	ldr	r3, [pc, #228]	; (8002900 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	015b      	lsls	r3, r3, #5
 8002820:	0d1b      	lsrs	r3, r3, #20
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	fb02 f303 	mul.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800282a:	e054      	b.n	80028d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d050      	beq.n	80028d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002834:	f7fd ffe0 	bl	80007f8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	429a      	cmp	r2, r3
 8002842:	d902      	bls.n	800284a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d13d      	bne.n	80028c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002862:	d111      	bne.n	8002888 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286c:	d004      	beq.n	8002878 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002876:	d107      	bne.n	8002888 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002890:	d10f      	bne.n	80028b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e017      	b.n	80028f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4013      	ands	r3, r2
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	bf0c      	ite	eq
 80028e6:	2301      	moveq	r3, #1
 80028e8:	2300      	movne	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d19b      	bne.n	800282c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000000 	.word	0x20000000

08002904 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002916:	f7fd ff6f 	bl	80007f8 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	4413      	add	r3, r2
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002926:	f7fd ff67 	bl	80007f8 <HAL_GetTick>
 800292a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	330c      	adds	r3, #12
 8002932:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002934:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00da      	lsls	r2, r3, #3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	0d1b      	lsrs	r3, r3, #20
 8002944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800294c:	e060      	b.n	8002a10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002954:	d107      	bne.n	8002966 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d104      	bne.n	8002966 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002964:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d050      	beq.n	8002a10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800296e:	f7fd ff43 	bl	80007f8 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297a:	429a      	cmp	r2, r3
 800297c:	d902      	bls.n	8002984 <SPI_WaitFifoStateUntilTimeout+0x80>
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d13d      	bne.n	8002a00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002992:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800299c:	d111      	bne.n	80029c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a6:	d004      	beq.n	80029b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d107      	bne.n	80029c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ca:	d10f      	bne.n	80029ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e010      	b.n	8002a22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d196      	bne.n	800294e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3728      	adds	r7, #40	; 0x28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000

08002a30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a44:	d111      	bne.n	8002a6a <SPI_EndRxTransaction+0x3a>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4e:	d004      	beq.n	8002a5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a58:	d107      	bne.n	8002a6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff febd 	bl	80027f4 <SPI_WaitFlagStateUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e023      	b.n	8002ad8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a98:	d11d      	bne.n	8002ad6 <SPI_EndRxTransaction+0xa6>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa2:	d004      	beq.n	8002aae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aac:	d113      	bne.n	8002ad6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f7ff ff22 	bl	8002904 <SPI_WaitFifoStateUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e000      	b.n	8002ad8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff ff03 	bl	8002904 <SPI_WaitFifoStateUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e027      	b.n	8002b64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff fe68 	bl	80027f4 <SPI_WaitFlagStateUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e014      	b.n	8002b64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f7ff fedc 	bl	8002904 <SPI_WaitFifoStateUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	f043 0220 	orr.w	r2, r3, #32
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e000      	b.n	8002b64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <memset>:
 8002b6c:	4402      	add	r2, r0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d100      	bne.n	8002b76 <memset+0xa>
 8002b74:	4770      	bx	lr
 8002b76:	f803 1b01 	strb.w	r1, [r3], #1
 8002b7a:	e7f9      	b.n	8002b70 <memset+0x4>

08002b7c <__libc_init_array>:
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	4d0d      	ldr	r5, [pc, #52]	; (8002bb4 <__libc_init_array+0x38>)
 8002b80:	4c0d      	ldr	r4, [pc, #52]	; (8002bb8 <__libc_init_array+0x3c>)
 8002b82:	1b64      	subs	r4, r4, r5
 8002b84:	10a4      	asrs	r4, r4, #2
 8002b86:	2600      	movs	r6, #0
 8002b88:	42a6      	cmp	r6, r4
 8002b8a:	d109      	bne.n	8002ba0 <__libc_init_array+0x24>
 8002b8c:	4d0b      	ldr	r5, [pc, #44]	; (8002bbc <__libc_init_array+0x40>)
 8002b8e:	4c0c      	ldr	r4, [pc, #48]	; (8002bc0 <__libc_init_array+0x44>)
 8002b90:	f000 f818 	bl	8002bc4 <_init>
 8002b94:	1b64      	subs	r4, r4, r5
 8002b96:	10a4      	asrs	r4, r4, #2
 8002b98:	2600      	movs	r6, #0
 8002b9a:	42a6      	cmp	r6, r4
 8002b9c:	d105      	bne.n	8002baa <__libc_init_array+0x2e>
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba4:	4798      	blx	r3
 8002ba6:	3601      	adds	r6, #1
 8002ba8:	e7ee      	b.n	8002b88 <__libc_init_array+0xc>
 8002baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bae:	4798      	blx	r3
 8002bb0:	3601      	adds	r6, #1
 8002bb2:	e7f2      	b.n	8002b9a <__libc_init_array+0x1e>
 8002bb4:	08002c24 	.word	0x08002c24
 8002bb8:	08002c24 	.word	0x08002c24
 8002bbc:	08002c24 	.word	0x08002c24
 8002bc0:	08002c28 	.word	0x08002c28

08002bc4 <_init>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	bf00      	nop
 8002bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bca:	bc08      	pop	{r3}
 8002bcc:	469e      	mov	lr, r3
 8002bce:	4770      	bx	lr

08002bd0 <_fini>:
 8002bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd2:	bf00      	nop
 8002bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd6:	bc08      	pop	{r3}
 8002bd8:	469e      	mov	lr, r3
 8002bda:	4770      	bx	lr
