
flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005198  08005198  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08005198  08005198  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005198  08005198  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080051a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000232c  20000084  08005224  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023b0  08005224  000223b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b515  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002234  00000000  00000000  0002b60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  0002d840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000874  00000000  00000000  0002e380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ea1  00000000  00000000  0002ebf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f29c  00000000  00000000  00050a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5b1d  00000000  00000000  0005fd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c34  00000000  00000000  00125850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00128484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000084 	.word	0x20000084
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005074 	.word	0x08005074

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000088 	.word	0x20000088
 80001d0:	08005074 	.word	0x08005074

080001d4 <SPI_Read_Byte>:
{
	return 0;
}

uint8_t SPI_Read_Byte(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	return (SPI_Write_Byte(0xFF));
 80001d8:	20ff      	movs	r0, #255	; 0xff
 80001da:	f000 f803 	bl	80001e4 <SPI_Write_Byte>
 80001de:	4603      	mov	r3, r0
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <SPI_Write_Byte>:

uint8_t SPI_Write_Byte(uint8_t data)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
	char read_data;

	HAL_SPI_TransmitReceive_IT(&hspi2, &data, &read_data, 1);
 80001ee:	f107 020f 	add.w	r2, r7, #15
 80001f2:	1df9      	adds	r1, r7, #7
 80001f4:	2301      	movs	r3, #1
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <SPI_Write_Byte+0x24>)
 80001f8:	f001 fdd2 	bl	8001da0 <HAL_SPI_TransmitReceive_IT>
	return read_data;
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80001fe:	4618      	mov	r0, r3
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	200000a0 	.word	0x200000a0

0800020c <Flash_Read_StatusReg>:

	return nID;
}

char Flash_Read_StatusReg(void)
{	char u8 = 0;
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	2300      	movs	r3, #0
 8000214:	71fb      	strb	r3, [r7, #7]
	FLASH_CS_0();
 8000216:	2200      	movs	r2, #0
 8000218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800021c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000220:	f000 fe9e 	bl	8000f60 <HAL_GPIO_WritePin>
	SPI_Write_Byte(CMD_READ_STATUS_REG1);
 8000224:	2005      	movs	r0, #5
 8000226:	f7ff ffdd 	bl	80001e4 <SPI_Write_Byte>
	u8 = SPI_Read_Byte();
 800022a:	f7ff ffd3 	bl	80001d4 <SPI_Read_Byte>
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
	FLASH_CS_1();
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023c:	f000 fe90 	bl	8000f60 <HAL_GPIO_WritePin>
	return u8;
 8000240:	79fb      	ldrb	r3, [r7, #7]
}
 8000242:	4618      	mov	r0, r3
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <Flash_Write_Enable>:
	SPI_Write_Byte(reg);
	FLASH_CS_1();
}

void Flash_Write_Enable(void)
{	FLASH_CS_0();
 800024a:	b580      	push	{r7, lr}
 800024c:	af00      	add	r7, sp, #0
 800024e:	2200      	movs	r2, #0
 8000250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000258:	f000 fe82 	bl	8000f60 <HAL_GPIO_WritePin>
	SPI_Write_Byte(CMD_WRITE_ENABLE);
 800025c:	2006      	movs	r0, #6
 800025e:	f7ff ffc1 	bl	80001e4 <SPI_Write_Byte>
	Flash_Read_StatusReg();
 8000262:	f7ff ffd3 	bl	800020c <Flash_Read_StatusReg>
	FLASH_CS_1();
 8000266:	2201      	movs	r2, #1
 8000268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800026c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000270:	f000 fe76 	bl	8000f60 <HAL_GPIO_WritePin>
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}

08000278 <Flash_Wait_Busy>:
	Flash_Read_StatusReg();
	FLASH_CS_1();
}

void Flash_Wait_Busy(void)
{	while(Flash_Read_StatusReg() == 0x03)
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
 800027c:	e001      	b.n	8000282 <Flash_Wait_Busy+0xa>
		Flash_Read_StatusReg();
 800027e:	f7ff ffc5 	bl	800020c <Flash_Read_StatusReg>
{	while(Flash_Read_StatusReg() == 0x03)
 8000282:	f7ff ffc3 	bl	800020c <Flash_Read_StatusReg>
 8000286:	4603      	mov	r3, r0
 8000288:	2b03      	cmp	r3, #3
 800028a:	d0f8      	beq.n	800027e <Flash_Wait_Busy+0x6>
}
 800028c:	bf00      	nop
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}

08000292 <Flash_Erase_Sector>:

void Flash_Erase_Sector(uint32_t nDest)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
	nDest *= FLASH_SECTOR_SIZE;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	031b      	lsls	r3, r3, #12
 800029e:	607b      	str	r3, [r7, #4]

	FLASH_CS_0();
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002aa:	f000 fe59 	bl	8000f60 <HAL_GPIO_WritePin>
	Flash_Write_Enable();
 80002ae:	f7ff ffcc 	bl	800024a <Flash_Write_Enable>
	FLASH_CS_0();
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002bc:	f000 fe50 	bl	8000f60 <HAL_GPIO_WritePin>
	SPI_Write_Byte(CMD_SECTOR_ERASE);
 80002c0:	2020      	movs	r0, #32
 80002c2:	f7ff ff8f 	bl	80001e4 <SPI_Write_Byte>
	SPI_Write_Byte((char)((nDest & 0xFFFFFF) >> 16));
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	0c1b      	lsrs	r3, r3, #16
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4618      	mov	r0, r3
 80002ce:	f7ff ff89 	bl	80001e4 <SPI_Write_Byte>
	SPI_Write_Byte((char)((nDest & 0xFFFF) >> 8));
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	0a1b      	lsrs	r3, r3, #8
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff83 	bl	80001e4 <SPI_Write_Byte>
	SPI_Write_Byte((char)nDest & 0xFF);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ff7e 	bl	80001e4 <SPI_Write_Byte>
	FLASH_CS_1();
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f2:	f000 fe35 	bl	8000f60 <HAL_GPIO_WritePin>
	Flash_Wait_Busy();
 80002f6:	f7ff ffbf 	bl	8000278 <Flash_Wait_Busy>
}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <Flash_Read_Sector>:
	FLASH_CS_1();
	Flash_Wait_Busy();
}

void Flash_Read_Sector(uint32_t nSector, char* pBuffer)
{	uint16_t i;
 8000302:	b590      	push	{r4, r7, lr}
 8000304:	b085      	sub	sp, #20
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]

	nSector *= FLASH_SECTOR_SIZE;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	031b      	lsls	r3, r3, #12
 8000310:	607b      	str	r3, [r7, #4]

	FLASH_CS_0();
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031c:	f000 fe20 	bl	8000f60 <HAL_GPIO_WritePin>
	SPI_Write_Byte(CMD_READ);
 8000320:	2003      	movs	r0, #3
 8000322:	f7ff ff5f 	bl	80001e4 <SPI_Write_Byte>
	SPI_Write_Byte((char)(nSector >> 16));
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	0c1b      	lsrs	r3, r3, #16
 800032a:	b2db      	uxtb	r3, r3
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff59 	bl	80001e4 <SPI_Write_Byte>
	SPI_Write_Byte((char)(nSector>> 8));
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	0a1b      	lsrs	r3, r3, #8
 8000336:	b2db      	uxtb	r3, r3
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff53 	bl	80001e4 <SPI_Write_Byte>
	SPI_Write_Byte((char) nSector);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	b2db      	uxtb	r3, r3
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff4e 	bl	80001e4 <SPI_Write_Byte>

	for(i=0;i<FLASH_SECTOR_SIZE;i++)
 8000348:	2300      	movs	r3, #0
 800034a:	81fb      	strh	r3, [r7, #14]
 800034c:	e009      	b.n	8000362 <Flash_Read_Sector+0x60>
	{	pBuffer[i] = SPI_Read_Byte();
 800034e:	89fb      	ldrh	r3, [r7, #14]
 8000350:	683a      	ldr	r2, [r7, #0]
 8000352:	18d4      	adds	r4, r2, r3
 8000354:	f7ff ff3e 	bl	80001d4 <SPI_Read_Byte>
 8000358:	4603      	mov	r3, r0
 800035a:	7023      	strb	r3, [r4, #0]
	for(i=0;i<FLASH_SECTOR_SIZE;i++)
 800035c:	89fb      	ldrh	r3, [r7, #14]
 800035e:	3301      	adds	r3, #1
 8000360:	81fb      	strh	r3, [r7, #14]
 8000362:	89fb      	ldrh	r3, [r7, #14]
 8000364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000368:	d3f1      	bcc.n	800034e <Flash_Read_Sector+0x4c>
	}
	FLASH_CS_1();
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000374:	f000 fdf4 	bl	8000f60 <HAL_GPIO_WritePin>
	Flash_Wait_Busy();
 8000378:	f7ff ff7e 	bl	8000278 <Flash_Wait_Busy>
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	bd90      	pop	{r4, r7, pc}

08000384 <Flash_Write_Sector>:
	FLASH_CS_1();
	Flash_Wait_Busy();
}

void Flash_Write_Sector(uint32_t nSector, char* pBuffer)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	6039      	str	r1, [r7, #0]
	int i,j;
	nSector *= FLASH_SECTOR_SIZE;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	031b      	lsls	r3, r3, #12
 8000392:	607b      	str	r3, [r7, #4]
	for(j=0;j<FLASH_PAGES_PER_SECTOR;j++)
 8000394:	2300      	movs	r3, #0
 8000396:	60bb      	str	r3, [r7, #8]
 8000398:	e048      	b.n	800042c <Flash_Write_Sector+0xa8>
	{
		FLASH_CS_0();
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a4:	f000 fddc 	bl	8000f60 <HAL_GPIO_WritePin>
		Flash_Write_Enable();
 80003a8:	f7ff ff4f 	bl	800024a <Flash_Write_Enable>
		FLASH_CS_0();
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b6:	f000 fdd3 	bl	8000f60 <HAL_GPIO_WritePin>

		SPI_Write_Byte(CMD_WRITE);
 80003ba:	2002      	movs	r0, #2
 80003bc:	f7ff ff12 	bl	80001e4 <SPI_Write_Byte>
		SPI_Write_Byte((char)(nSector >> 16));
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	0c1b      	lsrs	r3, r3, #16
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff0c 	bl	80001e4 <SPI_Write_Byte>
		SPI_Write_Byte((char)(nSector >> 8));
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	0a1b      	lsrs	r3, r3, #8
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ff06 	bl	80001e4 <SPI_Write_Byte>
		SPI_Write_Byte((char) nSector);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff ff01 	bl	80001e4 <SPI_Write_Byte>

		for(i=0;i<FLASH_PAGE_SIZE;i++)
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	e009      	b.n	80003fc <Flash_Write_Sector+0x78>
			SPI_Write_Byte(pBuffer[i]);
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	683a      	ldr	r2, [r7, #0]
 80003ec:	4413      	add	r3, r2
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff fef7 	bl	80001e4 <SPI_Write_Byte>
		for(i=0;i<FLASH_PAGE_SIZE;i++)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	3301      	adds	r3, #1
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000402:	d3f1      	bcc.n	80003e8 <Flash_Write_Sector+0x64>

		pBuffer += FLASH_PAGE_SIZE;
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800040a:	603b      	str	r3, [r7, #0]
		nSector += FLASH_PAGE_SIZE;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000412:	607b      	str	r3, [r7, #4]

		FLASH_CS_1();
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041e:	f000 fd9f 	bl	8000f60 <HAL_GPIO_WritePin>
		Flash_Wait_Busy();
 8000422:	f7ff ff29 	bl	8000278 <Flash_Wait_Busy>
	for(j=0;j<FLASH_PAGES_PER_SECTOR;j++)
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	3301      	adds	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d9b3      	bls.n	800039a <Flash_Write_Sector+0x16>
	}
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000440:	f000 fa29 	bl	8000896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000444:	f000 f868 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000448:	f000 f8ea 	bl	8000620 <MX_GPIO_Init>
  MX_SPI2_Init();
 800044c:	f000 f8aa 	bl	80005a4 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000450:	f002 f92c 	bl	80026ac <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000454:	2064      	movs	r0, #100	; 0x64
 8000456:	f000 fa93 	bl	8000980 <HAL_Delay>

  //format drive
    //f_mkfs("", FM_ANY, 0, buffer, sizeof(buffer));

    FATFS_LinkDriver(&USER_Driver, SFLASHPath);
 800045a:	4927      	ldr	r1, [pc, #156]	; (80004f8 <main+0xbc>)
 800045c:	4827      	ldr	r0, [pc, #156]	; (80004fc <main+0xc0>)
 800045e:	f004 fdcd 	bl	8004ffc <FATFS_LinkDriver>

    //Mount drive
    fres = f_mount(&FatFs, &SFLASHPath, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	4924      	ldr	r1, [pc, #144]	; (80004f8 <main+0xbc>)
 8000466:	4826      	ldr	r0, [pc, #152]	; (8000500 <main+0xc4>)
 8000468:	f003 ffce 	bl	8004408 <f_mount>
 800046c:	4603      	mov	r3, r0
 800046e:	461a      	mov	r2, r3
 8000470:	4b24      	ldr	r3, [pc, #144]	; (8000504 <main+0xc8>)
 8000472:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK)
 8000474:	4b23      	ldr	r3, [pc, #140]	; (8000504 <main+0xc8>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d000      	beq.n	800047e <main+0x42>
    {
      while(1);
 800047c:	e7fe      	b.n	800047c <main+0x40>
    }


    fres = f_open(&SFLASHPath, "test", FA_CREATE_ALWAYS | FA_WRITE);
 800047e:	220a      	movs	r2, #10
 8000480:	4921      	ldr	r1, [pc, #132]	; (8000508 <main+0xcc>)
 8000482:	481d      	ldr	r0, [pc, #116]	; (80004f8 <main+0xbc>)
 8000484:	f004 f806 	bl	8004494 <f_open>
 8000488:	4603      	mov	r3, r0
 800048a:	461a      	mov	r2, r3
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <main+0xc8>)
 800048e:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK)
 8000490:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <main+0xc8>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d000      	beq.n	800049a <main+0x5e>
    {
   	 while(1);
 8000498:	e7fe      	b.n	8000498 <main+0x5c>
    }
    else
    {
  	  fres = f_write(&SFLASHPath, &str, sizeof(str), bw);
 800049a:	4b1c      	ldr	r3, [pc, #112]	; (800050c <main+0xd0>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2264      	movs	r2, #100	; 0x64
 80004a0:	491b      	ldr	r1, [pc, #108]	; (8000510 <main+0xd4>)
 80004a2:	4815      	ldr	r0, [pc, #84]	; (80004f8 <main+0xbc>)
 80004a4:	f004 fb21 	bl	8004aea <f_write>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <main+0xc8>)
 80004ae:	701a      	strb	r2, [r3, #0]
  	  fres = f_close(&SFLASHPath);
 80004b0:	4811      	ldr	r0, [pc, #68]	; (80004f8 <main+0xbc>)
 80004b2:	f004 fd2c 	bl	8004f0e <f_close>
 80004b6:	4603      	mov	r3, r0
 80004b8:	461a      	mov	r2, r3
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <main+0xc8>)
 80004bc:	701a      	strb	r2, [r3, #0]
    }


    fres = f_open(&SFLASHPath, "test", FA_READ);
 80004be:	2201      	movs	r2, #1
 80004c0:	4911      	ldr	r1, [pc, #68]	; (8000508 <main+0xcc>)
 80004c2:	480d      	ldr	r0, [pc, #52]	; (80004f8 <main+0xbc>)
 80004c4:	f003 ffe6 	bl	8004494 <f_open>
 80004c8:	4603      	mov	r3, r0
 80004ca:	461a      	mov	r2, r3
 80004cc:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <main+0xc8>)
 80004ce:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK)
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <main+0xc8>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d000      	beq.n	80004da <main+0x9e>
    {
  	  while(1);
 80004d8:	e7fe      	b.n	80004d8 <main+0x9c>
    }
    else
    {
  	  fres = f_read(&SFLASHPath, &buffer, 11, bw);
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <main+0xd0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	220b      	movs	r2, #11
 80004e0:	490c      	ldr	r1, [pc, #48]	; (8000514 <main+0xd8>)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <main+0xbc>)
 80004e4:	f004 f9a2 	bl	800482c <f_read>
 80004e8:	4603      	mov	r3, r0
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <main+0xc8>)
 80004ee:	701a      	strb	r2, [r3, #0]
    }
    f_close(&SFLASHPath);  /* USER CODE END 2 */
 80004f0:	4801      	ldr	r0, [pc, #4]	; (80004f8 <main+0xbc>)
 80004f2:	f004 fd0c 	bl	8004f0e <f_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80004f6:	e7fe      	b.n	80004f6 <main+0xba>
 80004f8:	2000113c 	.word	0x2000113c
 80004fc:	20000070 	.word	0x20000070
 8000500:	20000104 	.word	0x20000104
 8000504:	20001138 	.word	0x20001138
 8000508:	0800508c 	.word	0x0800508c
 800050c:	2000236c 	.word	0x2000236c
 8000510:	20000000 	.word	0x20000000
 8000514:	2000216c 	.word	0x2000216c

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	; 0x58
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2244      	movs	r2, #68	; 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f004 fd77 	bl	800501a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053e:	f000 fd35 	bl	8000fac <HAL_PWREx_ControlVoltageScaling>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000548:	f000 f8c0 	bl	80006cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800054c:	2310      	movs	r3, #16
 800054e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000558:	2360      	movs	r3, #96	; 0x60
 800055a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055c:	2300      	movs	r3, #0
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fd77 	bl	8001058 <HAL_RCC_OscConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000570:	f000 f8ac 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	230f      	movs	r3, #15
 8000576:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f001 f977 	bl	8001880 <HAL_RCC_ClockConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000598:	f000 f898 	bl	80006cc <Error_Handler>
  }
}
 800059c:	bf00      	nop
 800059e:	3758      	adds	r7, #88	; 0x58
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <MX_SPI2_Init+0x74>)
 80005aa:	4a1c      	ldr	r2, [pc, #112]	; (800061c <MX_SPI2_Init+0x78>)
 80005ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005ae:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <MX_SPI2_Init+0x74>)
 80005b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <MX_SPI2_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <MX_SPI2_Init+0x74>)
 80005be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_SPI2_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <MX_SPI2_Init+0x74>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_SPI2_Init+0x74>)
 80005d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_SPI2_Init+0x74>)
 80005da:	2228      	movs	r2, #40	; 0x28
 80005dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_SPI2_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_SPI2_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_SPI2_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_SPI2_Init+0x74>)
 80005f2:	2207      	movs	r2, #7
 80005f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_SPI2_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_SPI2_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_SPI2_Init+0x74>)
 8000604:	f001 fb28 	bl	8001c58 <HAL_SPI_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800060e:	f000 f85d 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000a0 	.word	0x200000a0
 800061c:	40003800 	.word	0x40003800

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <MX_GPIO_Init+0xa4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <MX_GPIO_Init+0xa4>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <MX_GPIO_Init+0xa4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_GPIO_Init+0xa4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <MX_GPIO_Init+0xa4>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_GPIO_Init+0xa4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000670:	f000 fc76 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2120      	movs	r1, #32
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <MX_GPIO_Init+0xa8>)
 800067a:	f000 fc71 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 800067e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069a:	f000 fae7 	bl	8000c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800069e:	2320      	movs	r3, #32
 80006a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a2:	2301      	movs	r3, #1
 80006a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	4619      	mov	r1, r3
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_GPIO_Init+0xa8>)
 80006b6:	f000 fad9 	bl	8000c6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ba:	bf00      	nop
 80006bc:	3720      	adds	r7, #32
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48000400 	.word	0x48000400

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x8>
	...

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_MspInit+0x44>)
 80006e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_MspInit+0x44>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6613      	str	r3, [r2, #96]	; 0x60
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_MspInit+0x44>)
 80006ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_MspInit+0x44>)
 80006f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <HAL_MspInit+0x44>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	6593      	str	r3, [r2, #88]	; 0x58
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_MspInit+0x44>)
 8000704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <HAL_SPI_MspInit+0x8c>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d130      	bne.n	80007a4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_SPI_MspInit+0x90>)
 8000744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000746:	4a1a      	ldr	r2, [pc, #104]	; (80007b0 <HAL_SPI_MspInit+0x90>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	6593      	str	r3, [r2, #88]	; 0x58
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_SPI_MspInit+0x90>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_SPI_MspInit+0x90>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <HAL_SPI_MspInit+0x90>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_SPI_MspInit+0x90>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 8000772:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000784:	2305      	movs	r3, #5
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4809      	ldr	r0, [pc, #36]	; (80007b4 <HAL_SPI_MspInit+0x94>)
 8000790:	f000 fa6c 	bl	8000c6c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	2024      	movs	r0, #36	; 0x24
 800079a:	f000 f9f0 	bl	8000b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800079e:	2024      	movs	r0, #36	; 0x24
 80007a0:	f000 fa09 	bl	8000bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40003800 	.word	0x40003800
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000400 	.word	0x48000400

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f89c 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <SPI2_IRQHandler+0x10>)
 8000812:	f001 fb73 	bl	8001efc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000a0 	.word	0x200000a0

08000820 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <SystemInit+0x20>)
 8000826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082a:	4a05      	ldr	r2, [pc, #20]	; (8000840 <SystemInit+0x20>)
 800082c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800087c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000848:	f7ff ffea 	bl	8000820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	; (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000872:	f004 fbdb 	bl	800502c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000876:	f7ff fde1 	bl	800043c <main>

0800087a <LoopForever>:

LoopForever:
    b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800087c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000888:	080051a0 	.word	0x080051a0
  ldr r2, =_sbss
 800088c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000890:	200023b0 	.word	0x200023b0

08000894 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_IRQHandler>

08000896 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800089c:	2300      	movs	r3, #0
 800089e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f961 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a6:	200f      	movs	r0, #15
 80008a8:	f000 f80e 	bl	80008c8 <HAL_InitTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	e001      	b.n	80008bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b8:	f7ff ff0e 	bl	80006d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_InitTick+0x6c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d023      	beq.n	8000924 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <HAL_InitTick+0x70>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_InitTick+0x6c>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f96d 	bl	8000bd2 <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10f      	bne.n	800091e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d809      	bhi.n	8000918 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f000 f937 	bl	8000b7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_InitTick+0x74>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	e007      	b.n	8000928 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	e004      	b.n	8000928 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	e001      	b.n	8000928 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000928:	7bfb      	ldrb	r3, [r7, #15]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000006c 	.word	0x2000006c
 8000938:	20000064 	.word	0x20000064
 800093c:	20000068 	.word	0x20000068

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	2000006c 	.word	0x2000006c
 8000964:	20002370 	.word	0x20002370

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20002370 	.word	0x20002370

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff ffee 	bl	8000968 <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffde 	bl	8000968 <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000006c 	.word	0x2000006c

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <__NVIC_EnableIRQ+0x38>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	; (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	; 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	; 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff8e 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff29 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff3e 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff8e 	bl	8000abc <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5d 	bl	8000a68 <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff31 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ffa2 	bl	8000b24 <SysTick_Config>
 8000be0:	4603      	mov	r3, r0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d005      	beq.n	8000c0e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2204      	movs	r2, #4
 8000c06:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e029      	b.n	8000c62 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 020e 	bic.w	r2, r2, #14
 8000c1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 0201 	bic.w	r2, r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f003 021c 	and.w	r2, r3, #28
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c40:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	4798      	blx	r3
    }
  }
  return status;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b087      	sub	sp, #28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7a:	e154      	b.n	8000f26 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	2101      	movs	r1, #1
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 8146 	beq.w	8000f20 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d005      	beq.n	8000cac <HAL_GPIO_Init+0x40>
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d130      	bne.n	8000d0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	091b      	lsrs	r3, r3, #4
 8000cf8:	f003 0201 	and.w	r2, r3, #1
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d017      	beq.n	8000d4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d123      	bne.n	8000d9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	08da      	lsrs	r2, r3, #3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3208      	adds	r2, #8
 8000d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	6939      	ldr	r1, [r7, #16]
 8000d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	2203      	movs	r2, #3
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0203 	and.w	r2, r3, #3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 80a0 	beq.w	8000f20 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de0:	4b58      	ldr	r3, [pc, #352]	; (8000f44 <HAL_GPIO_Init+0x2d8>)
 8000de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de4:	4a57      	ldr	r2, [pc, #348]	; (8000f44 <HAL_GPIO_Init+0x2d8>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6613      	str	r3, [r2, #96]	; 0x60
 8000dec:	4b55      	ldr	r3, [pc, #340]	; (8000f44 <HAL_GPIO_Init+0x2d8>)
 8000dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000df8:	4a53      	ldr	r2, [pc, #332]	; (8000f48 <HAL_GPIO_Init+0x2dc>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	220f      	movs	r2, #15
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e22:	d019      	beq.n	8000e58 <HAL_GPIO_Init+0x1ec>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a49      	ldr	r2, [pc, #292]	; (8000f4c <HAL_GPIO_Init+0x2e0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d013      	beq.n	8000e54 <HAL_GPIO_Init+0x1e8>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a48      	ldr	r2, [pc, #288]	; (8000f50 <HAL_GPIO_Init+0x2e4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d00d      	beq.n	8000e50 <HAL_GPIO_Init+0x1e4>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a47      	ldr	r2, [pc, #284]	; (8000f54 <HAL_GPIO_Init+0x2e8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d007      	beq.n	8000e4c <HAL_GPIO_Init+0x1e0>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a46      	ldr	r2, [pc, #280]	; (8000f58 <HAL_GPIO_Init+0x2ec>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d101      	bne.n	8000e48 <HAL_GPIO_Init+0x1dc>
 8000e44:	2304      	movs	r3, #4
 8000e46:	e008      	b.n	8000e5a <HAL_GPIO_Init+0x1ee>
 8000e48:	2307      	movs	r3, #7
 8000e4a:	e006      	b.n	8000e5a <HAL_GPIO_Init+0x1ee>
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e004      	b.n	8000e5a <HAL_GPIO_Init+0x1ee>
 8000e50:	2302      	movs	r3, #2
 8000e52:	e002      	b.n	8000e5a <HAL_GPIO_Init+0x1ee>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <HAL_GPIO_Init+0x1ee>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	f002 0203 	and.w	r2, r2, #3
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	4093      	lsls	r3, r2
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e6a:	4937      	ldr	r1, [pc, #220]	; (8000f48 <HAL_GPIO_Init+0x2dc>)
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e78:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <HAL_GPIO_Init+0x2f0>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e9c:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <HAL_GPIO_Init+0x2f0>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <HAL_GPIO_Init+0x2f0>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ec6:	4a25      	ldr	r2, [pc, #148]	; (8000f5c <HAL_GPIO_Init+0x2f0>)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ecc:	4b23      	ldr	r3, [pc, #140]	; (8000f5c <HAL_GPIO_Init+0x2f0>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ef0:	4a1a      	ldr	r2, [pc, #104]	; (8000f5c <HAL_GPIO_Init+0x2f0>)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_GPIO_Init+0x2f0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <HAL_GPIO_Init+0x2f0>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3301      	adds	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f47f aea3 	bne.w	8000c7c <HAL_GPIO_Init+0x10>
  }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	371c      	adds	r7, #28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	48000400 	.word	0x48000400
 8000f50:	48000800 	.word	0x48000800
 8000f54:	48000c00 	.word	0x48000c00
 8000f58:	48001000 	.word	0x48001000
 8000f5c:	40010400 	.word	0x40010400

08000f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40007000 	.word	0x40007000

08000fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fba:	d130      	bne.n	800101e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fc8:	d038      	beq.n	800103c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2232      	movs	r2, #50	; 0x32
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	0c9b      	lsrs	r3, r3, #18
 8000fec:	3301      	adds	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ff0:	e002      	b.n	8000ff8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001004:	d102      	bne.n	800100c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f2      	bne.n	8000ff2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001018:	d110      	bne.n	800103c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e00f      	b.n	800103e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800102a:	d007      	beq.n	800103c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001034:	4a05      	ldr	r2, [pc, #20]	; (800104c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40007000 	.word	0x40007000
 8001050:	20000064 	.word	0x20000064
 8001054:	431bde83 	.word	0x431bde83

08001058 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	f000 bc02 	b.w	8001870 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800106c:	4b96      	ldr	r3, [pc, #600]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001076:	4b94      	ldr	r3, [pc, #592]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80e4 	beq.w	8001256 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d007      	beq.n	80010a4 <HAL_RCC_OscConfig+0x4c>
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b0c      	cmp	r3, #12
 8001098:	f040 808b 	bne.w	80011b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	f040 8087 	bne.w	80011b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010a4:	4b88      	ldr	r3, [pc, #544]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_OscConfig+0x64>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e3d9      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1a      	ldr	r2, [r3, #32]
 80010c0:	4b81      	ldr	r3, [pc, #516]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <HAL_RCC_OscConfig+0x7e>
 80010cc:	4b7e      	ldr	r3, [pc, #504]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010d4:	e005      	b.n	80010e2 <HAL_RCC_OscConfig+0x8a>
 80010d6:	4b7c      	ldr	r3, [pc, #496]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80010d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d223      	bcs.n	800112e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fd54 	bl	8001b98 <RCC_SetFlashLatencyFromMSIRange>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e3ba      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010fa:	4b73      	ldr	r3, [pc, #460]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a72      	ldr	r2, [pc, #456]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b70      	ldr	r3, [pc, #448]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	496d      	ldr	r1, [pc, #436]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001118:	4b6b      	ldr	r3, [pc, #428]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	4968      	ldr	r1, [pc, #416]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
 800112c:	e025      	b.n	800117a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800112e:	4b66      	ldr	r3, [pc, #408]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a65      	ldr	r2, [pc, #404]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	4960      	ldr	r1, [pc, #384]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001148:	4313      	orrs	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800114c:	4b5e      	ldr	r3, [pc, #376]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	495b      	ldr	r1, [pc, #364]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 800115c:	4313      	orrs	r3, r2
 800115e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fd14 	bl	8001b98 <RCC_SetFlashLatencyFromMSIRange>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e37a      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800117a:	f000 fc81 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 800117e:	4602      	mov	r2, r0
 8001180:	4b51      	ldr	r3, [pc, #324]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	4950      	ldr	r1, [pc, #320]	; (80012cc <HAL_RCC_OscConfig+0x274>)
 800118c:	5ccb      	ldrb	r3, [r1, r3]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	4a4e      	ldr	r2, [pc, #312]	; (80012d0 <HAL_RCC_OscConfig+0x278>)
 8001198:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800119a:	4b4e      	ldr	r3, [pc, #312]	; (80012d4 <HAL_RCC_OscConfig+0x27c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fb92 	bl	80008c8 <HAL_InitTick>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d052      	beq.n	8001254 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	e35e      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d032      	beq.n	8001220 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011ba:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a42      	ldr	r2, [pc, #264]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fbcf 	bl	8000968 <HAL_GetTick>
 80011ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011ce:	f7ff fbcb 	bl	8000968 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e347      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011e0:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ec:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a35      	ldr	r2, [pc, #212]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	4930      	ldr	r1, [pc, #192]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120a:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	492b      	ldr	r1, [pc, #172]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 800121a:	4313      	orrs	r3, r2
 800121c:	604b      	str	r3, [r1, #4]
 800121e:	e01a      	b.n	8001256 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001220:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a28      	ldr	r2, [pc, #160]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800122c:	f7ff fb9c 	bl	8000968 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001234:	f7ff fb98 	bl	8000968 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e314      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x1dc>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001254:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d073      	beq.n	800134a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b08      	cmp	r3, #8
 8001266:	d005      	beq.n	8001274 <HAL_RCC_OscConfig+0x21c>
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	d10e      	bne.n	800128c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b03      	cmp	r3, #3
 8001272:	d10b      	bne.n	800128c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d063      	beq.n	8001348 <HAL_RCC_OscConfig+0x2f0>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d15f      	bne.n	8001348 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e2f1      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x24c>
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e025      	b.n	80012f0 <HAL_RCC_OscConfig+0x298>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d114      	bne.n	80012d8 <HAL_RCC_OscConfig+0x280>
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a02      	ldr	r2, [pc, #8]	; (80012c8 <HAL_RCC_OscConfig+0x270>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e013      	b.n	80012f0 <HAL_RCC_OscConfig+0x298>
 80012c8:	40021000 	.word	0x40021000
 80012cc:	080050d8 	.word	0x080050d8
 80012d0:	20000064 	.word	0x20000064
 80012d4:	20000068 	.word	0x20000068
 80012d8:	4ba0      	ldr	r3, [pc, #640]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a9f      	ldr	r2, [pc, #636]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80012de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b9d      	ldr	r3, [pc, #628]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a9c      	ldr	r2, [pc, #624]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80012ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff fb36 	bl	8000968 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fb32 	bl	8000968 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e2ae      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001312:	4b92      	ldr	r3, [pc, #584]	; (800155c <HAL_RCC_OscConfig+0x504>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x2a8>
 800131e:	e014      	b.n	800134a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001320:	f7ff fb22 	bl	8000968 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fb1e 	bl	8000968 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	; 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e29a      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800133a:	4b88      	ldr	r3, [pc, #544]	; (800155c <HAL_RCC_OscConfig+0x504>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x2d0>
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d060      	beq.n	8001418 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	2b04      	cmp	r3, #4
 800135a:	d005      	beq.n	8001368 <HAL_RCC_OscConfig+0x310>
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2b0c      	cmp	r3, #12
 8001360:	d119      	bne.n	8001396 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d116      	bne.n	8001396 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001368:	4b7c      	ldr	r3, [pc, #496]	; (800155c <HAL_RCC_OscConfig+0x504>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_RCC_OscConfig+0x328>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e277      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	4b76      	ldr	r3, [pc, #472]	; (800155c <HAL_RCC_OscConfig+0x504>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	061b      	lsls	r3, r3, #24
 800138e:	4973      	ldr	r1, [pc, #460]	; (800155c <HAL_RCC_OscConfig+0x504>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001394:	e040      	b.n	8001418 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d023      	beq.n	80013e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139e:	4b6f      	ldr	r3, [pc, #444]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a6e      	ldr	r2, [pc, #440]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fadd 	bl	8000968 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fad9 	bl	8000968 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e255      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c4:	4b65      	ldr	r3, [pc, #404]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b62      	ldr	r3, [pc, #392]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	495f      	ldr	r1, [pc, #380]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
 80013e4:	e018      	b.n	8001418 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b5d      	ldr	r3, [pc, #372]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a5c      	ldr	r2, [pc, #368]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80013ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff fab9 	bl	8000968 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fa:	f7ff fab5 	bl	8000968 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e231      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <HAL_RCC_OscConfig+0x504>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f0      	bne.n	80013fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	2b00      	cmp	r3, #0
 8001422:	d03c      	beq.n	800149e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d01c      	beq.n	8001466 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142c:	4b4b      	ldr	r3, [pc, #300]	; (800155c <HAL_RCC_OscConfig+0x504>)
 800142e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001432:	4a4a      	ldr	r2, [pc, #296]	; (800155c <HAL_RCC_OscConfig+0x504>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fa94 	bl	8000968 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fa90 	bl	8000968 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e20c      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001456:	4b41      	ldr	r3, [pc, #260]	; (800155c <HAL_RCC_OscConfig+0x504>)
 8001458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0ef      	beq.n	8001444 <HAL_RCC_OscConfig+0x3ec>
 8001464:	e01b      	b.n	800149e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001466:	4b3d      	ldr	r3, [pc, #244]	; (800155c <HAL_RCC_OscConfig+0x504>)
 8001468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146c:	4a3b      	ldr	r2, [pc, #236]	; (800155c <HAL_RCC_OscConfig+0x504>)
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001476:	f7ff fa77 	bl	8000968 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147e:	f7ff fa73 	bl	8000968 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e1ef      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001490:	4b32      	ldr	r3, [pc, #200]	; (800155c <HAL_RCC_OscConfig+0x504>)
 8001492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1ef      	bne.n	800147e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80a6 	beq.w	80015f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10d      	bne.n	80014d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	4a26      	ldr	r2, [pc, #152]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80014c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c6:	6593      	str	r3, [r2, #88]	; 0x58
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_RCC_OscConfig+0x504>)
 80014ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d4:	2301      	movs	r3, #1
 80014d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_RCC_OscConfig+0x508>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d118      	bne.n	8001516 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <HAL_RCC_OscConfig+0x508>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <HAL_RCC_OscConfig+0x508>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f0:	f7ff fa3a 	bl	8000968 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f8:	f7ff fa36 	bl	8000968 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e1b2      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_RCC_OscConfig+0x508>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <HAL_RCC_OscConfig+0x4d8>
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_RCC_OscConfig+0x504>)
 8001520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <HAL_RCC_OscConfig+0x504>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800152e:	e029      	b.n	8001584 <HAL_RCC_OscConfig+0x52c>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b05      	cmp	r3, #5
 8001536:	d115      	bne.n	8001564 <HAL_RCC_OscConfig+0x50c>
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_RCC_OscConfig+0x504>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153e:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_RCC_OscConfig+0x504>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <HAL_RCC_OscConfig+0x504>)
 800154a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154e:	4a03      	ldr	r2, [pc, #12]	; (800155c <HAL_RCC_OscConfig+0x504>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001558:	e014      	b.n	8001584 <HAL_RCC_OscConfig+0x52c>
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	40007000 	.word	0x40007000
 8001564:	4b9a      	ldr	r3, [pc, #616]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156a:	4a99      	ldr	r2, [pc, #612]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001574:	4b96      	ldr	r3, [pc, #600]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 8001576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157a:	4a95      	ldr	r2, [pc, #596]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d016      	beq.n	80015ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158c:	f7ff f9ec 	bl	8000968 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff f9e8 	bl	8000968 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e162      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015aa:	4b89      	ldr	r3, [pc, #548]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 80015ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0ed      	beq.n	8001594 <HAL_RCC_OscConfig+0x53c>
 80015b8:	e015      	b.n	80015e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff f9d5 	bl	8000968 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff f9d1 	bl	8000968 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e14b      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015d8:	4b7d      	ldr	r3, [pc, #500]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 80015da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ed      	bne.n	80015c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e6:	7ffb      	ldrb	r3, [r7, #31]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d105      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ec:	4b78      	ldr	r3, [pc, #480]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	4a77      	ldr	r2, [pc, #476]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 80015f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0320 	and.w	r3, r3, #32
 8001600:	2b00      	cmp	r3, #0
 8001602:	d03c      	beq.n	800167e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01c      	beq.n	8001646 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800160c:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 800160e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001612:	4a6f      	ldr	r2, [pc, #444]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff f9a4 	bl	8000968 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001624:	f7ff f9a0 	bl	8000968 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e11c      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001636:	4b66      	ldr	r3, [pc, #408]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 8001638:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ef      	beq.n	8001624 <HAL_RCC_OscConfig+0x5cc>
 8001644:	e01b      	b.n	800167e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001646:	4b62      	ldr	r3, [pc, #392]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 8001648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800164c:	4a60      	ldr	r2, [pc, #384]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001656:	f7ff f987 	bl	8000968 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800165e:	f7ff f983 	bl	8000968 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e0ff      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001670:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 8001672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ef      	bne.n	800165e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80f3 	beq.w	800186e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	2b02      	cmp	r3, #2
 800168e:	f040 80c9 	bne.w	8001824 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001692:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f003 0203 	and.w	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d12c      	bne.n	8001700 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	3b01      	subs	r3, #1
 80016b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d123      	bne.n	8001700 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d11b      	bne.n	8001700 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d113      	bne.n	8001700 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e2:	085b      	lsrs	r3, r3, #1
 80016e4:	3b01      	subs	r3, #1
 80016e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d109      	bne.n	8001700 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d06b      	beq.n	80017d8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	2b0c      	cmp	r3, #12
 8001704:	d062      	beq.n	80017cc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001706:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0ac      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001716:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 800171c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001720:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001722:	f7ff f921 	bl	8000968 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff f91d 	bl	8000968 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e099      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <HAL_RCC_OscConfig+0x77c>)
 800174e:	4013      	ands	r3, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001758:	3a01      	subs	r2, #1
 800175a:	0112      	lsls	r2, r2, #4
 800175c:	4311      	orrs	r1, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001762:	0212      	lsls	r2, r2, #8
 8001764:	4311      	orrs	r1, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800176a:	0852      	lsrs	r2, r2, #1
 800176c:	3a01      	subs	r2, #1
 800176e:	0552      	lsls	r2, r2, #21
 8001770:	4311      	orrs	r1, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001776:	0852      	lsrs	r2, r2, #1
 8001778:	3a01      	subs	r2, #1
 800177a:	0652      	lsls	r2, r2, #25
 800177c:	4311      	orrs	r1, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001782:	06d2      	lsls	r2, r2, #27
 8001784:	430a      	orrs	r2, r1
 8001786:	4912      	ldr	r1, [pc, #72]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 8001788:	4313      	orrs	r3, r2
 800178a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001796:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 800179e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017a4:	f7ff f8e0 	bl	8000968 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff f8dc 	bl	8000968 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e058      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <HAL_RCC_OscConfig+0x778>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ca:	e050      	b.n	800186e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e04f      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
 80017d0:	40021000 	.word	0x40021000
 80017d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_RCC_OscConfig+0x820>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d144      	bne.n	800186e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_RCC_OscConfig+0x820>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a23      	ldr	r2, [pc, #140]	; (8001878 <HAL_RCC_OscConfig+0x820>)
 80017ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_RCC_OscConfig+0x820>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4a20      	ldr	r2, [pc, #128]	; (8001878 <HAL_RCC_OscConfig+0x820>)
 80017f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017fc:	f7ff f8b4 	bl	8000968 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff f8b0 	bl	8000968 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e02c      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_RCC_OscConfig+0x820>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x7ac>
 8001822:	e024      	b.n	800186e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d01f      	beq.n	800186a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_RCC_OscConfig+0x820>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <HAL_RCC_OscConfig+0x820>)
 8001830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff f897 	bl	8000968 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff f893 	bl	8000968 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e00f      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_RCC_OscConfig+0x820>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_RCC_OscConfig+0x820>)
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	4905      	ldr	r1, [pc, #20]	; (8001878 <HAL_RCC_OscConfig+0x820>)
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_RCC_OscConfig+0x824>)
 8001864:	4013      	ands	r3, r2
 8001866:	60cb      	str	r3, [r1, #12]
 8001868:	e001      	b.n	800186e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3720      	adds	r7, #32
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	feeefffc 	.word	0xfeeefffc

08001880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0e7      	b.n	8001a64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001894:	4b75      	ldr	r3, [pc, #468]	; (8001a6c <HAL_RCC_ClockConfig+0x1ec>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d910      	bls.n	80018c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b72      	ldr	r3, [pc, #456]	; (8001a6c <HAL_RCC_ClockConfig+0x1ec>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 0207 	bic.w	r2, r3, #7
 80018aa:	4970      	ldr	r1, [pc, #448]	; (8001a6c <HAL_RCC_ClockConfig+0x1ec>)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b6e      	ldr	r3, [pc, #440]	; (8001a6c <HAL_RCC_ClockConfig+0x1ec>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0cf      	b.n	8001a64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d010      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	4b66      	ldr	r3, [pc, #408]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018dc:	429a      	cmp	r2, r3
 80018de:	d908      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e0:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4960      	ldr	r1, [pc, #384]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d04c      	beq.n	8001998 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001906:	4b5a      	ldr	r3, [pc, #360]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d121      	bne.n	8001956 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0a6      	b.n	8001a64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800191e:	4b54      	ldr	r3, [pc, #336]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d115      	bne.n	8001956 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e09a      	b.n	8001a64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001936:	4b4e      	ldr	r3, [pc, #312]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e08e      	b.n	8001a64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e086      	b.n	8001a64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001956:	4b46      	ldr	r3, [pc, #280]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f023 0203 	bic.w	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4943      	ldr	r1, [pc, #268]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001964:	4313      	orrs	r3, r2
 8001966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001968:	f7fe fffe 	bl	8000968 <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	e00a      	b.n	8001986 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f7fe fffa 	bl	8000968 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e06e      	b.n	8001a64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 020c 	and.w	r2, r3, #12
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	429a      	cmp	r2, r3
 8001996:	d1eb      	bne.n	8001970 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d010      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d208      	bcs.n	80019c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	492b      	ldr	r1, [pc, #172]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_RCC_ClockConfig+0x1ec>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d210      	bcs.n	80019f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_RCC_ClockConfig+0x1ec>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 0207 	bic.w	r2, r3, #7
 80019dc:	4923      	ldr	r1, [pc, #140]	; (8001a6c <HAL_RCC_ClockConfig+0x1ec>)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_RCC_ClockConfig+0x1ec>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e036      	b.n	8001a64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4918      	ldr	r1, [pc, #96]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4910      	ldr	r1, [pc, #64]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a34:	f000 f824 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	490b      	ldr	r1, [pc, #44]	; (8001a74 <HAL_RCC_ClockConfig+0x1f4>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	f003 031f 	and.w	r3, r3, #31
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 8001a52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_ClockConfig+0x1fc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe ff35 	bl	80008c8 <HAL_InitTick>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a62:	7afb      	ldrb	r3, [r7, #11]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40022000 	.word	0x40022000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	080050d8 	.word	0x080050d8
 8001a78:	20000064 	.word	0x20000064
 8001a7c:	20000068 	.word	0x20000068

08001a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a98:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d121      	bne.n	8001af2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d11e      	bne.n	8001af2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ab4:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac6:	0a1b      	lsrs	r3, r3, #8
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	e005      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001adc:	4a2b      	ldr	r2, [pc, #172]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10d      	bne.n	8001b08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d102      	bne.n	8001afe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	e004      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2b0c      	cmp	r3, #12
 8001b0c:	d134      	bne.n	8001b78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d003      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d003      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0xac>
 8001b24:	e005      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b28:	617b      	str	r3, [r7, #20]
      break;
 8001b2a:	e005      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b2c:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b2e:	617b      	str	r3, [r7, #20]
      break;
 8001b30:	e002      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	617b      	str	r3, [r7, #20]
      break;
 8001b36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	3301      	adds	r3, #1
 8001b44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	0a1b      	lsrs	r3, r3, #8
 8001b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	fb03 f202 	mul.w	r2, r3, r2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	0e5b      	lsrs	r3, r3, #25
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b78:	69bb      	ldr	r3, [r7, #24]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	; 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	080050e8 	.word	0x080050e8
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	007a1200 	.word	0x007a1200

08001b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bb0:	f7ff f9ee 	bl	8000f90 <HAL_PWREx_GetVoltageRange>
 8001bb4:	6178      	str	r0, [r7, #20]
 8001bb6:	e014      	b.n	8001be2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc4:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bd0:	f7ff f9de 	bl	8000f90 <HAL_PWREx_GetVoltageRange>
 8001bd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be8:	d10b      	bne.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b80      	cmp	r3, #128	; 0x80
 8001bee:	d919      	bls.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2ba0      	cmp	r3, #160	; 0xa0
 8001bf4:	d902      	bls.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	e013      	b.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	e010      	b.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b80      	cmp	r3, #128	; 0x80
 8001c06:	d902      	bls.n	8001c0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c08:	2303      	movs	r3, #3
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	e00a      	b.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b80      	cmp	r3, #128	; 0x80
 8001c12:	d102      	bne.n	8001c1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c14:	2302      	movs	r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	e004      	b.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b70      	cmp	r3, #112	; 0x70
 8001c1e:	d101      	bne.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c20:	2301      	movs	r3, #1
 8001c22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 0207 	bic.w	r2, r3, #7
 8001c2c:	4909      	ldr	r1, [pc, #36]	; (8001c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d001      	beq.n	8001c46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40022000 	.word	0x40022000

08001c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e095      	b.n	8001d96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d108      	bne.n	8001c84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c7a:	d009      	beq.n	8001c90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
 8001c82:	e005      	b.n	8001c90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fd38 	bl	8000720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001cd0:	d902      	bls.n	8001cd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	e002      	b.n	8001cde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001ce6:	d007      	beq.n	8001cf8 <HAL_SPI_Init+0xa0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001cf0:	d002      	beq.n	8001cf8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	ea42 0103 	orr.w	r1, r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	0c1b      	lsrs	r3, r3, #16
 8001d54:	f003 0204 	and.w	r2, r3, #4
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001d74:	ea42 0103 	orr.w	r1, r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001db8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001dc0:	7dbb      	ldrb	r3, [r7, #22]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d00d      	beq.n	8001de2 <HAL_SPI_TransmitReceive_IT+0x42>
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dcc:	d106      	bne.n	8001ddc <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <HAL_SPI_TransmitReceive_IT+0x3c>
 8001dd6:	7dbb      	ldrb	r3, [r7, #22]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d002      	beq.n	8001de2 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001de0:	e07d      	b.n	8001ede <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_SPI_TransmitReceive_IT+0x54>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_SPI_TransmitReceive_IT+0x54>
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001df8:	e071      	b.n	8001ede <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_SPI_TransmitReceive_IT+0x68>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e06b      	b.n	8001ee0 <HAL_SPI_TransmitReceive_IT+0x140>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d003      	beq.n	8001e24 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2205      	movs	r2, #5
 8001e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	887a      	ldrh	r2, [r7, #2]
 8001e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	887a      	ldrh	r2, [r7, #2]
 8001e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e5a:	d906      	bls.n	8001e6a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a23      	ldr	r2, [pc, #140]	; (8001eec <HAL_SPI_TransmitReceive_IT+0x14c>)
 8001e60:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <HAL_SPI_TransmitReceive_IT+0x150>)
 8001e66:	651a      	str	r2, [r3, #80]	; 0x50
 8001e68:	e005      	b.n	8001e76 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_SPI_TransmitReceive_IT+0x154>)
 8001e6e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4a21      	ldr	r2, [pc, #132]	; (8001ef8 <HAL_SPI_TransmitReceive_IT+0x158>)
 8001e74:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e7e:	d802      	bhi.n	8001e86 <HAL_SPI_TransmitReceive_IT+0xe6>
 8001e80:	887b      	ldrh	r3, [r7, #2]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d908      	bls.n	8001e98 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	e007      	b.n	8001ea8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ea6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb2:	2b40      	cmp	r3, #64	; 0x40
 8001eb4:	d007      	beq.n	8001ec6 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001edc:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	0800229b 	.word	0x0800229b
 8001ef0:	08002301 	.word	0x08002301
 8001ef4:	0800214b 	.word	0x0800214b
 8001ef8:	08002209 	.word	0x08002209

08001efc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10e      	bne.n	8001f3c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d004      	beq.n	8001f3c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
    return;
 8001f3a:	e0ce      	b.n	80020da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_SPI_IRQHandler+0x5e>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
    return;
 8001f58:	e0bf      	b.n	80020da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10a      	bne.n	8001f7a <HAL_SPI_IRQHandler+0x7e>
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80b0 	beq.w	80020da <HAL_SPI_IRQHandler+0x1de>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80aa 	beq.w	80020da <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d023      	beq.n	8001fd8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d011      	beq.n	8001fc0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa0:	f043 0204 	orr.w	r2, r3, #4
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
        return;
 8001fd6:	e080      	b.n	80020da <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d014      	beq.n	800200c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800201a:	f043 0208 	orr.w	r2, r3, #8
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002034:	2b00      	cmp	r3, #0
 8002036:	d04f      	beq.n	80020d8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002046:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d104      	bne.n	8002064 <HAL_SPI_IRQHandler+0x168>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d034      	beq.n	80020ce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0203 	bic.w	r2, r2, #3
 8002072:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	2b00      	cmp	r3, #0
 800207a:	d011      	beq.n	80020a0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <HAL_SPI_IRQHandler+0x1e4>)
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fdae 	bl	8000bea <HAL_DMA_Abort_IT>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002098:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d016      	beq.n	80020d6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	4a0c      	ldr	r2, [pc, #48]	; (80020e0 <HAL_SPI_IRQHandler+0x1e4>)
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fd98 	bl	8000bea <HAL_DMA_Abort_IT>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80020cc:	e003      	b.n	80020d6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f81c 	bl	800210c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80020d4:	e000      	b.n	80020d8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80020d6:	bf00      	nop
    return;
 80020d8:	bf00      	nop
  }
}
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	08002121 	.word	0x08002121

080020e4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff ffe5 	bl	800210c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d923      	bls.n	80021a6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	b292      	uxth	r2, r2
 800216a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	1c9a      	adds	r2, r3, #2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b02      	subs	r3, #2
 8002180:	b29a      	uxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d11f      	bne.n	80021d4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	e016      	b.n	80021d4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f103 020c 	add.w	r2, r3, #12
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	7812      	ldrb	r2, [r2, #0]
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10f      	bne.n	8002200 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021ee:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fa14 	bl	8002628 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d912      	bls.n	8002240 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	881a      	ldrh	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	1c9a      	adds	r2, r3, #2
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b02      	subs	r3, #2
 8002238:	b29a      	uxth	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800223e:	e012      	b.n	8002266 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	330c      	adds	r3, #12
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d110      	bne.n	8002292 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f9cb 	bl	8002628 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	b292      	uxth	r2, r2
 80022ae:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	1c9a      	adds	r2, r3, #2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10f      	bne.n	80022f8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022e6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f998 	bl	8002628 <SPI_CloseRxTx_ISR>
    }
  }
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	881a      	ldrh	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002318:	1c9a      	adds	r2, r3, #2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d110      	bne.n	8002358 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002344:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f968 	bl	8002628 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	4613      	mov	r3, r2
 800236e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002370:	f7fe fafa 	bl	8000968 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	4413      	add	r3, r2
 800237e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002380:	f7fe faf2 	bl	8000968 <HAL_GetTick>
 8002384:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	015b      	lsls	r3, r3, #5
 800238c:	0d1b      	lsrs	r3, r3, #20
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002396:	e054      	b.n	8002442 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239e:	d050      	beq.n	8002442 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023a0:	f7fe fae2 	bl	8000968 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d902      	bls.n	80023b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d13d      	bne.n	8002432 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ce:	d111      	bne.n	80023f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d8:	d004      	beq.n	80023e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e2:	d107      	bne.n	80023f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fc:	d10f      	bne.n	800241e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800241c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e017      	b.n	8002462 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3b01      	subs	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4013      	ands	r3, r2
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	429a      	cmp	r2, r3
 8002450:	bf0c      	ite	eq
 8002452:	2301      	moveq	r3, #1
 8002454:	2300      	movne	r3, #0
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	429a      	cmp	r2, r3
 800245e:	d19b      	bne.n	8002398 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000064 	.word	0x20000064

08002470 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002482:	f7fe fa71 	bl	8000968 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	4413      	add	r3, r2
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002492:	f7fe fa69 	bl	8000968 <HAL_GetTick>
 8002496:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	330c      	adds	r3, #12
 800249e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80024a0:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00da      	lsls	r2, r3, #3
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	0d1b      	lsrs	r3, r3, #20
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80024b8:	e060      	b.n	800257c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024c0:	d107      	bne.n	80024d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d104      	bne.n	80024d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d050      	beq.n	800257c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024da:	f7fe fa45 	bl	8000968 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d902      	bls.n	80024f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d13d      	bne.n	800256c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002508:	d111      	bne.n	800252e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002512:	d004      	beq.n	800251e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251c:	d107      	bne.n	800252e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800252c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002536:	d10f      	bne.n	8002558 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002556:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e010      	b.n	800258e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	3b01      	subs	r3, #1
 800257a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4013      	ands	r3, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	d196      	bne.n	80024ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000064 	.word	0x20000064

0800259c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7ff ff5b 	bl	8002470 <SPI_WaitFifoStateUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c4:	f043 0220 	orr.w	r2, r3, #32
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e027      	b.n	8002620 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	2180      	movs	r1, #128	; 0x80
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff fec0 	bl	8002360 <SPI_WaitFlagStateUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e014      	b.n	8002620 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff ff34 	bl	8002470 <SPI_WaitFifoStateUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002612:	f043 0220 	orr.w	r2, r3, #32
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e000      	b.n	8002620 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002630:	f7fe f99a 	bl	8000968 <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0220 	bic.w	r2, r2, #32
 8002644:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	2164      	movs	r1, #100	; 0x64
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ffa6 	bl	800259c <SPI_EndRxTxTransaction>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265a:	f043 0220 	orr.w	r2, r3, #32
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002666:	2b00      	cmp	r3, #0
 8002668:	d115      	bne.n	8002696 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b04      	cmp	r3, #4
 8002674:	d107      	bne.n	8002686 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fd30 	bl	80020e4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002684:	e00e      	b.n	80026a4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff fd32 	bl	80020f8 <HAL_SPI_TxRxCpltCallback>
}
 8002694:	e006      	b.n	80026a4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fd34 	bl	800210c <HAL_SPI_ErrorCallback>
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80026b0:	4904      	ldr	r1, [pc, #16]	; (80026c4 <MX_FATFS_Init+0x18>)
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_FATFS_Init+0x1c>)
 80026b4:	f002 fca2 	bl	8004ffc <FATFS_LinkDriver>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <MX_FATFS_Init+0x20>)
 80026be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20002378 	.word	0x20002378
 80026c8:	20000070 	.word	0x20000070
 80026cc:	20002374 	.word	0x20002374

080026d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80026d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <USER_initialize+0x24>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
    return Stat;
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <USER_initialize+0x24>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	2000006d 	.word	0x2000006d

08002708 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <USER_status+0x24>)
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <USER_status+0x24>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	2000006d 	.word	0x2000006d

08002730 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	4603      	mov	r3, r0
 800273e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	int i;
	for(i=0;i<count;i++)
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	e00d      	b.n	8002762 <USER_read+0x32>
	{
		Flash_Read_Sector(sector,buff);
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7fd fdda 	bl	8000302 <Flash_Read_Sector>
		sector ++;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3301      	adds	r3, #1
 8002752:	607b      	str	r3, [r7, #4]
		buff += FLASH_SECTOR_SIZE;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275a:	60bb      	str	r3, [r7, #8]
	for(i=0;i<count;i++)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3301      	adds	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d8ed      	bhi.n	8002746 <USER_read+0x16>
	}

	return RES_OK;
 800276a:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4603      	mov	r3, r0
 8002782:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	int i;
	for(i=0;i<count;i++)
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e010      	b.n	80027ac <USER_write+0x38>
	{	Flash_Erase_Sector(sector);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fd fd81 	bl	8000292 <Flash_Erase_Sector>

		Flash_Write_Sector(sector,(char*)buff);
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7fd fdf6 	bl	8000384 <Flash_Write_Sector>
		sector ++;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3301      	adds	r3, #1
 800279c:	607b      	str	r3, [r7, #4]
		buff += FLASH_SECTOR_SIZE;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a4:	60bb      	str	r3, [r7, #8]
	for(i=0;i<count;i++)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d8ea      	bhi.n	800278a <USER_write+0x16>
	}

    return RES_OK;
 80027b4:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	603a      	str	r2, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	460b      	mov	r3, r1
 80027ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
	switch(cmd)
 80027d4:	79bb      	ldrb	r3, [r7, #6]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d819      	bhi.n	800280e <USER_ioctl+0x4e>
 80027da:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <USER_ioctl+0x20>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	0800280f 	.word	0x0800280f
 80027e4:	08002805 	.word	0x08002805
 80027e8:	080027fb 	.word	0x080027fb
 80027ec:	080027f1 	.word	0x080027f1
//				W25X_Erase_Sector(i);
//
//			break;

			case GET_BLOCK_SIZE:
				*(DWORD*)buff = FLASH_BLOCK_SIZE;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027f6:	601a      	str	r2, [r3, #0]
			//	buf[1] = (u8)(FLASH_BLOCK_SIZE & 0xFF);
			//	buf[0] = (u8)(FLASH_BLOCK_SIZE >> 8);
				break;
 80027f8:	e00a      	b.n	8002810 <USER_ioctl+0x50>


			case GET_SECTOR_SIZE:
				*(DWORD*)buff = FLASH_SECTOR_SIZE;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002800:	601a      	str	r2, [r3, #0]
			//	buf[0] = (u8)(FLASH_SECTOR_SIZE & 0xFF);
			//	buf[1] = (u8)(FLASH_SECTOR_SIZE >> 8);
				break;
 8002802:	e005      	b.n	8002810 <USER_ioctl+0x50>

			case GET_SECTOR_COUNT:
				*(DWORD*)buff = FLASH_SECTOR_COUNT;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800280a:	601a      	str	r2, [r3, #0]
			//	buf[0] = (u8)(FLASH_SECTOR_COUNT & 0xFF);
			//	buf[1] = (u8)(FLASH_SECTOR_COUNT >> 8);
				break;
 800280c:	e000      	b.n	8002810 <USER_ioctl+0x50>

			default:
				//res = RES_PARERR;
				break;
 800280e:	bf00      	nop
		}
    return res;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop

08002820 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	4a08      	ldr	r2, [pc, #32]	; (8002850 <disk_status+0x30>)
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	79fa      	ldrb	r2, [r7, #7]
 8002838:	4905      	ldr	r1, [pc, #20]	; (8002850 <disk_status+0x30>)
 800283a:	440a      	add	r2, r1
 800283c:	7a12      	ldrb	r2, [r2, #8]
 800283e:	4610      	mov	r0, r2
 8002840:	4798      	blx	r3
 8002842:	4603      	mov	r3, r0
 8002844:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200023a4 	.word	0x200023a4

08002854 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	4a0d      	ldr	r2, [pc, #52]	; (800289c <disk_initialize+0x48>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d111      	bne.n	8002890 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	4a0b      	ldr	r2, [pc, #44]	; (800289c <disk_initialize+0x48>)
 8002870:	2101      	movs	r1, #1
 8002872:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <disk_initialize+0x48>)
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	79fa      	ldrb	r2, [r7, #7]
 8002882:	4906      	ldr	r1, [pc, #24]	; (800289c <disk_initialize+0x48>)
 8002884:	440a      	add	r2, r1
 8002886:	7a12      	ldrb	r2, [r2, #8]
 8002888:	4610      	mov	r0, r2
 800288a:	4798      	blx	r3
 800288c:	4603      	mov	r3, r0
 800288e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200023a4 	.word	0x200023a4

080028a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	4603      	mov	r3, r0
 80028ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <disk_read+0x3c>)
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	689c      	ldr	r4, [r3, #8]
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	4a07      	ldr	r2, [pc, #28]	; (80028dc <disk_read+0x3c>)
 80028c0:	4413      	add	r3, r2
 80028c2:	7a18      	ldrb	r0, [r3, #8]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	47a0      	blx	r4
 80028cc:	4603      	mov	r3, r0
 80028ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd90      	pop	{r4, r7, pc}
 80028da:	bf00      	nop
 80028dc:	200023a4 	.word	0x200023a4

080028e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4603      	mov	r3, r0
 80028ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	4a0a      	ldr	r2, [pc, #40]	; (800291c <disk_write+0x3c>)
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	68dc      	ldr	r4, [r3, #12]
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	4a07      	ldr	r2, [pc, #28]	; (800291c <disk_write+0x3c>)
 8002900:	4413      	add	r3, r2
 8002902:	7a18      	ldrb	r0, [r3, #8]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	47a0      	blx	r4
 800290c:	4603      	mov	r3, r0
 800290e:	75fb      	strb	r3, [r7, #23]
  return res;
 8002910:	7dfb      	ldrb	r3, [r7, #23]
}
 8002912:	4618      	mov	r0, r3
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	bf00      	nop
 800291c:	200023a4 	.word	0x200023a4

08002920 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	603a      	str	r2, [r7, #0]
 800292a:	71fb      	strb	r3, [r7, #7]
 800292c:	460b      	mov	r3, r1
 800292e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <disk_ioctl+0x38>)
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	79fa      	ldrb	r2, [r7, #7]
 800293e:	4906      	ldr	r1, [pc, #24]	; (8002958 <disk_ioctl+0x38>)
 8002940:	440a      	add	r2, r1
 8002942:	7a10      	ldrb	r0, [r2, #8]
 8002944:	79b9      	ldrb	r1, [r7, #6]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	4798      	blx	r3
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
  return res;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200023a4 	.word	0x200023a4

0800295c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3301      	adds	r3, #1
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800296c:	89fb      	ldrh	r3, [r7, #14]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	b21a      	sxth	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b21b      	sxth	r3, r3
 8002978:	4313      	orrs	r3, r2
 800297a:	b21b      	sxth	r3, r3
 800297c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800297e:	89fb      	ldrh	r3, [r7, #14]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3303      	adds	r3, #3
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	3202      	adds	r2, #2
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	3201      	adds	r2, #1
 80029b2:	7812      	ldrb	r2, [r2, #0]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	7812      	ldrb	r2, [r2, #0]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
	return rv;
 80029c4:	68fb      	ldr	r3, [r7, #12]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	887a      	ldrh	r2, [r7, #2]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	0a1b      	lsrs	r3, r3, #8
 8002a34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	701a      	strb	r2, [r3, #0]
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00d      	beq.n	8002a96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	1c53      	adds	r3, r2, #1
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	1c59      	adds	r1, r3, #1
 8002a84:	6179      	str	r1, [r7, #20]
 8002a86:	7812      	ldrb	r2, [r2, #0]
 8002a88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f1      	bne.n	8002a7a <mem_cpy+0x1a>
	}
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002aa2:	b480      	push	{r7}
 8002aa4:	b087      	sub	sp, #28
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	617a      	str	r2, [r7, #20]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f3      	bne.n	8002ab2 <mem_set+0x10>
}
 8002aca:	bf00      	nop
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	61fa      	str	r2, [r7, #28]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4619      	mov	r1, r3
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	61ba      	str	r2, [r7, #24]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	1acb      	subs	r3, r1, r3
 8002b04:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <mem_cmp+0x40>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0eb      	beq.n	8002af0 <mem_cmp+0x18>

	return r;
 8002b18:	697b      	ldr	r3, [r7, #20]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002b30:	e002      	b.n	8002b38 <chk_chr+0x12>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3301      	adds	r3, #1
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <chk_chr+0x26>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d1f2      	bne.n	8002b32 <chk_chr+0xc>
	return *str;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	781b      	ldrb	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	e029      	b.n	8002bc4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8002b70:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <chk_lock+0xb4>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	4413      	add	r3, r2
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01d      	beq.n	8002bba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002b7e:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <chk_lock+0xb4>)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	4413      	add	r3, r2
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d116      	bne.n	8002bbe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8002b90:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <chk_lock+0xb4>)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	4413      	add	r3, r2
 8002b98:	3304      	adds	r3, #4
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d10c      	bne.n	8002bbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002ba4:	4a1a      	ldr	r2, [pc, #104]	; (8002c10 <chk_lock+0xb4>)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	4413      	add	r3, r2
 8002bac:	3308      	adds	r3, #8
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d102      	bne.n	8002bbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8002bb8:	e007      	b.n	8002bca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d9d2      	bls.n	8002b70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d109      	bne.n	8002be4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <chk_lock+0x80>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d101      	bne.n	8002be0 <chk_lock+0x84>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e010      	b.n	8002c02 <chk_lock+0xa6>
 8002be0:	2312      	movs	r3, #18
 8002be2:	e00e      	b.n	8002c02 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <chk_lock+0xa0>
 8002bea:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <chk_lock+0xb4>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	4413      	add	r3, r2
 8002bf2:	330c      	adds	r3, #12
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfa:	d101      	bne.n	8002c00 <chk_lock+0xa4>
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	e000      	b.n	8002c02 <chk_lock+0xa6>
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20002384 	.word	0x20002384

08002c14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	e002      	b.n	8002c26 <enq_lock+0x12>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3301      	adds	r3, #1
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d806      	bhi.n	8002c3a <enq_lock+0x26>
 8002c2c:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <enq_lock+0x40>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4413      	add	r3, r2
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f2      	bne.n	8002c20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20002384 	.word	0x20002384

08002c58 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	e01f      	b.n	8002ca8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8002c68:	4a41      	ldr	r2, [pc, #260]	; (8002d70 <inc_lock+0x118>)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	4413      	add	r3, r2
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d113      	bne.n	8002ca2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8002c7a:	4a3d      	ldr	r2, [pc, #244]	; (8002d70 <inc_lock+0x118>)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	4413      	add	r3, r2
 8002c82:	3304      	adds	r3, #4
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d109      	bne.n	8002ca2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8002c8e:	4a38      	ldr	r2, [pc, #224]	; (8002d70 <inc_lock+0x118>)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	4413      	add	r3, r2
 8002c96:	3308      	adds	r3, #8
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d006      	beq.n	8002cb0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d9dc      	bls.n	8002c68 <inc_lock+0x10>
 8002cae:	e000      	b.n	8002cb2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8002cb0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d132      	bne.n	8002d1e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e002      	b.n	8002cc4 <inc_lock+0x6c>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d806      	bhi.n	8002cd8 <inc_lock+0x80>
 8002cca:	4a29      	ldr	r2, [pc, #164]	; (8002d70 <inc_lock+0x118>)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	4413      	add	r3, r2
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f2      	bne.n	8002cbe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d101      	bne.n	8002ce2 <inc_lock+0x8a>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e040      	b.n	8002d64 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4922      	ldr	r1, [pc, #136]	; (8002d70 <inc_lock+0x118>)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	440b      	add	r3, r1
 8002cee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	491e      	ldr	r1, [pc, #120]	; (8002d70 <inc_lock+0x118>)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	491a      	ldr	r1, [pc, #104]	; (8002d70 <inc_lock+0x118>)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8002d10:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <inc_lock+0x118>)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	4413      	add	r3, r2
 8002d18:	330c      	adds	r3, #12
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d009      	beq.n	8002d38 <inc_lock+0xe0>
 8002d24:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <inc_lock+0x118>)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	4413      	add	r3, r2
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <inc_lock+0xe0>
 8002d34:	2300      	movs	r3, #0
 8002d36:	e015      	b.n	8002d64 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d108      	bne.n	8002d50 <inc_lock+0xf8>
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <inc_lock+0x118>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	4413      	add	r3, r2
 8002d46:	330c      	adds	r3, #12
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	e001      	b.n	8002d54 <inc_lock+0xfc>
 8002d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d54:	4906      	ldr	r1, [pc, #24]	; (8002d70 <inc_lock+0x118>)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	440b      	add	r3, r1
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3301      	adds	r3, #1
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	20002384 	.word	0x20002384

08002d74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d825      	bhi.n	8002dd4 <dec_lock+0x60>
		n = Files[i].ctr;
 8002d88:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <dec_lock+0x74>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	4413      	add	r3, r2
 8002d90:	330c      	adds	r3, #12
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002d96:	89fb      	ldrh	r3, [r7, #14]
 8002d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9c:	d101      	bne.n	8002da2 <dec_lock+0x2e>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8002da2:	89fb      	ldrh	r3, [r7, #14]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <dec_lock+0x3a>
 8002da8:	89fb      	ldrh	r3, [r7, #14]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <dec_lock+0x74>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	4413      	add	r3, r2
 8002db6:	330c      	adds	r3, #12
 8002db8:	89fa      	ldrh	r2, [r7, #14]
 8002dba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002dbc:	89fb      	ldrh	r3, [r7, #14]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <dec_lock+0x5a>
 8002dc2:	4a09      	ldr	r2, [pc, #36]	; (8002de8 <dec_lock+0x74>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	4413      	add	r3, r2
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	737b      	strb	r3, [r7, #13]
 8002dd2:	e001      	b.n	8002dd8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8002dd8:	7b7b      	ldrb	r3, [r7, #13]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20002384 	.word	0x20002384

08002dec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e010      	b.n	8002e1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002dfa:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <clear_lock+0x44>)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	4413      	add	r3, r2
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d105      	bne.n	8002e16 <clear_lock+0x2a>
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <clear_lock+0x44>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	4413      	add	r3, r2
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d9eb      	bls.n	8002dfa <clear_lock+0xe>
	}
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	20002384 	.word	0x20002384

08002e34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	78db      	ldrb	r3, [r3, #3]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d034      	beq.n	8002eb2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	7858      	ldrb	r0, [r3, #1]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e58:	2301      	movs	r3, #1
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	f7ff fd40 	bl	80028e0 <disk_write>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <sync_window+0x38>
			res = FR_DISK_ERR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
 8002e6a:	e022      	b.n	8002eb2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	1ad2      	subs	r2, r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d217      	bcs.n	8002eb2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	789b      	ldrb	r3, [r3, #2]
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	e010      	b.n	8002eac <sync_window+0x78>
					wsect += fs->fsize;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4413      	add	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	7858      	ldrb	r0, [r3, #1]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	f7ff fd1d 	bl	80028e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d8eb      	bhi.n	8002e8a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d01b      	beq.n	8002f0c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ffad 	bl	8002e34 <sync_window>
 8002eda:	4603      	mov	r3, r0
 8002edc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d113      	bne.n	8002f0c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	7858      	ldrb	r0, [r3, #1]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002eee:	2301      	movs	r3, #1
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	f7ff fcd5 	bl	80028a0 <disk_read>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d004      	beq.n	8002f06 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002efc:	f04f 33ff 	mov.w	r3, #4294967295
 8002f00:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ff87 	bl	8002e34 <sync_window>
 8002f26:	4603      	mov	r3, r0
 8002f28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d159      	bne.n	8002fe4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d149      	bne.n	8002fcc <sync_fs+0xb4>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	791b      	ldrb	r3, [r3, #4]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d145      	bne.n	8002fcc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	899b      	ldrh	r3, [r3, #12]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f7ff fda8 	bl	8002aa2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3334      	adds	r3, #52	; 0x34
 8002f56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002f5a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fd37 	bl	80029d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3334      	adds	r3, #52	; 0x34
 8002f68:	4921      	ldr	r1, [pc, #132]	; (8002ff0 <sync_fs+0xd8>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fd4c 	bl	8002a08 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3334      	adds	r3, #52	; 0x34
 8002f74:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002f78:	491e      	ldr	r1, [pc, #120]	; (8002ff4 <sync_fs+0xdc>)
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fd44 	bl	8002a08 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3334      	adds	r3, #52	; 0x34
 8002f84:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f7ff fd3a 	bl	8002a08 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3334      	adds	r3, #52	; 0x34
 8002f98:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f7ff fd30 	bl	8002a08 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7858      	ldrb	r0, [r3, #1]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f7ff fc8d 	bl	80028e0 <disk_write>
			fs->fsi_flag = 0;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	785b      	ldrb	r3, [r3, #1]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fca3 	bl	8002920 <disk_ioctl>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <sync_fs+0xcc>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	41615252 	.word	0x41615252
 8002ff4:	61417272 	.word	0x61417272

08002ff8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	3b02      	subs	r3, #2
 8003006:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	3b02      	subs	r3, #2
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d301      	bcc.n	8003018 <clust2sect+0x20>
 8003014:	2300      	movs	r3, #0
 8003016:	e008      	b.n	800302a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	895b      	ldrh	r3, [r3, #10]
 800301c:	461a      	mov	r2, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	fb03 f202 	mul.w	r2, r3, r2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	4413      	add	r3, r2
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d904      	bls.n	8003056 <get_fat+0x20>
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <get_fat+0x26>
		val = 1;	/* Internal error */
 8003056:	2301      	movs	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e0bb      	b.n	80031d4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b03      	cmp	r3, #3
 8003068:	f000 8083 	beq.w	8003172 <get_fat+0x13c>
 800306c:	2b03      	cmp	r3, #3
 800306e:	f300 80a7 	bgt.w	80031c0 <get_fat+0x18a>
 8003072:	2b01      	cmp	r3, #1
 8003074:	d002      	beq.n	800307c <get_fat+0x46>
 8003076:	2b02      	cmp	r3, #2
 8003078:	d056      	beq.n	8003128 <get_fat+0xf2>
 800307a:	e0a1      	b.n	80031c0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	899b      	ldrh	r3, [r3, #12]
 8003092:	4619      	mov	r1, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	fbb3 f3f1 	udiv	r3, r3, r1
 800309a:	4413      	add	r3, r2
 800309c:	4619      	mov	r1, r3
 800309e:	6938      	ldr	r0, [r7, #16]
 80030a0:	f7ff ff0c 	bl	8002ebc <move_window>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 808d 	bne.w	80031c6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	60fa      	str	r2, [r7, #12]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	8992      	ldrh	r2, [r2, #12]
 80030b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80030ba:	fb01 f202 	mul.w	r2, r1, r2
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	899b      	ldrh	r3, [r3, #12]
 80030d2:	4619      	mov	r1, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030da:	4413      	add	r3, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	6938      	ldr	r0, [r7, #16]
 80030e0:	f7ff feec 	bl	8002ebc <move_window>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d16f      	bne.n	80031ca <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	899b      	ldrh	r3, [r3, #12]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80030f6:	fb01 f202 	mul.w	r2, r1, r2
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	461a      	mov	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
 800310c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <get_fat+0xe8>
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	e002      	b.n	8003124 <get_fat+0xee>
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003124:	617b      	str	r3, [r7, #20]
			break;
 8003126:	e055      	b.n	80031d4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	899b      	ldrh	r3, [r3, #12]
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	b29b      	uxth	r3, r3
 8003134:	4619      	mov	r1, r3
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	fbb3 f3f1 	udiv	r3, r3, r1
 800313c:	4413      	add	r3, r2
 800313e:	4619      	mov	r1, r3
 8003140:	6938      	ldr	r0, [r7, #16]
 8003142:	f7ff febb 	bl	8002ebc <move_window>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d140      	bne.n	80031ce <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	8992      	ldrh	r2, [r2, #12]
 800315a:	fbb3 f0f2 	udiv	r0, r3, r2
 800315e:	fb00 f202 	mul.w	r2, r0, r2
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	440b      	add	r3, r1
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fbf8 	bl	800295c <ld_word>
 800316c:	4603      	mov	r3, r0
 800316e:	617b      	str	r3, [r7, #20]
			break;
 8003170:	e030      	b.n	80031d4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	899b      	ldrh	r3, [r3, #12]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	b29b      	uxth	r3, r3
 800317e:	4619      	mov	r1, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	fbb3 f3f1 	udiv	r3, r3, r1
 8003186:	4413      	add	r3, r2
 8003188:	4619      	mov	r1, r3
 800318a:	6938      	ldr	r0, [r7, #16]
 800318c:	f7ff fe96 	bl	8002ebc <move_window>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11d      	bne.n	80031d2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	8992      	ldrh	r2, [r2, #12]
 80031a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80031a8:	fb00 f202 	mul.w	r2, r0, r2
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	440b      	add	r3, r1
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fbeb 	bl	800298c <ld_dword>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80031bc:	617b      	str	r3, [r7, #20]
			break;
 80031be:	e009      	b.n	80031d4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80031c0:	2301      	movs	r3, #1
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e006      	b.n	80031d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80031c6:	bf00      	nop
 80031c8:	e004      	b.n	80031d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80031ca:	bf00      	nop
 80031cc:	e002      	b.n	80031d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80031ce:	bf00      	nop
 80031d0:	e000      	b.n	80031d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80031d2:	bf00      	nop
		}
	}

	return val;
 80031d4:	697b      	ldr	r3, [r7, #20]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80031de:	b590      	push	{r4, r7, lr}
 80031e0:	b089      	sub	sp, #36	; 0x24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80031ea:	2302      	movs	r3, #2
 80031ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	f240 8109 	bls.w	8003408 <put_fat+0x22a>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	f080 8103 	bcs.w	8003408 <put_fat+0x22a>
		switch (fs->fs_type) {
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b03      	cmp	r3, #3
 8003208:	f000 80b6 	beq.w	8003378 <put_fat+0x19a>
 800320c:	2b03      	cmp	r3, #3
 800320e:	f300 80fb 	bgt.w	8003408 <put_fat+0x22a>
 8003212:	2b01      	cmp	r3, #1
 8003214:	d003      	beq.n	800321e <put_fat+0x40>
 8003216:	2b02      	cmp	r3, #2
 8003218:	f000 8083 	beq.w	8003322 <put_fat+0x144>
 800321c:	e0f4      	b.n	8003408 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4413      	add	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	899b      	ldrh	r3, [r3, #12]
 8003234:	4619      	mov	r1, r3
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	fbb3 f3f1 	udiv	r3, r3, r1
 800323c:	4413      	add	r3, r2
 800323e:	4619      	mov	r1, r3
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff fe3b 	bl	8002ebc <move_window>
 8003246:	4603      	mov	r3, r0
 8003248:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800324a:	7ffb      	ldrb	r3, [r7, #31]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 80d4 	bne.w	80033fa <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	61ba      	str	r2, [r7, #24]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	8992      	ldrh	r2, [r2, #12]
 8003262:	fbb3 f0f2 	udiv	r0, r3, r2
 8003266:	fb00 f202 	mul.w	r2, r0, r2
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	440b      	add	r3, r1
 800326e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00d      	beq.n	8003296 <put_fat+0xb8>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b25b      	sxtb	r3, r3
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	b25a      	sxtb	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	b25b      	sxtb	r3, r3
 800328e:	4313      	orrs	r3, r2
 8003290:	b25b      	sxtb	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	e001      	b.n	800329a <put_fat+0xbc>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	899b      	ldrh	r3, [r3, #12]
 80032ac:	4619      	mov	r1, r3
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80032b4:	4413      	add	r3, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7ff fdff 	bl	8002ebc <move_window>
 80032be:	4603      	mov	r3, r0
 80032c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80032c2:	7ffb      	ldrb	r3, [r7, #31]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 809a 	bne.w	80033fe <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	899b      	ldrh	r3, [r3, #12]
 80032d4:	461a      	mov	r2, r3
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80032dc:	fb00 f202 	mul.w	r2, r0, r2
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	440b      	add	r3, r1
 80032e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <put_fat+0x11a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e00e      	b.n	8003316 <put_fat+0x138>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	f023 030f 	bic.w	r3, r3, #15
 8003302:	b25a      	sxtb	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	b25b      	sxtb	r3, r3
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	b25b      	sxtb	r3, r3
 8003310:	4313      	orrs	r3, r2
 8003312:	b25b      	sxtb	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	70da      	strb	r2, [r3, #3]
			break;
 8003320:	e072      	b.n	8003408 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	899b      	ldrh	r3, [r3, #12]
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	b29b      	uxth	r3, r3
 800332e:	4619      	mov	r1, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	fbb3 f3f1 	udiv	r3, r3, r1
 8003336:	4413      	add	r3, r2
 8003338:	4619      	mov	r1, r3
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff fdbe 	bl	8002ebc <move_window>
 8003340:	4603      	mov	r3, r0
 8003342:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003344:	7ffb      	ldrb	r3, [r7, #31]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d15b      	bne.n	8003402 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	8992      	ldrh	r2, [r2, #12]
 8003358:	fbb3 f0f2 	udiv	r0, r3, r2
 800335c:	fb00 f202 	mul.w	r2, r0, r2
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	440b      	add	r3, r1
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	b292      	uxth	r2, r2
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fb31 	bl	80029d2 <st_word>
			fs->wflag = 1;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	70da      	strb	r2, [r3, #3]
			break;
 8003376:	e047      	b.n	8003408 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	899b      	ldrh	r3, [r3, #12]
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	b29b      	uxth	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	fbb3 f3f1 	udiv	r3, r3, r1
 800338c:	4413      	add	r3, r2
 800338e:	4619      	mov	r1, r3
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f7ff fd93 	bl	8002ebc <move_window>
 8003396:	4603      	mov	r3, r0
 8003398:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800339a:	7ffb      	ldrb	r3, [r7, #31]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d132      	bne.n	8003406 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	8992      	ldrh	r2, [r2, #12]
 80033b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80033b8:	fb00 f202 	mul.w	r2, r0, r2
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	440b      	add	r3, r1
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fae3 	bl	800298c <ld_dword>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033cc:	4323      	orrs	r3, r4
 80033ce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	8992      	ldrh	r2, [r2, #12]
 80033de:	fbb3 f0f2 	udiv	r0, r3, r2
 80033e2:	fb00 f202 	mul.w	r2, r0, r2
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	440b      	add	r3, r1
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fb0b 	bl	8002a08 <st_dword>
			fs->wflag = 1;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	70da      	strb	r2, [r3, #3]
			break;
 80033f8:	e006      	b.n	8003408 <put_fat+0x22a>
			if (res != FR_OK) break;
 80033fa:	bf00      	nop
 80033fc:	e004      	b.n	8003408 <put_fat+0x22a>
			if (res != FR_OK) break;
 80033fe:	bf00      	nop
 8003400:	e002      	b.n	8003408 <put_fat+0x22a>
			if (res != FR_OK) break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <put_fat+0x22a>
			if (res != FR_OK) break;
 8003406:	bf00      	nop
		}
	}
	return res;
 8003408:	7ffb      	ldrb	r3, [r7, #31]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3724      	adds	r7, #36	; 0x24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd90      	pop	{r4, r7, pc}

08003412 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b088      	sub	sp, #32
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d904      	bls.n	8003438 <remove_chain+0x26>
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	429a      	cmp	r2, r3
 8003436:	d301      	bcc.n	800343c <remove_chain+0x2a>
 8003438:	2302      	movs	r3, #2
 800343a:	e04b      	b.n	80034d4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00c      	beq.n	800345c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003442:	f04f 32ff 	mov.w	r2, #4294967295
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	69b8      	ldr	r0, [r7, #24]
 800344a:	f7ff fec8 	bl	80031de <put_fat>
 800344e:	4603      	mov	r3, r0
 8003450:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003452:	7ffb      	ldrb	r3, [r7, #31]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <remove_chain+0x4a>
 8003458:	7ffb      	ldrb	r3, [r7, #31]
 800345a:	e03b      	b.n	80034d4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f7ff fde9 	bl	8003036 <get_fat>
 8003464:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d031      	beq.n	80034d0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <remove_chain+0x64>
 8003472:	2302      	movs	r3, #2
 8003474:	e02e      	b.n	80034d4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d101      	bne.n	8003482 <remove_chain+0x70>
 800347e:	2301      	movs	r3, #1
 8003480:	e028      	b.n	80034d4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003482:	2200      	movs	r2, #0
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	69b8      	ldr	r0, [r7, #24]
 8003488:	f7ff fea9 	bl	80031de <put_fat>
 800348c:	4603      	mov	r3, r0
 800348e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003490:	7ffb      	ldrb	r3, [r7, #31]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <remove_chain+0x88>
 8003496:	7ffb      	ldrb	r3, [r7, #31]
 8003498:	e01c      	b.n	80034d4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	3b02      	subs	r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d20b      	bcs.n	80034c0 <remove_chain+0xae>
			fs->free_clst++;
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	791b      	ldrb	r3, [r3, #4]
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d3c6      	bcc.n	800345c <remove_chain+0x4a>
 80034ce:	e000      	b.n	80034d2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80034d0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d004      	beq.n	8003508 <create_chain+0x2c>
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	429a      	cmp	r2, r3
 8003506:	d31b      	bcc.n	8003540 <create_chain+0x64>
 8003508:	2301      	movs	r3, #1
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	e018      	b.n	8003540 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800350e:	6839      	ldr	r1, [r7, #0]
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff fd90 	bl	8003036 <get_fat>
 8003516:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d801      	bhi.n	8003522 <create_chain+0x46>
 800351e:	2301      	movs	r3, #1
 8003520:	e070      	b.n	8003604 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d101      	bne.n	800352e <create_chain+0x52>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	e06a      	b.n	8003604 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	429a      	cmp	r2, r3
 8003536:	d201      	bcs.n	800353c <create_chain+0x60>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	e063      	b.n	8003604 <create_chain+0x128>
		scl = clst;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	3301      	adds	r3, #1
 8003548:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	429a      	cmp	r2, r3
 8003552:	d307      	bcc.n	8003564 <create_chain+0x88>
				ncl = 2;
 8003554:	2302      	movs	r3, #2
 8003556:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	429a      	cmp	r2, r3
 800355e:	d901      	bls.n	8003564 <create_chain+0x88>
 8003560:	2300      	movs	r3, #0
 8003562:	e04f      	b.n	8003604 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003564:	69f9      	ldr	r1, [r7, #28]
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fd65 	bl	8003036 <get_fat>
 800356c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d003      	beq.n	8003582 <create_chain+0xa6>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d101      	bne.n	8003586 <create_chain+0xaa>
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	e03e      	b.n	8003604 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	429a      	cmp	r2, r3
 800358c:	d1da      	bne.n	8003544 <create_chain+0x68>
 800358e:	2300      	movs	r3, #0
 8003590:	e038      	b.n	8003604 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003592:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003594:	f04f 32ff 	mov.w	r2, #4294967295
 8003598:	69f9      	ldr	r1, [r7, #28]
 800359a:	6938      	ldr	r0, [r7, #16]
 800359c:	f7ff fe1f 	bl	80031de <put_fat>
 80035a0:	4603      	mov	r3, r0
 80035a2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <create_chain+0xe2>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d006      	beq.n	80035be <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	6839      	ldr	r1, [r7, #0]
 80035b4:	6938      	ldr	r0, [r7, #16]
 80035b6:	f7ff fe12 	bl	80031de <put_fat>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d116      	bne.n	80035f2 <create_chain+0x116>
		fs->last_clst = ncl;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	3b02      	subs	r3, #2
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d804      	bhi.n	80035e2 <create_chain+0x106>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	1e5a      	subs	r2, r3, #1
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	791b      	ldrb	r3, [r3, #4]
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	711a      	strb	r2, [r3, #4]
 80035f0:	e007      	b.n	8003602 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d102      	bne.n	80035fe <create_chain+0x122>
 80035f8:	f04f 33ff 	mov.w	r3, #4294967295
 80035fc:	e000      	b.n	8003600 <create_chain+0x124>
 80035fe:	2301      	movs	r3, #1
 8003600:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003602:	69fb      	ldr	r3, [r7, #28]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	3304      	adds	r3, #4
 8003622:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	899b      	ldrh	r3, [r3, #12]
 8003628:	461a      	mov	r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	8952      	ldrh	r2, [r2, #10]
 8003634:	fbb3 f3f2 	udiv	r3, r3, r2
 8003638:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1d1a      	adds	r2, r3, #4
 800363e:	613a      	str	r2, [r7, #16]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <clmt_clust+0x42>
 800364a:	2300      	movs	r3, #0
 800364c:	e010      	b.n	8003670 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	d307      	bcc.n	8003666 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3304      	adds	r3, #4
 8003662:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003664:	e7e9      	b.n	800363a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8003666:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	4413      	add	r3, r2
}
 8003670:	4618      	mov	r0, r3
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003692:	d204      	bcs.n	800369e <dir_sdi+0x22>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800369e:	2302      	movs	r3, #2
 80036a0:	e071      	b.n	8003786 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <dir_sdi+0x46>
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d902      	bls.n	80036c2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10c      	bne.n	80036e2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	8912      	ldrh	r2, [r2, #8]
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d301      	bcc.n	80036d8 <dir_sdi+0x5c>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e056      	b.n	8003786 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	61da      	str	r2, [r3, #28]
 80036e0:	e02d      	b.n	800373e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	895b      	ldrh	r3, [r3, #10]
 80036e6:	461a      	mov	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	899b      	ldrh	r3, [r3, #12]
 80036ec:	fb02 f303 	mul.w	r3, r2, r3
 80036f0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80036f2:	e019      	b.n	8003728 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6979      	ldr	r1, [r7, #20]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fc9c 	bl	8003036 <get_fat>
 80036fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d101      	bne.n	800370c <dir_sdi+0x90>
 8003708:	2301      	movs	r3, #1
 800370a:	e03c      	b.n	8003786 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d904      	bls.n	800371c <dir_sdi+0xa0>
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	d301      	bcc.n	8003720 <dir_sdi+0xa4>
 800371c:	2302      	movs	r3, #2
 800371e:	e032      	b.n	8003786 <dir_sdi+0x10a>
			ofs -= csz;
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	429a      	cmp	r2, r3
 800372e:	d2e1      	bcs.n	80036f4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8003730:	6979      	ldr	r1, [r7, #20]
 8003732:	6938      	ldr	r0, [r7, #16]
 8003734:	f7ff fc60 	bl	8002ff8 <clust2sect>
 8003738:	4602      	mov	r2, r0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <dir_sdi+0xd4>
 800374c:	2302      	movs	r3, #2
 800374e:	e01a      	b.n	8003786 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	899b      	ldrh	r3, [r3, #12]
 8003758:	4619      	mov	r1, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003760:	441a      	add	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	899b      	ldrh	r3, [r3, #12]
 8003770:	461a      	mov	r2, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	fbb3 f0f2 	udiv	r0, r3, r2
 8003778:	fb00 f202 	mul.w	r2, r0, r2
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	18ca      	adds	r2, r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	3320      	adds	r3, #32
 80037a4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <dir_next+0x28>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037b4:	d301      	bcc.n	80037ba <dir_next+0x2c>
 80037b6:	2304      	movs	r3, #4
 80037b8:	e0bb      	b.n	8003932 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	899b      	ldrh	r3, [r3, #12]
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80037c6:	fb01 f202 	mul.w	r2, r1, r2
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f040 809d 	bne.w	800390c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10b      	bne.n	80037fc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	8912      	ldrh	r2, [r2, #8]
 80037ec:	4293      	cmp	r3, r2
 80037ee:	f0c0 808d 	bcc.w	800390c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	61da      	str	r2, [r3, #28]
 80037f8:	2304      	movs	r3, #4
 80037fa:	e09a      	b.n	8003932 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	899b      	ldrh	r3, [r3, #12]
 8003800:	461a      	mov	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	fbb3 f3f2 	udiv	r3, r3, r2
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	8952      	ldrh	r2, [r2, #10]
 800380c:	3a01      	subs	r2, #1
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d17b      	bne.n	800390c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f7ff fc0a 	bl	8003036 <get_fat>
 8003822:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d801      	bhi.n	800382e <dir_next+0xa0>
 800382a:	2302      	movs	r3, #2
 800382c:	e081      	b.n	8003932 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d101      	bne.n	800383a <dir_next+0xac>
 8003836:	2301      	movs	r3, #1
 8003838:	e07b      	b.n	8003932 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	429a      	cmp	r2, r3
 8003842:	d359      	bcc.n	80038f8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	61da      	str	r2, [r3, #28]
 8003850:	2304      	movs	r3, #4
 8003852:	e06e      	b.n	8003932 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7ff fe3d 	bl	80034dc <create_chain>
 8003862:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <dir_next+0xe0>
 800386a:	2307      	movs	r3, #7
 800386c:	e061      	b.n	8003932 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <dir_next+0xea>
 8003874:	2302      	movs	r3, #2
 8003876:	e05c      	b.n	8003932 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d101      	bne.n	8003884 <dir_next+0xf6>
 8003880:	2301      	movs	r3, #1
 8003882:	e056      	b.n	8003932 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7ff fad5 	bl	8002e34 <sync_window>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <dir_next+0x106>
 8003890:	2301      	movs	r3, #1
 8003892:	e04e      	b.n	8003932 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	899b      	ldrh	r3, [r3, #12]
 800389e:	461a      	mov	r2, r3
 80038a0:	2100      	movs	r1, #0
 80038a2:	f7ff f8fe 	bl	8002aa2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	6979      	ldr	r1, [r7, #20]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f7ff fba3 	bl	8002ff8 <clust2sect>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
 80038b8:	e012      	b.n	80038e0 <dir_next+0x152>
						fs->wflag = 1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7ff fab7 	bl	8002e34 <sync_window>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <dir_next+0x142>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e030      	b.n	8003932 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	3301      	adds	r3, #1
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	895b      	ldrh	r3, [r3, #10]
 80038e4:	461a      	mov	r2, r3
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d3e6      	bcc.n	80038ba <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad2      	subs	r2, r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80038fe:	6979      	ldr	r1, [r7, #20]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff fb79 	bl	8002ff8 <clust2sect>
 8003906:	4602      	mov	r2, r0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	899b      	ldrh	r3, [r3, #12]
 800391c:	461a      	mov	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	fbb3 f0f2 	udiv	r0, r3, r2
 8003924:	fb00 f202 	mul.w	r2, r0, r2
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	18ca      	adds	r2, r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b086      	sub	sp, #24
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800394a:	2100      	movs	r1, #0
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff fe95 	bl	800367c <dir_sdi>
 8003952:	4603      	mov	r3, r0
 8003954:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d12b      	bne.n	80039b4 <dir_alloc+0x7a>
		n = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	4619      	mov	r1, r3
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff faa8 	bl	8002ebc <move_window>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11d      	bne.n	80039b2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2be5      	cmp	r3, #229	; 0xe5
 800397e:	d004      	beq.n	800398a <dir_alloc+0x50>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d107      	bne.n	800399a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	3301      	adds	r3, #1
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d102      	bne.n	800399e <dir_alloc+0x64>
 8003998:	e00c      	b.n	80039b4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800399e:	2101      	movs	r1, #1
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff fef4 	bl	800378e <dir_next>
 80039a6:	4603      	mov	r3, r0
 80039a8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0d7      	beq.n	8003960 <dir_alloc+0x26>
 80039b0:	e000      	b.n	80039b4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80039b2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d101      	bne.n	80039be <dir_alloc+0x84>
 80039ba:	2307      	movs	r3, #7
 80039bc:	75fb      	strb	r3, [r7, #23]
	return res;
 80039be:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	331a      	adds	r3, #26
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe ffc0 	bl	800295c <ld_word>
 80039dc:	4603      	mov	r3, r0
 80039de:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d109      	bne.n	80039fc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	3314      	adds	r3, #20
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe ffb5 	bl	800295c <ld_word>
 80039f2:	4603      	mov	r3, r0
 80039f4:	041b      	lsls	r3, r3, #16
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80039fc:	68fb      	ldr	r3, [r7, #12]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	331a      	adds	r3, #26
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe ffd8 	bl	80029d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d109      	bne.n	8003a3e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f103 0214 	add.w	r2, r3, #20
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f7fe ffca 	bl	80029d2 <st_word>
	}
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b086      	sub	sp, #24
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003a54:	2100      	movs	r1, #0
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fe10 	bl	800367c <dir_sdi>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <dir_find+0x24>
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	e03e      	b.n	8003ae8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	6938      	ldr	r0, [r7, #16]
 8003a72:	f7ff fa23 	bl	8002ebc <move_window>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d12f      	bne.n	8003ae0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <dir_find+0x4e>
 8003a8e:	2304      	movs	r3, #4
 8003a90:	75fb      	strb	r3, [r7, #23]
 8003a92:	e028      	b.n	8003ae6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	330b      	adds	r3, #11
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	330b      	adds	r3, #11
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <dir_find+0x86>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a18      	ldr	r0, [r3, #32]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3324      	adds	r3, #36	; 0x24
 8003abe:	220b      	movs	r2, #11
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f7ff f809 	bl	8002ad8 <mem_cmp>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003acc:	2100      	movs	r1, #0
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fe5d 	bl	800378e <dir_next>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0c5      	beq.n	8003a6a <dir_find+0x24>
 8003ade:	e002      	b.n	8003ae6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8003ae0:	bf00      	nop
 8003ae2:	e000      	b.n	8003ae6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003ae4:	bf00      	nop

	return res;
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003afe:	2101      	movs	r1, #1
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff1a 	bl	800393a <dir_alloc>
 8003b06:	4603      	mov	r3, r0
 8003b08:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11c      	bne.n	8003b4a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	4619      	mov	r1, r3
 8003b16:	68b8      	ldr	r0, [r7, #8]
 8003b18:	f7ff f9d0 	bl	8002ebc <move_window>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d111      	bne.n	8003b4a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe ffb7 	bl	8002aa2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a18      	ldr	r0, [r3, #32]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3324      	adds	r3, #36	; 0x24
 8003b3c:	220b      	movs	r2, #11
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f7fe ff8e 	bl	8002a60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2201      	movs	r2, #1
 8003b48:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3324      	adds	r3, #36	; 0x24
 8003b68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8003b6a:	220b      	movs	r2, #11
 8003b6c:	2120      	movs	r1, #32
 8003b6e:	68b8      	ldr	r0, [r7, #8]
 8003b70:	f7fe ff97 	bl	8002aa2 <mem_set>
	si = i = 0; ni = 8;
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	61fb      	str	r3, [r7, #28]
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	61fa      	str	r2, [r7, #28]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003b8e:	7efb      	ldrb	r3, [r7, #27]
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d94e      	bls.n	8003c32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003b94:	7efb      	ldrb	r3, [r7, #27]
 8003b96:	2b2f      	cmp	r3, #47	; 0x2f
 8003b98:	d006      	beq.n	8003ba8 <create_name+0x54>
 8003b9a:	7efb      	ldrb	r3, [r7, #27]
 8003b9c:	2b5c      	cmp	r3, #92	; 0x5c
 8003b9e:	d110      	bne.n	8003bc2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003ba0:	e002      	b.n	8003ba8 <create_name+0x54>
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b2f      	cmp	r3, #47	; 0x2f
 8003bb2:	d0f6      	beq.n	8003ba2 <create_name+0x4e>
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b5c      	cmp	r3, #92	; 0x5c
 8003bbe:	d0f0      	beq.n	8003ba2 <create_name+0x4e>
			break;
 8003bc0:	e038      	b.n	8003c34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003bc2:	7efb      	ldrb	r3, [r7, #27]
 8003bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8003bc6:	d003      	beq.n	8003bd0 <create_name+0x7c>
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d30c      	bcc.n	8003bea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2b0b      	cmp	r3, #11
 8003bd4:	d002      	beq.n	8003bdc <create_name+0x88>
 8003bd6:	7efb      	ldrb	r3, [r7, #27]
 8003bd8:	2b2e      	cmp	r3, #46	; 0x2e
 8003bda:	d001      	beq.n	8003be0 <create_name+0x8c>
 8003bdc:	2306      	movs	r3, #6
 8003bde:	e044      	b.n	8003c6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8003be0:	2308      	movs	r3, #8
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	230b      	movs	r3, #11
 8003be6:	617b      	str	r3, [r7, #20]
			continue;
 8003be8:	e022      	b.n	8003c30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8003bea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	da04      	bge.n	8003bfc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003bf2:	7efb      	ldrb	r3, [r7, #27]
 8003bf4:	3b80      	subs	r3, #128	; 0x80
 8003bf6:	4a1f      	ldr	r2, [pc, #124]	; (8003c74 <create_name+0x120>)
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
 8003bfa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8003bfc:	7efb      	ldrb	r3, [r7, #27]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	481d      	ldr	r0, [pc, #116]	; (8003c78 <create_name+0x124>)
 8003c02:	f7fe ff90 	bl	8002b26 <chk_chr>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <create_name+0xbc>
 8003c0c:	2306      	movs	r3, #6
 8003c0e:	e02c      	b.n	8003c6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003c10:	7efb      	ldrb	r3, [r7, #27]
 8003c12:	2b60      	cmp	r3, #96	; 0x60
 8003c14:	d905      	bls.n	8003c22 <create_name+0xce>
 8003c16:	7efb      	ldrb	r3, [r7, #27]
 8003c18:	2b7a      	cmp	r3, #122	; 0x7a
 8003c1a:	d802      	bhi.n	8003c22 <create_name+0xce>
 8003c1c:	7efb      	ldrb	r3, [r7, #27]
 8003c1e:	3b20      	subs	r3, #32
 8003c20:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	613a      	str	r2, [r7, #16]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	7efa      	ldrb	r2, [r7, #27]
 8003c2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8003c30:	e7a6      	b.n	8003b80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003c32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	441a      	add	r2, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <create_name+0xf4>
 8003c44:	2306      	movs	r3, #6
 8003c46:	e010      	b.n	8003c6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2be5      	cmp	r3, #229	; 0xe5
 8003c4e:	d102      	bne.n	8003c56 <create_name+0x102>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2205      	movs	r2, #5
 8003c54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003c56:	7efb      	ldrb	r3, [r7, #27]
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d801      	bhi.n	8003c60 <create_name+0x10c>
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	e000      	b.n	8003c62 <create_name+0x10e>
 8003c60:	2200      	movs	r2, #0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	330b      	adds	r3, #11
 8003c66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8003c68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	08005118 	.word	0x08005118
 8003c78:	08005094 	.word	0x08005094

08003c7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003c90:	e002      	b.n	8003c98 <follow_path+0x1c>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b2f      	cmp	r3, #47	; 0x2f
 8003c9e:	d0f8      	beq.n	8003c92 <follow_path+0x16>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b5c      	cmp	r3, #92	; 0x5c
 8003ca6:	d0f4      	beq.n	8003c92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b1f      	cmp	r3, #31
 8003cb4:	d80a      	bhi.n	8003ccc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fcdb 	bl	800367c <dir_sdi>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	75fb      	strb	r3, [r7, #23]
 8003cca:	e048      	b.n	8003d5e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003ccc:	463b      	mov	r3, r7
 8003cce:	4619      	mov	r1, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff3f 	bl	8003b54 <create_name>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d139      	bne.n	8003d54 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff feb0 	bl	8003a46 <dir_find>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003cf0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003cf8:	7dfb      	ldrb	r3, [r7, #23]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d12c      	bne.n	8003d58 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003cfe:	7afb      	ldrb	r3, [r7, #11]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d127      	bne.n	8003d58 <follow_path+0xdc>
 8003d08:	2305      	movs	r3, #5
 8003d0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003d0c:	e024      	b.n	8003d58 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003d0e:	7afb      	ldrb	r3, [r7, #11]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d121      	bne.n	8003d5c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	799b      	ldrb	r3, [r3, #6]
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8003d24:	2305      	movs	r3, #5
 8003d26:	75fb      	strb	r3, [r7, #23]
 8003d28:	e019      	b.n	8003d5e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	8992      	ldrh	r2, [r2, #12]
 8003d38:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d3c:	fb00 f202 	mul.w	r2, r0, r2
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	440b      	add	r3, r1
 8003d44:	4619      	mov	r1, r3
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7ff fe3e 	bl	80039c8 <ld_clust>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003d52:	e7bb      	b.n	8003ccc <follow_path+0x50>
			if (res != FR_OK) break;
 8003d54:	bf00      	nop
 8003d56:	e002      	b.n	8003d5e <follow_path+0xe2>
				break;
 8003d58:	bf00      	nop
 8003d5a:	e000      	b.n	8003d5e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003d5c:	bf00      	nop
			}
		}
	}

	return res;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8003d70:	f04f 33ff 	mov.w	r3, #4294967295
 8003d74:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d031      	beq.n	8003de2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e002      	b.n	8003d8c <get_ldnumber+0x24>
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d903      	bls.n	8003d9c <get_ldnumber+0x34>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b3a      	cmp	r3, #58	; 0x3a
 8003d9a:	d1f4      	bne.n	8003d86 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b3a      	cmp	r3, #58	; 0x3a
 8003da2:	d11c      	bne.n	8003dde <get_ldnumber+0x76>
			tp = *path;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	60fa      	str	r2, [r7, #12]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	3b30      	subs	r3, #48	; 0x30
 8003db4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b09      	cmp	r3, #9
 8003dba:	d80e      	bhi.n	8003dda <get_ldnumber+0x72>
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d10a      	bne.n	8003dda <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <get_ldnumber+0x72>
					vol = (int)i;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	e002      	b.n	8003de4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003de2:	693b      	ldr	r3, [r7, #16]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	70da      	strb	r2, [r3, #3]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f04f 32ff 	mov.w	r2, #4294967295
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff f856 	bl	8002ebc <move_window>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <check_fs+0x2a>
 8003e16:	2304      	movs	r3, #4
 8003e18:	e038      	b.n	8003e8c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3334      	adds	r3, #52	; 0x34
 8003e1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fd9a 	bl	800295c <ld_word>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <check_fs+0x48>
 8003e34:	2303      	movs	r3, #3
 8003e36:	e029      	b.n	8003e8c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e3e:	2be9      	cmp	r3, #233	; 0xe9
 8003e40:	d009      	beq.n	8003e56 <check_fs+0x66>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e48:	2beb      	cmp	r3, #235	; 0xeb
 8003e4a:	d11e      	bne.n	8003e8a <check_fs+0x9a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003e52:	2b90      	cmp	r3, #144	; 0x90
 8003e54:	d119      	bne.n	8003e8a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3334      	adds	r3, #52	; 0x34
 8003e5a:	3336      	adds	r3, #54	; 0x36
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe fd95 	bl	800298c <ld_dword>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e68:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <check_fs+0xa4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <check_fs+0x82>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e00c      	b.n	8003e8c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3334      	adds	r3, #52	; 0x34
 8003e76:	3352      	adds	r3, #82	; 0x52
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fe fd87 	bl	800298c <ld_dword>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <check_fs+0xa8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d101      	bne.n	8003e8a <check_fs+0x9a>
 8003e86:	2300      	movs	r3, #0
 8003e88:	e000      	b.n	8003e8c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8003e8a:	2302      	movs	r3, #2
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	00544146 	.word	0x00544146
 8003e98:	33544146 	.word	0x33544146

08003e9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b096      	sub	sp, #88	; 0x58
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7ff ff59 	bl	8003d68 <get_ldnumber>
 8003eb6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	da01      	bge.n	8003ec2 <find_volume+0x26>
 8003ebe:	230b      	movs	r3, #11
 8003ec0:	e262      	b.n	8004388 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003ec2:	4a9f      	ldr	r2, [pc, #636]	; (8004140 <find_volume+0x2a4>)
 8003ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <find_volume+0x3a>
 8003ed2:	230c      	movs	r3, #12
 8003ed4:	e258      	b.n	8004388 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eda:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01a      	beq.n	8003f22 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe fc95 	bl	8002820 <disk_status>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003efc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10c      	bne.n	8003f22 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <find_volume+0x82>
 8003f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003f1a:	230a      	movs	r3, #10
 8003f1c:	e234      	b.n	8004388 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e232      	b.n	8004388 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	785b      	ldrb	r3, [r3, #1]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe fc8d 	bl	8002854 <disk_initialize>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003f40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e21b      	b.n	8004388 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <find_volume+0xca>
 8003f56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003f62:	230a      	movs	r3, #10
 8003f64:	e210      	b.n	8004388 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	7858      	ldrb	r0, [r3, #1]
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2102      	movs	r1, #2
 8003f72:	f7fe fcd5 	bl	8002920 <disk_ioctl>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <find_volume+0xe4>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e203      	b.n	8004388 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	899b      	ldrh	r3, [r3, #12]
 8003f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f88:	d80d      	bhi.n	8003fa6 <find_volume+0x10a>
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	899b      	ldrh	r3, [r3, #12]
 8003f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f92:	d308      	bcc.n	8003fa6 <find_volume+0x10a>
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	899b      	ldrh	r3, [r3, #12]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	899b      	ldrh	r3, [r3, #12]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <find_volume+0x10e>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e1ee      	b.n	8004388 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003fae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003fb2:	f7ff ff1d 	bl	8003df0 <check_fs>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d149      	bne.n	8004058 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8003fc8:	e01e      	b.n	8004008 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8003fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003fd8:	4413      	add	r3, r2
 8003fda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	3304      	adds	r3, #4
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d006      	beq.n	8003ff4 <find_volume+0x158>
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	3308      	adds	r3, #8
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fcce 	bl	800298c <ld_dword>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	e000      	b.n	8003ff6 <find_volume+0x15a>
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	3358      	adds	r3, #88	; 0x58
 8003ffc:	443b      	add	r3, r7
 8003ffe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004004:	3301      	adds	r3, #1
 8004006:	643b      	str	r3, [r7, #64]	; 0x40
 8004008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400a:	2b03      	cmp	r3, #3
 800400c:	d9dd      	bls.n	8003fca <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800400e:	2300      	movs	r3, #0
 8004010:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <find_volume+0x182>
 8004018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800401a:	3b01      	subs	r3, #1
 800401c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800401e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	3358      	adds	r3, #88	; 0x58
 8004024:	443b      	add	r3, r7
 8004026:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800402a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800402c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <find_volume+0x1a2>
 8004032:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004034:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004036:	f7ff fedb 	bl	8003df0 <check_fs>
 800403a:	4603      	mov	r3, r0
 800403c:	e000      	b.n	8004040 <find_volume+0x1a4>
 800403e:	2303      	movs	r3, #3
 8004040:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004048:	2b01      	cmp	r3, #1
 800404a:	d905      	bls.n	8004058 <find_volume+0x1bc>
 800404c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404e:	3301      	adds	r3, #1
 8004050:	643b      	str	r3, [r7, #64]	; 0x40
 8004052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004054:	2b03      	cmp	r3, #3
 8004056:	d9e2      	bls.n	800401e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800405c:	2b04      	cmp	r3, #4
 800405e:	d101      	bne.n	8004064 <find_volume+0x1c8>
 8004060:	2301      	movs	r3, #1
 8004062:	e191      	b.n	8004388 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004064:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004068:	2b01      	cmp	r3, #1
 800406a:	d901      	bls.n	8004070 <find_volume+0x1d4>
 800406c:	230d      	movs	r3, #13
 800406e:	e18b      	b.n	8004388 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	3334      	adds	r3, #52	; 0x34
 8004074:	330b      	adds	r3, #11
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fc70 	bl	800295c <ld_word>
 800407c:	4603      	mov	r3, r0
 800407e:	461a      	mov	r2, r3
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	899b      	ldrh	r3, [r3, #12]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <find_volume+0x1f0>
 8004088:	230d      	movs	r3, #13
 800408a:	e17d      	b.n	8004388 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	3334      	adds	r3, #52	; 0x34
 8004090:	3316      	adds	r3, #22
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fc62 	bl	800295c <ld_word>
 8004098:	4603      	mov	r3, r0
 800409a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800409c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <find_volume+0x214>
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	3334      	adds	r3, #52	; 0x34
 80040a6:	3324      	adds	r3, #36	; 0x24
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe fc6f 	bl	800298c <ld_dword>
 80040ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040b4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80040bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	789b      	ldrb	r3, [r3, #2]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d005      	beq.n	80040d4 <find_volume+0x238>
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	789b      	ldrb	r3, [r3, #2]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d001      	beq.n	80040d4 <find_volume+0x238>
 80040d0:	230d      	movs	r3, #13
 80040d2:	e159      	b.n	8004388 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80040d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d6:	789b      	ldrb	r3, [r3, #2]
 80040d8:	461a      	mov	r2, r3
 80040da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	895b      	ldrh	r3, [r3, #10]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <find_volume+0x26c>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	895b      	ldrh	r3, [r3, #10]
 80040fa:	461a      	mov	r2, r3
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	895b      	ldrh	r3, [r3, #10]
 8004100:	3b01      	subs	r3, #1
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <find_volume+0x270>
 8004108:	230d      	movs	r3, #13
 800410a:	e13d      	b.n	8004388 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	3334      	adds	r3, #52	; 0x34
 8004110:	3311      	adds	r3, #17
 8004112:	4618      	mov	r0, r3
 8004114:	f7fe fc22 	bl	800295c <ld_word>
 8004118:	4603      	mov	r3, r0
 800411a:	461a      	mov	r2, r3
 800411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	891b      	ldrh	r3, [r3, #8]
 8004124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004126:	8992      	ldrh	r2, [r2, #12]
 8004128:	0952      	lsrs	r2, r2, #5
 800412a:	b292      	uxth	r2, r2
 800412c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004130:	fb01 f202 	mul.w	r2, r1, r2
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <find_volume+0x2a8>
 800413c:	230d      	movs	r3, #13
 800413e:	e123      	b.n	8004388 <find_volume+0x4ec>
 8004140:	2000237c 	.word	0x2000237c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	3334      	adds	r3, #52	; 0x34
 8004148:	3313      	adds	r3, #19
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe fc06 	bl	800295c <ld_word>
 8004150:	4603      	mov	r3, r0
 8004152:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <find_volume+0x2cc>
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	3334      	adds	r3, #52	; 0x34
 800415e:	3320      	adds	r3, #32
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe fc13 	bl	800298c <ld_dword>
 8004166:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	3334      	adds	r3, #52	; 0x34
 800416c:	330e      	adds	r3, #14
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fbf4 	bl	800295c <ld_word>
 8004174:	4603      	mov	r3, r0
 8004176:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004178:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <find_volume+0x2e6>
 800417e:	230d      	movs	r3, #13
 8004180:	e102      	b.n	8004388 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004182:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004186:	4413      	add	r3, r2
 8004188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800418a:	8911      	ldrh	r1, [r2, #8]
 800418c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800418e:	8992      	ldrh	r2, [r2, #12]
 8004190:	0952      	lsrs	r2, r2, #5
 8004192:	b292      	uxth	r2, r2
 8004194:	fbb1 f2f2 	udiv	r2, r1, r2
 8004198:	b292      	uxth	r2, r2
 800419a:	4413      	add	r3, r2
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800419e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d201      	bcs.n	80041aa <find_volume+0x30e>
 80041a6:	230d      	movs	r3, #13
 80041a8:	e0ee      	b.n	8004388 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80041aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041b2:	8952      	ldrh	r2, [r2, #10]
 80041b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <find_volume+0x328>
 80041c0:	230d      	movs	r3, #13
 80041c2:	e0e1      	b.n	8004388 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80041c4:	2303      	movs	r3, #3
 80041c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d802      	bhi.n	80041da <find_volume+0x33e>
 80041d4:	2302      	movs	r3, #2
 80041d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d802      	bhi.n	80041ea <find_volume+0x34e>
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	1c9a      	adds	r2, r3, #2
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80041f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80041f6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80041f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80041fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fc:	441a      	add	r2, r3
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8004202:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	441a      	add	r2, r3
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800420c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004210:	2b03      	cmp	r3, #3
 8004212:	d11e      	bne.n	8004252 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	3334      	adds	r3, #52	; 0x34
 8004218:	332a      	adds	r3, #42	; 0x2a
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe fb9e 	bl	800295c <ld_word>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <find_volume+0x38e>
 8004226:	230d      	movs	r3, #13
 8004228:	e0ae      	b.n	8004388 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800422a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422c:	891b      	ldrh	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <find_volume+0x39a>
 8004232:	230d      	movs	r3, #13
 8004234:	e0a8      	b.n	8004388 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004238:	3334      	adds	r3, #52	; 0x34
 800423a:	332c      	adds	r3, #44	; 0x2c
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fba5 	bl	800298c <ld_dword>
 8004242:	4602      	mov	r2, r0
 8004244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004246:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	647b      	str	r3, [r7, #68]	; 0x44
 8004250:	e01f      	b.n	8004292 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	891b      	ldrh	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <find_volume+0x3c2>
 800425a:	230d      	movs	r3, #13
 800425c:	e094      	b.n	8004388 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004264:	441a      	add	r2, r3
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800426a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800426e:	2b02      	cmp	r3, #2
 8004270:	d103      	bne.n	800427a <find_volume+0x3de>
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	e00a      	b.n	8004290 <find_volume+0x3f4>
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	085a      	lsrs	r2, r3, #1
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004290:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	69da      	ldr	r2, [r3, #28]
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	899b      	ldrh	r3, [r3, #12]
 800429a:	4619      	mov	r1, r3
 800429c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429e:	440b      	add	r3, r1
 80042a0:	3b01      	subs	r3, #1
 80042a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042a4:	8989      	ldrh	r1, [r1, #12]
 80042a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d201      	bcs.n	80042b2 <find_volume+0x416>
 80042ae:	230d      	movs	r3, #13
 80042b0:	e06a      	b.n	8004388 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	f04f 32ff 	mov.w	r2, #4294967295
 80042b8:	615a      	str	r2, [r3, #20]
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	2280      	movs	r2, #128	; 0x80
 80042c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80042c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d149      	bne.n	8004364 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	3334      	adds	r3, #52	; 0x34
 80042d4:	3330      	adds	r3, #48	; 0x30
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fb40 	bl	800295c <ld_word>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d140      	bne.n	8004364 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80042e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e4:	3301      	adds	r3, #1
 80042e6:	4619      	mov	r1, r3
 80042e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80042ea:	f7fe fde7 	bl	8002ebc <move_window>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d137      	bne.n	8004364 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	2200      	movs	r2, #0
 80042f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	3334      	adds	r3, #52	; 0x34
 80042fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004302:	4618      	mov	r0, r3
 8004304:	f7fe fb2a 	bl	800295c <ld_word>
 8004308:	4603      	mov	r3, r0
 800430a:	461a      	mov	r2, r3
 800430c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004310:	429a      	cmp	r2, r3
 8004312:	d127      	bne.n	8004364 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	3334      	adds	r3, #52	; 0x34
 8004318:	4618      	mov	r0, r3
 800431a:	f7fe fb37 	bl	800298c <ld_dword>
 800431e:	4603      	mov	r3, r0
 8004320:	4a1b      	ldr	r2, [pc, #108]	; (8004390 <find_volume+0x4f4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d11e      	bne.n	8004364 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	3334      	adds	r3, #52	; 0x34
 800432a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fb2c 	bl	800298c <ld_dword>
 8004334:	4603      	mov	r3, r0
 8004336:	4a17      	ldr	r2, [pc, #92]	; (8004394 <find_volume+0x4f8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d113      	bne.n	8004364 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	3334      	adds	r3, #52	; 0x34
 8004340:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe fb21 	bl	800298c <ld_dword>
 800434a:	4602      	mov	r2, r0
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	3334      	adds	r3, #52	; 0x34
 8004354:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004358:	4618      	mov	r0, r3
 800435a:	f7fe fb17 	bl	800298c <ld_dword>
 800435e:	4602      	mov	r2, r0
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800436a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <find_volume+0x4fc>)
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	4b08      	ldr	r3, [pc, #32]	; (8004398 <find_volume+0x4fc>)
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	4b07      	ldr	r3, [pc, #28]	; (8004398 <find_volume+0x4fc>)
 800437a:	881a      	ldrh	r2, [r3, #0]
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004382:	f7fe fd33 	bl	8002dec <clear_lock>
#endif
	return FR_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3758      	adds	r7, #88	; 0x58
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	41615252 	.word	0x41615252
 8004394:	61417272 	.word	0x61417272
 8004398:	20002380 	.word	0x20002380

0800439c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80043a6:	2309      	movs	r3, #9
 80043a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01c      	beq.n	80043ea <validate+0x4e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d018      	beq.n	80043ea <validate+0x4e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d013      	beq.n	80043ea <validate+0x4e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	889a      	ldrh	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	88db      	ldrh	r3, [r3, #6]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d10c      	bne.n	80043ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	785b      	ldrb	r3, [r3, #1]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe fa22 	bl	8002820 <disk_status>
 80043dc:	4603      	mov	r3, r0
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <validate+0x4e>
			res = FR_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <validate+0x5a>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	e000      	b.n	80043f8 <validate+0x5c>
 80043f6:	2300      	movs	r3, #0
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	6013      	str	r3, [r2, #0]
	return res;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800441a:	f107 0310 	add.w	r3, r7, #16
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fca2 	bl	8003d68 <get_ldnumber>
 8004424:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	2b00      	cmp	r3, #0
 800442a:	da01      	bge.n	8004430 <f_mount+0x28>
 800442c:	230b      	movs	r3, #11
 800442e:	e02b      	b.n	8004488 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004430:	4a17      	ldr	r2, [pc, #92]	; (8004490 <f_mount+0x88>)
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004438:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004440:	69b8      	ldr	r0, [r7, #24]
 8004442:	f7fe fcd3 	bl	8002dec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	490d      	ldr	r1, [pc, #52]	; (8004490 <f_mount+0x88>)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <f_mount+0x66>
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <f_mount+0x6a>
 800446e:	2300      	movs	r3, #0
 8004470:	e00a      	b.n	8004488 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004472:	f107 010c 	add.w	r1, r7, #12
 8004476:	f107 0308 	add.w	r3, r7, #8
 800447a:	2200      	movs	r2, #0
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fd0d 	bl	8003e9c <find_volume>
 8004482:	4603      	mov	r3, r0
 8004484:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004486:	7dfb      	ldrb	r3, [r7, #23]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3720      	adds	r7, #32
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	2000237c 	.word	0x2000237c

08004494 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b098      	sub	sp, #96	; 0x60
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <f_open+0x18>
 80044a8:	2309      	movs	r3, #9
 80044aa:	e1bb      	b.n	8004824 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80044b4:	79fa      	ldrb	r2, [r7, #7]
 80044b6:	f107 0110 	add.w	r1, r7, #16
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fcec 	bl	8003e9c <find_volume>
 80044c4:	4603      	mov	r3, r0
 80044c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80044ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 819f 	bne.w	8004812 <f_open+0x37e>
		dj.obj.fs = fs;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	f107 0314 	add.w	r3, r7, #20
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fbcb 	bl	8003c7c <follow_path>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80044ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11a      	bne.n	800452a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80044f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80044f8:	b25b      	sxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	da03      	bge.n	8004506 <f_open+0x72>
				res = FR_INVALID_NAME;
 80044fe:	2306      	movs	r3, #6
 8004500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004504:	e011      	b.n	800452a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	f107 0314 	add.w	r3, r7, #20
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fb1c 	bl	8002b5c <chk_lock>
 8004524:	4603      	mov	r3, r0
 8004526:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	f003 031c 	and.w	r3, r3, #28
 8004530:	2b00      	cmp	r3, #0
 8004532:	d07f      	beq.n	8004634 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004538:	2b00      	cmp	r3, #0
 800453a:	d017      	beq.n	800456c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800453c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004540:	2b04      	cmp	r3, #4
 8004542:	d10e      	bne.n	8004562 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004544:	f7fe fb66 	bl	8002c14 <enq_lock>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <f_open+0xc8>
 800454e:	f107 0314 	add.w	r3, r7, #20
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff facc 	bl	8003af0 <dir_register>
 8004558:	4603      	mov	r3, r0
 800455a:	e000      	b.n	800455e <f_open+0xca>
 800455c:	2312      	movs	r3, #18
 800455e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	f043 0308 	orr.w	r3, r3, #8
 8004568:	71fb      	strb	r3, [r7, #7]
 800456a:	e010      	b.n	800458e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800456c:	7ebb      	ldrb	r3, [r7, #26]
 800456e:	f003 0311 	and.w	r3, r3, #17
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <f_open+0xea>
					res = FR_DENIED;
 8004576:	2307      	movs	r3, #7
 8004578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800457c:	e007      	b.n	800458e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <f_open+0xfa>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800458e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004592:	2b00      	cmp	r3, #0
 8004594:	d168      	bne.n	8004668 <f_open+0x1d4>
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d063      	beq.n	8004668 <f_open+0x1d4>
				dw = GET_FATTIME();
 80045a0:	f7fe f896 	bl	80026d0 <get_fattime>
 80045a4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	330e      	adds	r3, #14
 80045aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fa2b 	bl	8002a08 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80045b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b4:	3316      	adds	r3, #22
 80045b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fa25 	bl	8002a08 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80045be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c0:	330b      	adds	r3, #11
 80045c2:	2220      	movs	r2, #32
 80045c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff f9fb 	bl	80039c8 <ld_clust>
 80045d2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045d8:	2200      	movs	r2, #0
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fa13 	bl	8003a06 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80045e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e2:	331c      	adds	r3, #28
 80045e4:	2100      	movs	r1, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fa0e 	bl	8002a08 <st_dword>
					fs->wflag = 1;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2201      	movs	r2, #1
 80045f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80045f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d037      	beq.n	8004668 <f_open+0x1d4>
						dw = fs->winsect;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80045fe:	f107 0314 	add.w	r3, r7, #20
 8004602:	2200      	movs	r2, #0
 8004604:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe ff03 	bl	8003412 <remove_chain>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8004612:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004616:	2b00      	cmp	r3, #0
 8004618:	d126      	bne.n	8004668 <f_open+0x1d4>
							res = move_window(fs, dw);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe fc4c 	bl	8002ebc <move_window>
 8004624:	4603      	mov	r3, r0
 8004626:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800462e:	3a01      	subs	r2, #1
 8004630:	611a      	str	r2, [r3, #16]
 8004632:	e019      	b.n	8004668 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8004634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004638:	2b00      	cmp	r3, #0
 800463a:	d115      	bne.n	8004668 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800463c:	7ebb      	ldrb	r3, [r7, #26]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <f_open+0x1ba>
					res = FR_NO_FILE;
 8004646:	2304      	movs	r3, #4
 8004648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800464c:	e00c      	b.n	8004668 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <f_open+0x1d4>
 8004658:	7ebb      	ldrb	r3, [r7, #26]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <f_open+0x1d4>
						res = FR_DENIED;
 8004662:	2307      	movs	r3, #7
 8004664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800466c:	2b00      	cmp	r3, #0
 800466e:	d128      	bne.n	80046c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004680:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800468a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf14      	ite	ne
 800469a:	2301      	movne	r3, #1
 800469c:	2300      	moveq	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	f107 0314 	add.w	r3, r7, #20
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe fad5 	bl	8002c58 <inc_lock>
 80046ae:	4602      	mov	r2, r0
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <f_open+0x22e>
 80046bc:	2302      	movs	r3, #2
 80046be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80046c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 80a3 	bne.w	8004812 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff f978 	bl	80039c8 <ld_clust>
 80046d8:	4602      	mov	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80046de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e0:	331c      	adds	r3, #28
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe f952 	bl	800298c <ld_dword>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	88da      	ldrh	r2, [r3, #6]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	79fa      	ldrb	r2, [r7, #7]
 8004706:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3330      	adds	r3, #48	; 0x30
 800471e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f7fe f9bc 	bl	8002aa2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b00      	cmp	r3, #0
 8004732:	d06e      	beq.n	8004812 <f_open+0x37e>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d06a      	beq.n	8004812 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	895b      	ldrh	r3, [r3, #10]
 8004748:	461a      	mov	r2, r3
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	899b      	ldrh	r3, [r3, #12]
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	657b      	str	r3, [r7, #84]	; 0x54
 8004760:	e016      	b.n	8004790 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fc65 	bl	8003036 <get_fat>
 800476c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800476e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004770:	2b01      	cmp	r3, #1
 8004772:	d802      	bhi.n	800477a <f_open+0x2e6>
 8004774:	2302      	movs	r3, #2
 8004776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800477a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d102      	bne.n	8004788 <f_open+0x2f4>
 8004782:	2301      	movs	r3, #1
 8004784:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800478a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	657b      	str	r3, [r7, #84]	; 0x54
 8004790:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <f_open+0x30c>
 8004798:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800479a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479c:	429a      	cmp	r2, r3
 800479e:	d8e0      	bhi.n	8004762 <f_open+0x2ce>
				}
				fp->clust = clst;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80047a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d131      	bne.n	8004812 <f_open+0x37e>
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	899b      	ldrh	r3, [r3, #12]
 80047b2:	461a      	mov	r2, r3
 80047b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80047ba:	fb01 f202 	mul.w	r2, r1, r2
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d026      	beq.n	8004812 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fe fc15 	bl	8002ff8 <clust2sect>
 80047ce:	6478      	str	r0, [r7, #68]	; 0x44
 80047d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <f_open+0x34a>
						res = FR_INT_ERR;
 80047d6:	2302      	movs	r3, #2
 80047d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80047dc:	e019      	b.n	8004812 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	899b      	ldrh	r3, [r3, #12]
 80047e2:	461a      	mov	r2, r3
 80047e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80047ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ec:	441a      	add	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	7858      	ldrb	r0, [r3, #1]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1a      	ldr	r2, [r3, #32]
 8004800:	2301      	movs	r3, #1
 8004802:	f7fe f84d 	bl	80028a0 <disk_read>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <f_open+0x37e>
 800480c:	2301      	movs	r3, #1
 800480e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <f_open+0x38c>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004824:	4618      	mov	r0, r3
 8004826:	3760      	adds	r7, #96	; 0x60
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08e      	sub	sp, #56	; 0x38
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f107 0214 	add.w	r2, r7, #20
 800484a:	4611      	mov	r1, r2
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff fda5 	bl	800439c <validate>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004858:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800485c:	2b00      	cmp	r3, #0
 800485e:	d107      	bne.n	8004870 <f_read+0x44>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	7d5b      	ldrb	r3, [r3, #21]
 8004864:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004868:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <f_read+0x4a>
 8004870:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004874:	e135      	b.n	8004ae2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	7d1b      	ldrb	r3, [r3, #20]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <f_read+0x5a>
 8004882:	2307      	movs	r3, #7
 8004884:	e12d      	b.n	8004ae2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	429a      	cmp	r2, r3
 8004898:	f240 811e 	bls.w	8004ad8 <f_read+0x2ac>
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80048a0:	e11a      	b.n	8004ad8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	8992      	ldrh	r2, [r2, #12]
 80048aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80048ae:	fb01 f202 	mul.w	r2, r1, r2
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f040 80d5 	bne.w	8004a64 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	8992      	ldrh	r2, [r2, #12]
 80048c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	8952      	ldrh	r2, [r2, #10]
 80048ca:	3a01      	subs	r2, #1
 80048cc:	4013      	ands	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d12f      	bne.n	8004936 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d103      	bne.n	80048e6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	633b      	str	r3, [r7, #48]	; 0x30
 80048e4:	e013      	b.n	800490e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	4619      	mov	r1, r3
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7fe fe89 	bl	800360c <clmt_clust>
 80048fa:	6338      	str	r0, [r7, #48]	; 0x30
 80048fc:	e007      	b.n	800490e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f7fe fb95 	bl	8003036 <get_fat>
 800490c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	2b01      	cmp	r3, #1
 8004912:	d804      	bhi.n	800491e <f_read+0xf2>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2202      	movs	r2, #2
 8004918:	755a      	strb	r2, [r3, #21]
 800491a:	2302      	movs	r3, #2
 800491c:	e0e1      	b.n	8004ae2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d104      	bne.n	8004930 <f_read+0x104>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	755a      	strb	r2, [r3, #21]
 800492c:	2301      	movs	r3, #1
 800492e:	e0d8      	b.n	8004ae2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004934:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f7fe fb5a 	bl	8002ff8 <clust2sect>
 8004944:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <f_read+0x12a>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2202      	movs	r2, #2
 8004950:	755a      	strb	r2, [r3, #21]
 8004952:	2302      	movs	r3, #2
 8004954:	e0c5      	b.n	8004ae2 <f_read+0x2b6>
			sect += csect;
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	899b      	ldrh	r3, [r3, #12]
 8004962:	461a      	mov	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	fbb3 f3f2 	udiv	r3, r3, r2
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	2b00      	cmp	r3, #0
 8004970:	d041      	beq.n	80049f6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	4413      	add	r3, r2
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	8952      	ldrh	r2, [r2, #10]
 800497c:	4293      	cmp	r3, r2
 800497e:	d905      	bls.n	800498c <f_read+0x160>
					cc = fs->csize - csect;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	895b      	ldrh	r3, [r3, #10]
 8004984:	461a      	mov	r2, r3
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	7858      	ldrb	r0, [r3, #1]
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004996:	f7fd ff83 	bl	80028a0 <disk_read>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <f_read+0x17e>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2201      	movs	r2, #1
 80049a4:	755a      	strb	r2, [r3, #21]
 80049a6:	2301      	movs	r3, #1
 80049a8:	e09b      	b.n	8004ae2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	7d1b      	ldrb	r3, [r3, #20]
 80049ae:	b25b      	sxtb	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	da18      	bge.n	80049e6 <f_read+0x1ba>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049be:	429a      	cmp	r2, r3
 80049c0:	d911      	bls.n	80049e6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1a      	ldr	r2, [r3, #32]
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	8992      	ldrh	r2, [r2, #12]
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d4:	18d0      	adds	r0, r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	899b      	ldrh	r3, [r3, #12]
 80049e0:	461a      	mov	r2, r3
 80049e2:	f7fe f83d 	bl	8002a60 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	899b      	ldrh	r3, [r3, #12]
 80049ea:	461a      	mov	r2, r3
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80049f4:	e05c      	b.n	8004ab0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d02e      	beq.n	8004a5e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	7d1b      	ldrb	r3, [r3, #20]
 8004a04:	b25b      	sxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	da18      	bge.n	8004a3c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	7858      	ldrb	r0, [r3, #1]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1a      	ldr	r2, [r3, #32]
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f7fd ff61 	bl	80028e0 <disk_write>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d004      	beq.n	8004a2e <f_read+0x202>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	755a      	strb	r2, [r3, #21]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e059      	b.n	8004ae2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	7d1b      	ldrb	r3, [r3, #20]
 8004a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	7858      	ldrb	r0, [r3, #1]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a46:	2301      	movs	r3, #1
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	f7fd ff29 	bl	80028a0 <disk_read>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d004      	beq.n	8004a5e <f_read+0x232>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	755a      	strb	r2, [r3, #21]
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e041      	b.n	8004ae2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	899b      	ldrh	r3, [r3, #12]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	8992      	ldrh	r2, [r2, #12]
 8004a72:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a76:	fb01 f202 	mul.w	r2, r1, r2
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	1ac3      	subs	r3, r0, r3
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8004a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d901      	bls.n	8004a8c <f_read+0x260>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	8992      	ldrh	r2, [r2, #12]
 8004a9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a9e:	fb00 f202 	mul.w	r2, r0, r2
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aac:	f7fd ffd8 	bl	8002a60 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	4413      	add	r3, r2
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	441a      	add	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	619a      	str	r2, [r3, #24]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	441a      	add	r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f47f aee1 	bne.w	80048a2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3738      	adds	r7, #56	; 0x38
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b08c      	sub	sp, #48	; 0x30
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f107 0210 	add.w	r2, r7, #16
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fc46 	bl	800439c <validate>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d107      	bne.n	8004b2e <f_write+0x44>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	7d5b      	ldrb	r3, [r3, #21]
 8004b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <f_write+0x4a>
 8004b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b32:	e16a      	b.n	8004e0a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	7d1b      	ldrb	r3, [r3, #20]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <f_write+0x5a>
 8004b40:	2307      	movs	r3, #7
 8004b42:	e162      	b.n	8004e0a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	699a      	ldr	r2, [r3, #24]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	441a      	add	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	f080 814c 	bcs.w	8004dee <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8004b5e:	e146      	b.n	8004dee <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	8992      	ldrh	r2, [r2, #12]
 8004b68:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b6c:	fb01 f202 	mul.w	r2, r1, r2
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f040 80f1 	bne.w	8004d5a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	8992      	ldrh	r2, [r2, #12]
 8004b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	8952      	ldrh	r2, [r2, #10]
 8004b88:	3a01      	subs	r2, #1
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d143      	bne.n	8004c1c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10c      	bne.n	8004bb6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d11a      	bne.n	8004bde <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe fc95 	bl	80034dc <create_chain>
 8004bb2:	62b8      	str	r0, [r7, #40]	; 0x28
 8004bb4:	e013      	b.n	8004bde <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7fe fd21 	bl	800360c <clmt_clust>
 8004bca:	62b8      	str	r0, [r7, #40]	; 0x28
 8004bcc:	e007      	b.n	8004bde <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	f7fe fc80 	bl	80034dc <create_chain>
 8004bdc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8109 	beq.w	8004df8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d104      	bne.n	8004bf6 <f_write+0x10c>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	755a      	strb	r2, [r3, #21]
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e109      	b.n	8004e0a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d104      	bne.n	8004c08 <f_write+0x11e>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	755a      	strb	r2, [r3, #21]
 8004c04:	2301      	movs	r3, #1
 8004c06:	e100      	b.n	8004e0a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c0c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <f_write+0x132>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c1a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	7d1b      	ldrb	r3, [r3, #20]
 8004c20:	b25b      	sxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	da18      	bge.n	8004c58 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	7858      	ldrb	r0, [r3, #1]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a1a      	ldr	r2, [r3, #32]
 8004c34:	2301      	movs	r3, #1
 8004c36:	f7fd fe53 	bl	80028e0 <disk_write>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <f_write+0x160>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	755a      	strb	r2, [r3, #21]
 8004c46:	2301      	movs	r3, #1
 8004c48:	e0df      	b.n	8004e0a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	7d1b      	ldrb	r3, [r3, #20]
 8004c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f7fe f9c9 	bl	8002ff8 <clust2sect>
 8004c66:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d104      	bne.n	8004c78 <f_write+0x18e>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2202      	movs	r2, #2
 8004c72:	755a      	strb	r2, [r3, #21]
 8004c74:	2302      	movs	r3, #2
 8004c76:	e0c8      	b.n	8004e0a <f_write+0x320>
			sect += csect;
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	899b      	ldrh	r3, [r3, #12]
 8004c84:	461a      	mov	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c8c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d043      	beq.n	8004d1c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	4413      	add	r3, r2
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	8952      	ldrh	r2, [r2, #10]
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d905      	bls.n	8004cae <f_write+0x1c4>
					cc = fs->csize - csect;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	895b      	ldrh	r3, [r3, #10]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	7858      	ldrb	r0, [r3, #1]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	69f9      	ldr	r1, [r7, #28]
 8004cb8:	f7fd fe12 	bl	80028e0 <disk_write>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <f_write+0x1e2>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	755a      	strb	r2, [r3, #21]
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e09e      	b.n	8004e0a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1a      	ldr	r2, [r3, #32]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	6a3a      	ldr	r2, [r7, #32]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d918      	bls.n	8004d0c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a1a      	ldr	r2, [r3, #32]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	8992      	ldrh	r2, [r2, #12]
 8004cec:	fb02 f303 	mul.w	r3, r2, r3
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	18d1      	adds	r1, r2, r3
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	899b      	ldrh	r3, [r3, #12]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f7fd feb1 	bl	8002a60 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	7d1b      	ldrb	r3, [r3, #20]
 8004d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	899b      	ldrh	r3, [r3, #12]
 8004d10:	461a      	mov	r2, r3
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	fb02 f303 	mul.w	r3, r2, r3
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8004d1a:	e04b      	b.n	8004db4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d016      	beq.n	8004d54 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d210      	bcs.n	8004d54 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	7858      	ldrb	r0, [r3, #1]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	f7fd fdae 	bl	80028a0 <disk_read>
 8004d44:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	755a      	strb	r2, [r3, #21]
 8004d50:	2301      	movs	r3, #1
 8004d52:	e05a      	b.n	8004e0a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	899b      	ldrh	r3, [r3, #12]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	8992      	ldrh	r2, [r2, #12]
 8004d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d6c:	fb01 f202 	mul.w	r2, r1, r2
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	1ac3      	subs	r3, r0, r3
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8004d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d901      	bls.n	8004d82 <f_write+0x298>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	8992      	ldrh	r2, [r2, #12]
 8004d90:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d94:	fb00 f202 	mul.w	r2, r0, r2
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9e:	69f9      	ldr	r1, [r7, #28]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fd fe5d 	bl	8002a60 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	7d1b      	ldrb	r3, [r3, #20]
 8004daa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	4413      	add	r3, r2
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	441a      	add	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	619a      	str	r2, [r3, #24]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	bf38      	it	cc
 8004dd4:	461a      	movcc	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	441a      	add	r2, r3
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f aeb5 	bne.w	8004b60 <f_write+0x76>
 8004df6:	e000      	b.n	8004dfa <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004df8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	7d1b      	ldrb	r3, [r3, #20]
 8004dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3730      	adds	r7, #48	; 0x30
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b086      	sub	sp, #24
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f107 0208 	add.w	r2, r7, #8
 8004e20:	4611      	mov	r1, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff faba 	bl	800439c <validate>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004e2c:	7dfb      	ldrb	r3, [r7, #23]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d168      	bne.n	8004f04 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	7d1b      	ldrb	r3, [r3, #20]
 8004e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d062      	beq.n	8004f04 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	7d1b      	ldrb	r3, [r3, #20]
 8004e42:	b25b      	sxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	da15      	bge.n	8004e74 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	7858      	ldrb	r0, [r3, #1]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	2301      	movs	r3, #1
 8004e58:	f7fd fd42 	bl	80028e0 <disk_write>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <f_sync+0x54>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e04f      	b.n	8004f06 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	7d1b      	ldrb	r3, [r3, #20]
 8004e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8004e74:	f7fd fc2c 	bl	80026d0 <get_fattime>
 8004e78:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f7fe f81a 	bl	8002ebc <move_window>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d138      	bne.n	8004f04 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	330b      	adds	r3, #11
 8004e9c:	781a      	ldrb	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	330b      	adds	r3, #11
 8004ea2:	f042 0220 	orr.w	r2, r2, #32
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68f9      	ldr	r1, [r7, #12]
 8004eb6:	f7fe fda6 	bl	8003a06 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f103 021c 	add.w	r2, r3, #28
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f7fd fd9e 	bl	8002a08 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3316      	adds	r3, #22
 8004ed0:	6939      	ldr	r1, [r7, #16]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fd fd98 	bl	8002a08 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3312      	adds	r3, #18
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fd fd77 	bl	80029d2 <st_word>
					fs->wflag = 1;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fe f813 	bl	8002f18 <sync_fs>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	7d1b      	ldrb	r3, [r3, #20]
 8004efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff ff7b 	bl	8004e12 <f_sync>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d118      	bne.n	8004f58 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f107 0208 	add.w	r2, r7, #8
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fa34 	bl	800439c <validate>
 8004f34:	4603      	mov	r3, r0
 8004f36:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10c      	bne.n	8004f58 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fd ff16 	bl	8002d74 <dec_lock>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004f7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <FATFS_LinkDriverEx+0x94>)
 8004f7c:	7a5b      	ldrb	r3, [r3, #9]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d131      	bne.n	8004fe8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004f84:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <FATFS_LinkDriverEx+0x94>)
 8004f86:	7a5b      	ldrb	r3, [r3, #9]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <FATFS_LinkDriverEx+0x94>)
 8004f8e:	2100      	movs	r1, #0
 8004f90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004f92:	4b19      	ldr	r3, [pc, #100]	; (8004ff8 <FATFS_LinkDriverEx+0x94>)
 8004f94:	7a5b      	ldrb	r3, [r3, #9]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <FATFS_LinkDriverEx+0x94>)
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004fa2:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <FATFS_LinkDriverEx+0x94>)
 8004fa4:	7a5b      	ldrb	r3, [r3, #9]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <FATFS_LinkDriverEx+0x94>)
 8004fac:	4413      	add	r3, r2
 8004fae:	79fa      	ldrb	r2, [r7, #7]
 8004fb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004fb2:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <FATFS_LinkDriverEx+0x94>)
 8004fb4:	7a5b      	ldrb	r3, [r3, #9]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	b2d1      	uxtb	r1, r2
 8004fbc:	4a0e      	ldr	r2, [pc, #56]	; (8004ff8 <FATFS_LinkDriverEx+0x94>)
 8004fbe:	7251      	strb	r1, [r2, #9]
 8004fc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004fc2:	7dbb      	ldrb	r3, [r7, #22]
 8004fc4:	3330      	adds	r3, #48	; 0x30
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	223a      	movs	r2, #58	; 0x3a
 8004fd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	222f      	movs	r2, #47	; 0x2f
 8004fda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	3303      	adds	r3, #3
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	200023a4 	.word	0x200023a4

08004ffc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005006:	2200      	movs	r2, #0
 8005008:	6839      	ldr	r1, [r7, #0]
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff ffaa 	bl	8004f64 <FATFS_LinkDriverEx>
 8005010:	4603      	mov	r3, r0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <memset>:
 800501a:	4402      	add	r2, r0
 800501c:	4603      	mov	r3, r0
 800501e:	4293      	cmp	r3, r2
 8005020:	d100      	bne.n	8005024 <memset+0xa>
 8005022:	4770      	bx	lr
 8005024:	f803 1b01 	strb.w	r1, [r3], #1
 8005028:	e7f9      	b.n	800501e <memset+0x4>
	...

0800502c <__libc_init_array>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4d0d      	ldr	r5, [pc, #52]	; (8005064 <__libc_init_array+0x38>)
 8005030:	4c0d      	ldr	r4, [pc, #52]	; (8005068 <__libc_init_array+0x3c>)
 8005032:	1b64      	subs	r4, r4, r5
 8005034:	10a4      	asrs	r4, r4, #2
 8005036:	2600      	movs	r6, #0
 8005038:	42a6      	cmp	r6, r4
 800503a:	d109      	bne.n	8005050 <__libc_init_array+0x24>
 800503c:	4d0b      	ldr	r5, [pc, #44]	; (800506c <__libc_init_array+0x40>)
 800503e:	4c0c      	ldr	r4, [pc, #48]	; (8005070 <__libc_init_array+0x44>)
 8005040:	f000 f818 	bl	8005074 <_init>
 8005044:	1b64      	subs	r4, r4, r5
 8005046:	10a4      	asrs	r4, r4, #2
 8005048:	2600      	movs	r6, #0
 800504a:	42a6      	cmp	r6, r4
 800504c:	d105      	bne.n	800505a <__libc_init_array+0x2e>
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	f855 3b04 	ldr.w	r3, [r5], #4
 8005054:	4798      	blx	r3
 8005056:	3601      	adds	r6, #1
 8005058:	e7ee      	b.n	8005038 <__libc_init_array+0xc>
 800505a:	f855 3b04 	ldr.w	r3, [r5], #4
 800505e:	4798      	blx	r3
 8005060:	3601      	adds	r6, #1
 8005062:	e7f2      	b.n	800504a <__libc_init_array+0x1e>
 8005064:	08005198 	.word	0x08005198
 8005068:	08005198 	.word	0x08005198
 800506c:	08005198 	.word	0x08005198
 8005070:	0800519c 	.word	0x0800519c

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr
