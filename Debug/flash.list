
flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c88  08002c88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c88  08002c88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c88  08002c88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c8c  08002c8c  00012c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002c9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002c9c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000076a8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001744  00000000  00000000  00027727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  00028e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e4  00000000  00000000  00029650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020478  00000000  00000000  00029c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008cb2  00000000  00000000  0004a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3cbc  00000000  00000000  00052d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ec8  00000000  00000000  00116a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001188e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002c28 	.word	0x08002c28

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002c28 	.word	0x08002c28

080001d4 <W25Q128JV_WriteEnable>:
#define CMD_READ              0x03
#define CMD_CHIP_ERASE        0xC7 // Chip Erase command
#define CMD_SECTOR_ERASE      0x20 // sector Erase command
#define CMD_READ_STATUS_REG1  0x05 // Read Status Register-1 command

void W25Q128JV_WriteEnable(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    uint8_t cmd = CMD_WRITE_ENABLE;
 80001da:	2306      	movs	r3, #6
 80001dc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 80001de:	2200      	movs	r2, #0
 80001e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e8:	f000 fe34 	bl	8000e54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80001ec:	1df9      	adds	r1, r7, #7
 80001ee:	f04f 33ff 	mov.w	r3, #4294967295
 80001f2:	2201      	movs	r2, #1
 80001f4:	4806      	ldr	r0, [pc, #24]	; (8000210 <W25Q128JV_WriteEnable+0x3c>)
 80001f6:	f001 fd4c 	bl	8001c92 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000204:	f000 fe26 	bl	8000e54 <HAL_GPIO_WritePin>
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000028 	.word	0x20000028

08000214 <PageProgram>:
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
}


void PageProgram(uint32_t address, uint8_t *data, uint16_t length) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4613      	mov	r3, r2
 8000220:	80fb      	strh	r3, [r7, #6]
    W25Q128JV_WriteEnable();
 8000222:	f7ff ffd7 	bl	80001d4 <W25Q128JV_WriteEnable>

    uint8_t cmd[4];
    cmd[0] = CMD_PAGE_PROGRAM;
 8000226:	2302      	movs	r3, #2
 8000228:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	0c1b      	lsrs	r3, r3, #16
 800022e:	b2db      	uxtb	r3, r3
 8000230:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	0a1b      	lsrs	r3, r3, #8
 8000236:	b2db      	uxtb	r3, r3
 8000238:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	b2db      	uxtb	r3, r3
 800023e:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 8000240:	2200      	movs	r2, #0
 8000242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024a:	f000 fe03 	bl	8000e54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 800024e:	f107 0114 	add.w	r1, r7, #20
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
 8000256:	2204      	movs	r2, #4
 8000258:	480a      	ldr	r0, [pc, #40]	; (8000284 <PageProgram+0x70>)
 800025a:	f001 fd1a 	bl	8001c92 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, data, length, HAL_MAX_DELAY);
 800025e:	88fa      	ldrh	r2, [r7, #6]
 8000260:	f04f 33ff 	mov.w	r3, #4294967295
 8000264:	68b9      	ldr	r1, [r7, #8]
 8000266:	4807      	ldr	r0, [pc, #28]	; (8000284 <PageProgram+0x70>)
 8000268:	f001 fd13 	bl	8001c92 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000276:	f000 fded 	bl	8000e54 <HAL_GPIO_WritePin>
}
 800027a:	bf00      	nop
 800027c:	3718      	adds	r7, #24
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000028 	.word	0x20000028

08000288 <Read>:

void Read(uint32_t address, uint8_t *data, uint16_t length) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	4613      	mov	r3, r2
 8000294:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4];
    cmd[0] = CMD_READ;
 8000296:	2303      	movs	r3, #3
 8000298:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	0c1b      	lsrs	r3, r3, #16
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ba:	f000 fdcb 	bl	8000e54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 80002be:	f107 0114 	add.w	r1, r7, #20
 80002c2:	f04f 33ff 	mov.w	r3, #4294967295
 80002c6:	2204      	movs	r2, #4
 80002c8:	480a      	ldr	r0, [pc, #40]	; (80002f4 <Read+0x6c>)
 80002ca:	f001 fce2 	bl	8001c92 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, data, length, HAL_MAX_DELAY);
 80002ce:	88fa      	ldrh	r2, [r7, #6]
 80002d0:	f04f 33ff 	mov.w	r3, #4294967295
 80002d4:	68b9      	ldr	r1, [r7, #8]
 80002d6:	4807      	ldr	r0, [pc, #28]	; (80002f4 <Read+0x6c>)
 80002d8:	f001 fe50 	bl	8001f7c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 80002dc:	2201      	movs	r2, #1
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e6:	f000 fdb5 	bl	8000e54 <HAL_GPIO_WritePin>
}
 80002ea:	bf00      	nop
 80002ec:	3718      	adds	r7, #24
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028

080002f8 <ReadStatusRegister1>:

uint8_t ReadStatusRegister1(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
    uint8_t cmd = CMD_READ_STATUS_REG1;
 80002fe:	2305      	movs	r3, #5
 8000300:	71fb      	strb	r3, [r7, #7]
    uint8_t status_reg1;

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f000 fda2 	bl	8000e54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000310:	1df9      	adds	r1, r7, #7
 8000312:	f04f 33ff 	mov.w	r3, #4294967295
 8000316:	2201      	movs	r2, #1
 8000318:	480a      	ldr	r0, [pc, #40]	; (8000344 <ReadStatusRegister1+0x4c>)
 800031a:	f001 fcba 	bl	8001c92 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, &status_reg1, 1, HAL_MAX_DELAY);
 800031e:	1db9      	adds	r1, r7, #6
 8000320:	f04f 33ff 	mov.w	r3, #4294967295
 8000324:	2201      	movs	r2, #1
 8000326:	4807      	ldr	r0, [pc, #28]	; (8000344 <ReadStatusRegister1+0x4c>)
 8000328:	f001 fe28 	bl	8001f7c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000336:	f000 fd8d 	bl	8000e54 <HAL_GPIO_WritePin>

    return status_reg1;
 800033a:	79bb      	ldrb	r3, [r7, #6]
}
 800033c:	4618      	mov	r0, r3
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000028 	.word	0x20000028

08000348 <Sectorerase>:

void Sectorerase(uint32_t address) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    W25Q128JV_WriteEnable();
 8000350:	f7ff ff40 	bl	80001d4 <W25Q128JV_WriteEnable>
//    while(status_reg1_bits[1]!= 1){
//    	HAL_Delay(1);
//    }

    uint8_t cmd[4];
    cmd[0] = CMD_SECTOR_ERASE;
 8000354:	2320      	movs	r3, #32
 8000356:	733b      	strb	r3, [r7, #12]
    cmd[1] = (address >> 16) & 0xFF;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	0c1b      	lsrs	r3, r3, #16
 800035c:	b2db      	uxtb	r3, r3
 800035e:	737b      	strb	r3, [r7, #13]
    cmd[2] = (address >> 8) & 0xFF;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	0a1b      	lsrs	r3, r3, #8
 8000364:	b2db      	uxtb	r3, r3
 8000366:	73bb      	strb	r3, [r7, #14]
    cmd[3] = address & 0xFF;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	b2db      	uxtb	r3, r3
 800036c:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f000 fd6c 	bl	8000e54 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 800037c:	f107 010c 	add.w	r1, r7, #12
 8000380:	f04f 33ff 	mov.w	r3, #4294967295
 8000384:	2204      	movs	r2, #4
 8000386:	4807      	ldr	r0, [pc, #28]	; (80003a4 <Sectorerase+0x5c>)
 8000388:	f001 fc83 	bl	8001c92 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000396:	f000 fd5d 	bl	8000e54 <HAL_GPIO_WritePin>
}
 800039a:	bf00      	nop
 800039c:	3710      	adds	r7, #16
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000028 	.word	0x20000028

080003a8 <main>:


int main(void) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
    HAL_Init();
 80003ae:	f000 fa10 	bl	80007d2 <HAL_Init>
    SystemClock_Config();
 80003b2:	f000 f84f 	bl	8000454 <SystemClock_Config>
    MX_GPIO_Init();
 80003b6:	f000 f8d1 	bl	800055c <MX_GPIO_Init>
    MX_SPI2_Init();
 80003ba:	f000 f891 	bl	80004e0 <MX_SPI2_Init>

uint8_t data[] = {0xAA, 0xBB, 0xCC, 0xDD, 0xEE};
 80003be:	4a24      	ldr	r2, [pc, #144]	; (8000450 <main+0xa8>)
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003c8:	6018      	str	r0, [r3, #0]
 80003ca:	3304      	adds	r3, #4
 80003cc:	7019      	strb	r1, [r3, #0]
//uint8_t data[] = {0xDD, 0xCC, 0xBB, 0xAA, 0xFF};
    uint8_t data_read[5];
    uint8_t status_reg1_after_erase;
    Read(0x800000, data_read, sizeof(data));
 80003ce:	f107 030c 	add.w	r3, r7, #12
 80003d2:	2205      	movs	r2, #5
 80003d4:	4619      	mov	r1, r3
 80003d6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80003da:	f7ff ff55 	bl	8000288 <Read>
    Sectorerase(0x800000);
 80003de:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80003e2:	f7ff ffb1 	bl	8000348 <Sectorerase>
    status_reg1_after_erase = ReadStatusRegister1();
 80003e6:	f7ff ff87 	bl	80002f8 <ReadStatusRegister1>
 80003ea:	4603      	mov	r3, r0
 80003ec:	76fb      	strb	r3, [r7, #27]
    uint8_t status_reg1_bits[8];
    do{
    	status_reg1_after_erase = ReadStatusRegister1();
 80003ee:	f7ff ff83 	bl	80002f8 <ReadStatusRegister1>
 80003f2:	4603      	mov	r3, r0
 80003f4:	76fb      	strb	r3, [r7, #27]
    for (int i = 0; i < 8; i++) {
 80003f6:	2300      	movs	r3, #0
 80003f8:	61fb      	str	r3, [r7, #28]
 80003fa:	e00f      	b.n	800041c <main+0x74>
        status_reg1_bits[i] = (status_reg1_after_erase >> i) & 0x01;
 80003fc:	7efa      	ldrb	r2, [r7, #27]
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	fa42 f303 	asr.w	r3, r2, r3
 8000404:	b2db      	uxtb	r3, r3
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	b2d9      	uxtb	r1, r3
 800040c:	1d3a      	adds	r2, r7, #4
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	4413      	add	r3, r2
 8000412:	460a      	mov	r2, r1
 8000414:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	3301      	adds	r3, #1
 800041a:	61fb      	str	r3, [r7, #28]
 800041c:	69fb      	ldr	r3, [r7, #28]
 800041e:	2b07      	cmp	r3, #7
 8000420:	ddec      	ble.n	80003fc <main+0x54>
    }
    }while (status_reg1_bits[0]!= 0);
 8000422:	793b      	ldrb	r3, [r7, #4]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d1e2      	bne.n	80003ee <main+0x46>
    PageProgram(0x800000, data, sizeof(data));
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	2205      	movs	r2, #5
 800042e:	4619      	mov	r1, r3
 8000430:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000434:	f7ff feee 	bl	8000214 <PageProgram>
    Read(0x800000, data_read, sizeof(data));
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	2205      	movs	r2, #5
 800043e:	4619      	mov	r1, r3
 8000440:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000444:	f7ff ff20 	bl	8000288 <Read>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f804 	bl	8000454 <SystemClock_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800044c:	e7fe      	b.n	800044c <main+0xa4>
 800044e:	bf00      	nop
 8000450:	08002c40 	.word	0x08002c40

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b096      	sub	sp, #88	; 0x58
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0314 	add.w	r3, r7, #20
 800045e:	2244      	movs	r2, #68	; 0x44
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f002 fbb4 	bl	8002bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	463b      	mov	r3, r7
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000476:	f44f 7000 	mov.w	r0, #512	; 0x200
 800047a:	f000 fd11 	bl	8000ea0 <HAL_PWREx_ControlVoltageScaling>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000484:	f000 f8c0 	bl	8000608 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000488:	2310      	movs	r3, #16
 800048a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800048c:	2301      	movs	r3, #1
 800048e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000494:	2360      	movs	r3, #96	; 0x60
 8000496:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000498:	2300      	movs	r3, #0
 800049a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fd53 	bl	8000f4c <HAL_RCC_OscConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004ac:	f000 f8ac 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b0:	230f      	movs	r3, #15
 80004b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004b4:	2300      	movs	r3, #0
 80004b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c4:	463b      	mov	r3, r7
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 f953 	bl	8001774 <HAL_RCC_ClockConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004d4:	f000 f898 	bl	8000608 <Error_Handler>
  }
}
 80004d8:	bf00      	nop
 80004da:	3758      	adds	r7, #88	; 0x58
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	; (8000554 <MX_SPI2_Init+0x74>)
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <MX_SPI2_Init+0x78>)
 80004e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <MX_SPI2_Init+0x74>)
 80004ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <MX_SPI2_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <MX_SPI2_Init+0x74>)
 80004fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80004fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_SPI2_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_SPI2_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_SPI2_Init+0x74>)
 800050e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000512:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_SPI2_Init+0x74>)
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <MX_SPI2_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_SPI2_Init+0x74>)
 8000522:	2200      	movs	r2, #0
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <MX_SPI2_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_SPI2_Init+0x74>)
 800052e:	2207      	movs	r2, #7
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_SPI2_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_SPI2_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_SPI2_Init+0x74>)
 8000540:	f001 fb04 	bl	8001b4c <HAL_SPI_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800054a:	f000 f85d 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028
 8000558:	40003800 	.word	0x40003800

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	f107 030c 	add.w	r3, r7, #12
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MX_GPIO_Init+0xa4>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a22      	ldr	r2, [pc, #136]	; (8000600 <MX_GPIO_Init+0xa4>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MX_GPIO_Init+0xa4>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <MX_GPIO_Init+0xa4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a1c      	ldr	r2, [pc, #112]	; (8000600 <MX_GPIO_Init+0xa4>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_GPIO_Init+0xa4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f000 fc52 	bl	8000e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2120      	movs	r1, #32
 80005b4:	4813      	ldr	r0, [pc, #76]	; (8000604 <MX_GPIO_Init+0xa8>)
 80005b6:	f000 fc4d 	bl	8000e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 80005ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c0:	2301      	movs	r3, #1
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c8:	2303      	movs	r3, #3
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f000 fac3 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005da:	2320      	movs	r3, #32
 80005dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4619      	mov	r1, r3
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_GPIO_Init+0xa8>)
 80005f2:	f000 fab5 	bl	8000b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	48000400 	.word	0x48000400

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	e7fe      	b.n	8000610 <Error_Handler+0x8>
	...

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_MspInit+0x44>)
 800061c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800061e:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <HAL_MspInit+0x44>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6613      	str	r3, [r2, #96]	; 0x60
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <HAL_MspInit+0x44>)
 8000628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_MspInit+0x44>)
 8000634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000636:	4a08      	ldr	r2, [pc, #32]	; (8000658 <HAL_MspInit+0x44>)
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063c:	6593      	str	r3, [r2, #88]	; 0x58
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_MspInit+0x44>)
 8000640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <HAL_SPI_MspInit+0x8c>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d130      	bne.n	80006e0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_SPI_MspInit+0x90>)
 8000680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000682:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <HAL_SPI_MspInit+0x90>)
 8000684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000688:	6593      	str	r3, [r2, #88]	; 0x58
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <HAL_SPI_MspInit+0x90>)
 800068c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_SPI_MspInit+0x90>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <HAL_SPI_MspInit+0x90>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_SPI_MspInit+0x90>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80006ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006c0:	2305      	movs	r3, #5
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	4809      	ldr	r0, [pc, #36]	; (80006f0 <HAL_SPI_MspInit+0x94>)
 80006cc:	f000 fa48 	bl	8000b60 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2100      	movs	r1, #0
 80006d4:	2024      	movs	r0, #36	; 0x24
 80006d6:	f000 f9cc 	bl	8000a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80006da:	2024      	movs	r0, #36	; 0x24
 80006dc:	f000 f9e5 	bl	8000aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	; 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40003800 	.word	0x40003800
 80006ec:	40021000 	.word	0x40021000
 80006f0:	48000400 	.word	0x48000400

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f89c 	bl	800087c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <SPI2_IRQHandler+0x10>)
 800074e:	f001 ff6f 	bl	8002630 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000028 	.word	0x20000028

0800075c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000784:	f7ff ffea 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <LoopForever+0x6>)
  ldr r1, =_edata
 800078a:	490d      	ldr	r1, [pc, #52]	; (80007c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <LoopForever+0xe>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a0:	4c0a      	ldr	r4, [pc, #40]	; (80007cc <LoopForever+0x16>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ae:	f002 fa17 	bl	8002be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007b2:	f7ff fdf9 	bl	80003a8 <main>

080007b6 <LoopForever>:

LoopForever:
    b LoopForever
 80007b6:	e7fe      	b.n	80007b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007b8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007c4:	08002c90 	.word	0x08002c90
  ldr r2, =_sbss
 80007c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007cc:	20000090 	.word	0x20000090

080007d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC1_IRQHandler>

080007d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007d8:	2300      	movs	r3, #0
 80007da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f93d 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e2:	200f      	movs	r0, #15
 80007e4:	f000 f80e 	bl	8000804 <HAL_InitTick>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	e001      	b.n	80007f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007f4:	f7ff ff0e 	bl	8000614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800080c:	2300      	movs	r3, #0
 800080e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <HAL_InitTick+0x6c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d023      	beq.n	8000860 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <HAL_InitTick+0x70>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_InitTick+0x6c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	fbb3 f3f1 	udiv	r3, r3, r1
 800082a:	fbb2 f3f3 	udiv	r3, r2, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f949 	bl	8000ac6 <HAL_SYSTICK_Config>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10f      	bne.n	800085a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d809      	bhi.n	8000854 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000840:	2200      	movs	r2, #0
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f000 f913 	bl	8000a72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800084c:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_InitTick+0x74>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	e007      	b.n	8000864 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	73fb      	strb	r3, [r7, #15]
 8000858:	e004      	b.n	8000864 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	73fb      	strb	r3, [r7, #15]
 800085e:	e001      	b.n	8000864 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000864:	7bfb      	ldrb	r3, [r7, #15]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008
 8000874:	20000000 	.word	0x20000000
 8000878:	20000004 	.word	0x20000004

0800087c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_IncTick+0x20>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_IncTick+0x24>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4413      	add	r3, r2
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_IncTick+0x24>)
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	20000008 	.word	0x20000008
 80008a0:	2000008c 	.word	0x2000008c

080008a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <HAL_GetTick+0x14>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	2000008c 	.word	0x2000008c

080008bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ee:	4a04      	ldr	r2, [pc, #16]	; (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	60d3      	str	r3, [r2, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <__NVIC_GetPriorityGrouping+0x18>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	f003 0307 	and.w	r3, r3, #7
}
 8000912:	4618      	mov	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	2b00      	cmp	r3, #0
 8000930:	db0b      	blt.n	800094a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	f003 021f 	and.w	r2, r3, #31
 8000938:	4907      	ldr	r1, [pc, #28]	; (8000958 <__NVIC_EnableIRQ+0x38>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	095b      	lsrs	r3, r3, #5
 8000940:	2001      	movs	r0, #1
 8000942:	fa00 f202 	lsl.w	r2, r0, r2
 8000946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000e100 	.word	0xe000e100

0800095c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db0a      	blt.n	8000986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	490c      	ldr	r1, [pc, #48]	; (80009a8 <__NVIC_SetPriority+0x4c>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	440b      	add	r3, r1
 8000980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000984:	e00a      	b.n	800099c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4908      	ldr	r1, [pc, #32]	; (80009ac <__NVIC_SetPriority+0x50>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	3b04      	subs	r3, #4
 8000994:	0112      	lsls	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	440b      	add	r3, r1
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	bf28      	it	cs
 80009ce:	2304      	movcs	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d902      	bls.n	80009e0 <NVIC_EncodePriority+0x30>
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3b03      	subs	r3, #3
 80009de:	e000      	b.n	80009e2 <NVIC_EncodePriority+0x32>
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43d9      	mvns	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	4313      	orrs	r3, r2
         );
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3724      	adds	r7, #36	; 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a28:	d301      	bcc.n	8000a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00f      	b.n	8000a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <SysTick_Config+0x40>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a36:	210f      	movs	r1, #15
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f7ff ff8e 	bl	800095c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SysTick_Config+0x40>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SysTick_Config+0x40>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010

08000a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff29 	bl	80008bc <__NVIC_SetPriorityGrouping>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a84:	f7ff ff3e 	bl	8000904 <__NVIC_GetPriorityGrouping>
 8000a88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff ff8e 	bl	80009b0 <NVIC_EncodePriority>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff5d 	bl	800095c <__NVIC_SetPriority>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff31 	bl	8000920 <__NVIC_EnableIRQ>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ffa2 	bl	8000a18 <SysTick_Config>
 8000ad4:	4603      	mov	r3, r0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d005      	beq.n	8000b02 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2204      	movs	r2, #4
 8000afa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
 8000b00:	e029      	b.n	8000b56 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f022 020e 	bic.w	r2, r2, #14
 8000b10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f022 0201 	bic.w	r2, r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f003 021c 	and.w	r2, r3, #28
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	4798      	blx	r3
    }
  }
  return status;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	e154      	b.n	8000e1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 8146 	beq.w	8000e14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d005      	beq.n	8000ba0 <HAL_GPIO_Init+0x40>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d130      	bne.n	8000c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	f003 0201 	and.w	r2, r3, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d017      	beq.n	8000c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d123      	bne.n	8000c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	08da      	lsrs	r2, r3, #3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3208      	adds	r2, #8
 8000c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	220f      	movs	r2, #15
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	691a      	ldr	r2, [r3, #16]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	6939      	ldr	r1, [r7, #16]
 8000c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0203 	and.w	r2, r3, #3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 80a0 	beq.w	8000e14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd4:	4b58      	ldr	r3, [pc, #352]	; (8000e38 <HAL_GPIO_Init+0x2d8>)
 8000cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd8:	4a57      	ldr	r2, [pc, #348]	; (8000e38 <HAL_GPIO_Init+0x2d8>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce0:	4b55      	ldr	r3, [pc, #340]	; (8000e38 <HAL_GPIO_Init+0x2d8>)
 8000ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cec:	4a53      	ldr	r2, [pc, #332]	; (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d16:	d019      	beq.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a49      	ldr	r2, [pc, #292]	; (8000e40 <HAL_GPIO_Init+0x2e0>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d013      	beq.n	8000d48 <HAL_GPIO_Init+0x1e8>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a48      	ldr	r2, [pc, #288]	; (8000e44 <HAL_GPIO_Init+0x2e4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d00d      	beq.n	8000d44 <HAL_GPIO_Init+0x1e4>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a47      	ldr	r2, [pc, #284]	; (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d007      	beq.n	8000d40 <HAL_GPIO_Init+0x1e0>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a46      	ldr	r2, [pc, #280]	; (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d101      	bne.n	8000d3c <HAL_GPIO_Init+0x1dc>
 8000d38:	2304      	movs	r3, #4
 8000d3a:	e008      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	e006      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d40:	2303      	movs	r3, #3
 8000d42:	e004      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e002      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	f002 0203 	and.w	r2, r2, #3
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	4093      	lsls	r3, r2
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d5e:	4937      	ldr	r1, [pc, #220]	; (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d6c:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d90:	4a2f      	ldr	r2, [pc, #188]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dba:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000de4:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	fa22 f303 	lsr.w	r3, r2, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f47f aea3 	bne.w	8000b70 <HAL_GPIO_Init+0x10>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	371c      	adds	r7, #28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010000 	.word	0x40010000
 8000e40:	48000400 	.word	0x48000400
 8000e44:	48000800 	.word	0x48000800
 8000e48:	48000c00 	.word	0x48000c00
 8000e4c:	48001000 	.word	0x48001000
 8000e50:	40010400 	.word	0x40010400

08000e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e64:	787b      	ldrb	r3, [r7, #1]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <HAL_PWREx_GetVoltageRange+0x18>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eae:	d130      	bne.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ebc:	d038      	beq.n	8000f30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ec6:	4a1e      	ldr	r2, [pc, #120]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ecc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2232      	movs	r2, #50	; 0x32
 8000ed4:	fb02 f303 	mul.w	r3, r2, r3
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000eda:	fba2 2303 	umull	r2, r3, r2, r3
 8000ede:	0c9b      	lsrs	r3, r3, #18
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ee4:	e002      	b.n	8000eec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef8:	d102      	bne.n	8000f00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f2      	bne.n	8000ee6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f0c:	d110      	bne.n	8000f30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e00f      	b.n	8000f32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1e:	d007      	beq.n	8000f30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f28:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40007000 	.word	0x40007000
 8000f44:	20000000 	.word	0x20000000
 8000f48:	431bde83 	.word	0x431bde83

08000f4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	f000 bc02 	b.w	8001764 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f60:	4b96      	ldr	r3, [pc, #600]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f6a:	4b94      	ldr	r3, [pc, #592]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0310 	and.w	r3, r3, #16
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80e4 	beq.w	800114a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d007      	beq.n	8000f98 <HAL_RCC_OscConfig+0x4c>
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b0c      	cmp	r3, #12
 8000f8c:	f040 808b 	bne.w	80010a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	f040 8087 	bne.w	80010a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f98:	4b88      	ldr	r3, [pc, #544]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x64>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e3d9      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1a      	ldr	r2, [r3, #32]
 8000fb4:	4b81      	ldr	r3, [pc, #516]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d004      	beq.n	8000fca <HAL_RCC_OscConfig+0x7e>
 8000fc0:	4b7e      	ldr	r3, [pc, #504]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fc8:	e005      	b.n	8000fd6 <HAL_RCC_OscConfig+0x8a>
 8000fca:	4b7c      	ldr	r3, [pc, #496]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8000fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d223      	bcs.n	8001022 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 fd54 	bl	8001a8c <RCC_SetFlashLatencyFromMSIRange>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e3ba      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fee:	4b73      	ldr	r3, [pc, #460]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a72      	ldr	r2, [pc, #456]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	4b70      	ldr	r3, [pc, #448]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	496d      	ldr	r1, [pc, #436]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8001008:	4313      	orrs	r3, r2
 800100a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800100c:	4b6b      	ldr	r3, [pc, #428]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	4968      	ldr	r1, [pc, #416]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
 8001020:	e025      	b.n	800106e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001022:	4b66      	ldr	r3, [pc, #408]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a65      	ldr	r2, [pc, #404]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4b63      	ldr	r3, [pc, #396]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a1b      	ldr	r3, [r3, #32]
 800103a:	4960      	ldr	r1, [pc, #384]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 800103c:	4313      	orrs	r3, r2
 800103e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001040:	4b5e      	ldr	r3, [pc, #376]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	495b      	ldr	r1, [pc, #364]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8001050:	4313      	orrs	r3, r2
 8001052:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d109      	bne.n	800106e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fd14 	bl	8001a8c <RCC_SetFlashLatencyFromMSIRange>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e37a      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800106e:	f000 fc81 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001072:	4602      	mov	r2, r0
 8001074:	4b51      	ldr	r3, [pc, #324]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	4950      	ldr	r1, [pc, #320]	; (80011c0 <HAL_RCC_OscConfig+0x274>)
 8001080:	5ccb      	ldrb	r3, [r1, r3]
 8001082:	f003 031f 	and.w	r3, r3, #31
 8001086:	fa22 f303 	lsr.w	r3, r2, r3
 800108a:	4a4e      	ldr	r2, [pc, #312]	; (80011c4 <HAL_RCC_OscConfig+0x278>)
 800108c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800108e:	4b4e      	ldr	r3, [pc, #312]	; (80011c8 <HAL_RCC_OscConfig+0x27c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fbb6 	bl	8000804 <HAL_InitTick>
 8001098:	4603      	mov	r3, r0
 800109a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d052      	beq.n	8001148 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	e35e      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d032      	beq.n	8001114 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010ae:	4b43      	ldr	r3, [pc, #268]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a42      	ldr	r2, [pc, #264]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010ba:	f7ff fbf3 	bl	80008a4 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010c2:	f7ff fbef 	bl	80008a4 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e347      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010d4:	4b39      	ldr	r3, [pc, #228]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e0:	4b36      	ldr	r3, [pc, #216]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a35      	ldr	r2, [pc, #212]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b33      	ldr	r3, [pc, #204]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	4930      	ldr	r1, [pc, #192]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	492b      	ldr	r1, [pc, #172]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
 8001112:	e01a      	b.n	800114a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a28      	ldr	r2, [pc, #160]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 800111a:	f023 0301 	bic.w	r3, r3, #1
 800111e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001120:	f7ff fbc0 	bl	80008a4 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001128:	f7ff fbbc 	bl	80008a4 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e314      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x1dc>
 8001146:	e000      	b.n	800114a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d073      	beq.n	800123e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b08      	cmp	r3, #8
 800115a:	d005      	beq.n	8001168 <HAL_RCC_OscConfig+0x21c>
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d10e      	bne.n	8001180 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2b03      	cmp	r3, #3
 8001166:	d10b      	bne.n	8001180 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d063      	beq.n	800123c <HAL_RCC_OscConfig+0x2f0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d15f      	bne.n	800123c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e2f1      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d106      	bne.n	8001198 <HAL_RCC_OscConfig+0x24c>
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e025      	b.n	80011e4 <HAL_RCC_OscConfig+0x298>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a0:	d114      	bne.n	80011cc <HAL_RCC_OscConfig+0x280>
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a02      	ldr	r2, [pc, #8]	; (80011bc <HAL_RCC_OscConfig+0x270>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e013      	b.n	80011e4 <HAL_RCC_OscConfig+0x298>
 80011bc:	40021000 	.word	0x40021000
 80011c0:	08002c48 	.word	0x08002c48
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000004 	.word	0x20000004
 80011cc:	4ba0      	ldr	r3, [pc, #640]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a9f      	ldr	r2, [pc, #636]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b9d      	ldr	r3, [pc, #628]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a9c      	ldr	r2, [pc, #624]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d013      	beq.n	8001214 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ec:	f7ff fb5a 	bl	80008a4 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fb56 	bl	80008a4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e2ae      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001206:	4b92      	ldr	r3, [pc, #584]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0x2a8>
 8001212:	e014      	b.n	800123e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fb46 	bl	80008a4 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fb42 	bl	80008a4 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e29a      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800122e:	4b88      	ldr	r3, [pc, #544]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x2d0>
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d060      	beq.n	800130c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	2b04      	cmp	r3, #4
 800124e:	d005      	beq.n	800125c <HAL_RCC_OscConfig+0x310>
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d119      	bne.n	800128a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d116      	bne.n	800128a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800125c:	4b7c      	ldr	r3, [pc, #496]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_RCC_OscConfig+0x328>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e277      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b76      	ldr	r3, [pc, #472]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	061b      	lsls	r3, r3, #24
 8001282:	4973      	ldr	r1, [pc, #460]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001288:	e040      	b.n	800130c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d023      	beq.n	80012da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001292:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6e      	ldr	r2, [pc, #440]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff fb01 	bl	80008a4 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a6:	f7ff fafd 	bl	80008a4 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e255      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012b8:	4b65      	ldr	r3, [pc, #404]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c4:	4b62      	ldr	r3, [pc, #392]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	061b      	lsls	r3, r3, #24
 80012d2:	495f      	ldr	r1, [pc, #380]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]
 80012d8:	e018      	b.n	800130c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a5c      	ldr	r2, [pc, #368]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80012e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e6:	f7ff fadd 	bl	80008a4 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ee:	f7ff fad9 	bl	80008a4 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e231      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001300:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	2b00      	cmp	r3, #0
 8001316:	d03c      	beq.n	8001392 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d01c      	beq.n	800135a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001320:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001326:	4a4a      	ldr	r2, [pc, #296]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001330:	f7ff fab8 	bl	80008a4 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001338:	f7ff fab4 	bl	80008a4 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e20c      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800134a:	4b41      	ldr	r3, [pc, #260]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 800134c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0ef      	beq.n	8001338 <HAL_RCC_OscConfig+0x3ec>
 8001358:	e01b      	b.n	8001392 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 800135c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001360:	4a3b      	ldr	r2, [pc, #236]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136a:	f7ff fa9b 	bl	80008a4 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001372:	f7ff fa97 	bl	80008a4 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e1ef      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001384:	4b32      	ldr	r3, [pc, #200]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1ef      	bne.n	8001372 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 80a6 	beq.w	80014ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10d      	bne.n	80013cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b4:	4a26      	ldr	r2, [pc, #152]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ba:	6593      	str	r3, [r2, #88]	; 0x58
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c8:	2301      	movs	r3, #1
 80013ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_RCC_OscConfig+0x508>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d118      	bne.n	800140a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_RCC_OscConfig+0x508>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_RCC_OscConfig+0x508>)
 80013de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e4:	f7ff fa5e 	bl	80008a4 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ec:	f7ff fa5a 	bl	80008a4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1b2      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_RCC_OscConfig+0x508>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d108      	bne.n	8001424 <HAL_RCC_OscConfig+0x4d8>
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001422:	e029      	b.n	8001478 <HAL_RCC_OscConfig+0x52c>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b05      	cmp	r3, #5
 800142a:	d115      	bne.n	8001458 <HAL_RCC_OscConfig+0x50c>
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001432:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001442:	4a03      	ldr	r2, [pc, #12]	; (8001450 <HAL_RCC_OscConfig+0x504>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800144c:	e014      	b.n	8001478 <HAL_RCC_OscConfig+0x52c>
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	40007000 	.word	0x40007000
 8001458:	4b9a      	ldr	r3, [pc, #616]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 800145a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800145e:	4a99      	ldr	r2, [pc, #612]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001468:	4b96      	ldr	r3, [pc, #600]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 800146a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146e:	4a95      	ldr	r2, [pc, #596]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001470:	f023 0304 	bic.w	r3, r3, #4
 8001474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d016      	beq.n	80014ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fa10 	bl	80008a4 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001486:	e00a      	b.n	800149e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001488:	f7ff fa0c 	bl	80008a4 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e162      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800149e:	4b89      	ldr	r3, [pc, #548]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 80014a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0ed      	beq.n	8001488 <HAL_RCC_OscConfig+0x53c>
 80014ac:	e015      	b.n	80014da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ae:	f7ff f9f9 	bl	80008a4 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff f9f5 	bl	80008a4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e14b      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014cc:	4b7d      	ldr	r3, [pc, #500]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 80014ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ed      	bne.n	80014b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014da:	7ffb      	ldrb	r3, [r7, #31]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e0:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e4:	4a77      	ldr	r2, [pc, #476]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 80014e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0320 	and.w	r3, r3, #32
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d03c      	beq.n	8001572 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d01c      	beq.n	800153a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001500:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001506:	4a6f      	ldr	r2, [pc, #444]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff f9c8 	bl	80008a4 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001518:	f7ff f9c4 	bl	80008a4 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e11c      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800152a:	4b66      	ldr	r3, [pc, #408]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 800152c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0ef      	beq.n	8001518 <HAL_RCC_OscConfig+0x5cc>
 8001538:	e01b      	b.n	8001572 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800153a:	4b62      	ldr	r3, [pc, #392]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 800153c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001540:	4a60      	ldr	r2, [pc, #384]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154a:	f7ff f9ab 	bl	80008a4 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001552:	f7ff f9a7 	bl	80008a4 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e0ff      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001564:	4b57      	ldr	r3, [pc, #348]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ef      	bne.n	8001552 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80f3 	beq.w	8001762 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	2b02      	cmp	r3, #2
 8001582:	f040 80c9 	bne.w	8001718 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001586:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f003 0203 	and.w	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	429a      	cmp	r2, r3
 8001598:	d12c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	3b01      	subs	r3, #1
 80015a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d123      	bne.n	80015f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d11b      	bne.n	80015f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d113      	bne.n	80015f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d6:	085b      	lsrs	r3, r3, #1
 80015d8:	3b01      	subs	r3, #1
 80015da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d109      	bne.n	80015f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	3b01      	subs	r3, #1
 80015ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d06b      	beq.n	80016cc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d062      	beq.n	80016c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0ac      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a2d      	ldr	r2, [pc, #180]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001610:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001614:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001616:	f7ff f945 	bl	80008a4 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff f941 	bl	80008a4 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e099      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001630:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 800163e:	68da      	ldr	r2, [r3, #12]
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_RCC_OscConfig+0x77c>)
 8001642:	4013      	ands	r3, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800164c:	3a01      	subs	r2, #1
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	4311      	orrs	r1, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001656:	0212      	lsls	r2, r2, #8
 8001658:	4311      	orrs	r1, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800165e:	0852      	lsrs	r2, r2, #1
 8001660:	3a01      	subs	r2, #1
 8001662:	0552      	lsls	r2, r2, #21
 8001664:	4311      	orrs	r1, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800166a:	0852      	lsrs	r2, r2, #1
 800166c:	3a01      	subs	r2, #1
 800166e:	0652      	lsls	r2, r2, #25
 8001670:	4311      	orrs	r1, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001676:	06d2      	lsls	r2, r2, #27
 8001678:	430a      	orrs	r2, r1
 800167a:	4912      	ldr	r1, [pc, #72]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001680:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800168a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 8001692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001696:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001698:	f7ff f904 	bl	80008a4 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff f900 	bl	80008a4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e058      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_RCC_OscConfig+0x778>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016be:	e050      	b.n	8001762 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e04f      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
 80016c4:	40021000 	.word	0x40021000
 80016c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x820>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d144      	bne.n	8001762 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_RCC_OscConfig+0x820>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a23      	ldr	r2, [pc, #140]	; (800176c <HAL_RCC_OscConfig+0x820>)
 80016de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_RCC_OscConfig+0x820>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4a20      	ldr	r2, [pc, #128]	; (800176c <HAL_RCC_OscConfig+0x820>)
 80016ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016f0:	f7ff f8d8 	bl	80008a4 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff f8d4 	bl	80008a4 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e02c      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_RCC_OscConfig+0x820>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x7ac>
 8001716:	e024      	b.n	8001762 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d01f      	beq.n	800175e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_RCC_OscConfig+0x820>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_RCC_OscConfig+0x820>)
 8001724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff f8bb 	bl	80008a4 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff f8b7 	bl	80008a4 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e00f      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_OscConfig+0x820>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_RCC_OscConfig+0x820>)
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	4905      	ldr	r1, [pc, #20]	; (800176c <HAL_RCC_OscConfig+0x820>)
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_RCC_OscConfig+0x824>)
 8001758:	4013      	ands	r3, r2
 800175a:	60cb      	str	r3, [r1, #12]
 800175c:	e001      	b.n	8001762 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	feeefffc 	.word	0xfeeefffc

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0e7      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b75      	ldr	r3, [pc, #468]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d910      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b72      	ldr	r3, [pc, #456]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 0207 	bic.w	r2, r3, #7
 800179e:	4970      	ldr	r1, [pc, #448]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b6e      	ldr	r3, [pc, #440]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0cf      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d010      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	4b66      	ldr	r3, [pc, #408]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d908      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b63      	ldr	r3, [pc, #396]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4960      	ldr	r1, [pc, #384]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d04c      	beq.n	800188c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fa:	4b5a      	ldr	r3, [pc, #360]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d121      	bne.n	800184a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0a6      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001812:	4b54      	ldr	r3, [pc, #336]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d115      	bne.n	800184a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e09a      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800182a:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e08e      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e086      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800184a:	4b46      	ldr	r3, [pc, #280]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f023 0203 	bic.w	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4943      	ldr	r1, [pc, #268]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001858:	4313      	orrs	r3, r2
 800185a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800185c:	f7ff f822 	bl	80008a4 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e00a      	b.n	800187a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff f81e 	bl	80008a4 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e06e      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 020c 	and.w	r2, r3, #12
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	429a      	cmp	r2, r3
 800188a:	d1eb      	bne.n	8001864 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d010      	beq.n	80018ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d208      	bcs.n	80018ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	492b      	ldr	r1, [pc, #172]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d210      	bcs.n	80018ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c8:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 0207 	bic.w	r2, r3, #7
 80018d0:	4923      	ldr	r1, [pc, #140]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e036      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	4918      	ldr	r1, [pc, #96]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d009      	beq.n	8001928 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4910      	ldr	r1, [pc, #64]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001924:	4313      	orrs	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001928:	f000 f824 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	490b      	ldr	r1, [pc, #44]	; (8001968 <HAL_RCC_ClockConfig+0x1f4>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	4a09      	ldr	r2, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1f8>)
 8001946:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1fc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe ff59 	bl	8000804 <HAL_InitTick>
 8001952:	4603      	mov	r3, r0
 8001954:	72fb      	strb	r3, [r7, #11]

  return status;
 8001956:	7afb      	ldrb	r3, [r7, #11]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40022000 	.word	0x40022000
 8001964:	40021000 	.word	0x40021000
 8001968:	08002c48 	.word	0x08002c48
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800198c:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x34>
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d121      	bne.n	80019e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d11e      	bne.n	80019e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019a8:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019b4:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80019b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e005      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019d0:	4a2b      	ldr	r2, [pc, #172]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10d      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019e4:	e00a      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d102      	bne.n	80019f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x110>)
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	e004      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x114>)
 80019fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d134      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d003      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d003      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0xac>
 8001a18:	e005      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a1c:	617b      	str	r3, [r7, #20]
      break;
 8001a1e:	e005      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a22:	617b      	str	r3, [r7, #20]
      break;
 8001a24:	e002      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	617b      	str	r3, [r7, #20]
      break;
 8001a2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	3301      	adds	r3, #1
 8001a38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	fb03 f202 	mul.w	r2, r3, r2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	0e5b      	lsrs	r3, r3, #25
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	08002c58 	.word	0x08002c58
 8001a84:	00f42400 	.word	0x00f42400
 8001a88:	007a1200 	.word	0x007a1200

08001a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001aa4:	f7ff f9ee 	bl	8000e84 <HAL_PWREx_GetVoltageRange>
 8001aa8:	6178      	str	r0, [r7, #20]
 8001aaa:	e014      	b.n	8001ad6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	4a24      	ldr	r2, [pc, #144]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ac4:	f7ff f9de 	bl	8000e84 <HAL_PWREx_GetVoltageRange>
 8001ac8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001adc:	d10b      	bne.n	8001af6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b80      	cmp	r3, #128	; 0x80
 8001ae2:	d919      	bls.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ae8:	d902      	bls.n	8001af0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aea:	2302      	movs	r3, #2
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	e013      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001af0:	2301      	movs	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	e010      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b80      	cmp	r3, #128	; 0x80
 8001afa:	d902      	bls.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001afc:	2303      	movs	r3, #3
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	e00a      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b80      	cmp	r3, #128	; 0x80
 8001b06:	d102      	bne.n	8001b0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b08:	2302      	movs	r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	e004      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b70      	cmp	r3, #112	; 0x70
 8001b12:	d101      	bne.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b14:	2301      	movs	r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 0207 	bic.w	r2, r3, #7
 8001b20:	4909      	ldr	r1, [pc, #36]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d001      	beq.n	8001b3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40022000 	.word	0x40022000

08001b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e095      	b.n	8001c8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d108      	bne.n	8001b78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b6e:	d009      	beq.n	8001b84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
 8001b76:	e005      	b.n	8001b84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe fd5c 	bl	800065c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bc4:	d902      	bls.n	8001bcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e002      	b.n	8001bd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001bda:	d007      	beq.n	8001bec <HAL_SPI_Init+0xa0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001be4:	d002      	beq.n	8001bec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2e:	ea42 0103 	orr.w	r1, r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	0c1b      	lsrs	r3, r3, #16
 8001c48:	f003 0204 	and.w	r2, r3, #4
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c68:	ea42 0103 	orr.w	r1, r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b088      	sub	sp, #32
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_SPI_Transmit+0x22>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e15f      	b.n	8001f74 <HAL_SPI_Transmit+0x2e2>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cbc:	f7fe fdf2 	bl	80008a4 <HAL_GetTick>
 8001cc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d002      	beq.n	8001cd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cd6:	e148      	b.n	8001f6a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_SPI_Transmit+0x52>
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ce8:	e13f      	b.n	8001f6a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2203      	movs	r2, #3
 8001cee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	88fa      	ldrh	r2, [r7, #6]
 8001d08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d34:	d10f      	bne.n	8001d56 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d60:	2b40      	cmp	r3, #64	; 0x40
 8001d62:	d007      	beq.n	8001d74 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d7c:	d94f      	bls.n	8001e1e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <HAL_SPI_Transmit+0xfa>
 8001d86:	8afb      	ldrh	r3, [r7, #22]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d142      	bne.n	8001e12 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9c:	1c9a      	adds	r2, r3, #2
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001db0:	e02f      	b.n	8001e12 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d112      	bne.n	8001de6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	881a      	ldrh	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	1c9a      	adds	r2, r3, #2
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001de4:	e015      	b.n	8001e12 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001de6:	f7fe fd5d 	bl	80008a4 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d803      	bhi.n	8001dfe <HAL_SPI_Transmit+0x16c>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d102      	bne.n	8001e04 <HAL_SPI_Transmit+0x172>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d106      	bne.n	8001e12 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001e10:	e0ab      	b.n	8001f6a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ca      	bne.n	8001db2 <HAL_SPI_Transmit+0x120>
 8001e1c:	e080      	b.n	8001f20 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <HAL_SPI_Transmit+0x19a>
 8001e26:	8afb      	ldrh	r3, [r7, #22]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d174      	bne.n	8001f16 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d912      	bls.n	8001e5c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	881a      	ldrh	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e46:	1c9a      	adds	r2, r3, #2
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b02      	subs	r3, #2
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e5a:	e05c      	b.n	8001f16 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	330c      	adds	r3, #12
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001e82:	e048      	b.n	8001f16 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d12b      	bne.n	8001eea <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d912      	bls.n	8001ec2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	881a      	ldrh	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eac:	1c9a      	adds	r2, r3, #2
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b02      	subs	r3, #2
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ec0:	e029      	b.n	8001f16 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	330c      	adds	r3, #12
 8001ecc:	7812      	ldrb	r2, [r2, #0]
 8001ece:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ee8:	e015      	b.n	8001f16 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eea:	f7fe fcdb 	bl	80008a4 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d803      	bhi.n	8001f02 <HAL_SPI_Transmit+0x270>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f00:	d102      	bne.n	8001f08 <HAL_SPI_Transmit+0x276>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001f14:	e029      	b.n	8001f6a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1b1      	bne.n	8001e84 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	6839      	ldr	r1, [r7, #0]
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 fe0d 	bl	8002b44 <SPI_EndRxTxTransaction>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10a      	bne.n	8001f54 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	77fb      	strb	r3, [r7, #31]
 8001f60:	e003      	b.n	8001f6a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001f72:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d002      	beq.n	8001fa2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fa0:	e11a      	b.n	80021d8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001faa:	d112      	bne.n	8001fd2 <HAL_SPI_Receive+0x56>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10e      	bne.n	8001fd2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001fbc:	88fa      	ldrh	r2, [r7, #6]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 f90e 	bl	80021ea <HAL_SPI_TransmitReceive>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	e107      	b.n	80021e2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_SPI_Receive+0x64>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e100      	b.n	80021e2 <HAL_SPI_Receive+0x266>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fe8:	f7fe fc5c 	bl	80008a4 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <HAL_SPI_Receive+0x7e>
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ffe:	e0eb      	b.n	80021d8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2204      	movs	r2, #4
 8002004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	88fa      	ldrh	r2, [r7, #6]
 8002018:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	88fa      	ldrh	r2, [r7, #6]
 8002020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800204a:	d908      	bls.n	800205e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	e007      	b.n	800206e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800206c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002076:	d10f      	bne.n	8002098 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002086:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002096:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d007      	beq.n	80020b6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020be:	d86f      	bhi.n	80021a0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020c0:	e034      	b.n	800212c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d117      	bne.n	8002100 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f103 020c 	add.w	r2, r3, #12
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	7812      	ldrb	r2, [r2, #0]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80020fe:	e015      	b.n	800212c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002100:	f7fe fbd0 	bl	80008a4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d803      	bhi.n	8002118 <HAL_SPI_Receive+0x19c>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	d102      	bne.n	800211e <HAL_SPI_Receive+0x1a2>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800212a:	e055      	b.n	80021d8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1c4      	bne.n	80020c2 <HAL_SPI_Receive+0x146>
 8002138:	e038      	b.n	80021ac <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d115      	bne.n	8002174 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	b292      	uxth	r2, r2
 8002154:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	1c9a      	adds	r2, r3, #2
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002172:	e015      	b.n	80021a0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002174:	f7fe fb96 	bl	80008a4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d803      	bhi.n	800218c <HAL_SPI_Receive+0x210>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d102      	bne.n	8002192 <HAL_SPI_Receive+0x216>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800219e:	e01b      	b.n	80021d8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1c6      	bne.n	800213a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fc6f 	bl	8002a94 <SPI_EndRxTransaction>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	75fb      	strb	r3, [r7, #23]
 80021ce:	e003      	b.n	80021d8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b08a      	sub	sp, #40	; 0x28
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021f8:	2301      	movs	r3, #1
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_SPI_TransmitReceive+0x26>
 800220c:	2302      	movs	r3, #2
 800220e:	e20a      	b.n	8002626 <HAL_SPI_TransmitReceive+0x43c>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002218:	f7fe fb44 	bl	80008a4 <HAL_GetTick>
 800221c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002224:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800222c:	887b      	ldrh	r3, [r7, #2]
 800222e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002234:	7efb      	ldrb	r3, [r7, #27]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d00e      	beq.n	8002258 <HAL_SPI_TransmitReceive+0x6e>
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002240:	d106      	bne.n	8002250 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_SPI_TransmitReceive+0x66>
 800224a:	7efb      	ldrb	r3, [r7, #27]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d003      	beq.n	8002258 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002250:	2302      	movs	r3, #2
 8002252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002256:	e1e0      	b.n	800261a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_SPI_TransmitReceive+0x80>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_SPI_TransmitReceive+0x80>
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002270:	e1d3      	b.n	800261a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b04      	cmp	r3, #4
 800227c:	d003      	beq.n	8002286 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2205      	movs	r2, #5
 8002282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	887a      	ldrh	r2, [r7, #2]
 8002296:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	887a      	ldrh	r2, [r7, #2]
 800229e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	887a      	ldrh	r2, [r7, #2]
 80022b2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022c8:	d802      	bhi.n	80022d0 <HAL_SPI_TransmitReceive+0xe6>
 80022ca:	8a3b      	ldrh	r3, [r7, #16]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d908      	bls.n	80022e2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	e007      	b.n	80022f2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022f0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d007      	beq.n	8002310 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800230e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002318:	f240 8081 	bls.w	800241e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_SPI_TransmitReceive+0x140>
 8002324:	8a7b      	ldrh	r3, [r7, #18]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d16d      	bne.n	8002406 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	881a      	ldrh	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	1c9a      	adds	r2, r3, #2
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800234e:	e05a      	b.n	8002406 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b02      	cmp	r3, #2
 800235c:	d11b      	bne.n	8002396 <HAL_SPI_TransmitReceive+0x1ac>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d016      	beq.n	8002396 <HAL_SPI_TransmitReceive+0x1ac>
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	2b01      	cmp	r3, #1
 800236c:	d113      	bne.n	8002396 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	881a      	ldrh	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237e:	1c9a      	adds	r2, r3, #2
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d11c      	bne.n	80023de <HAL_SPI_TransmitReceive+0x1f4>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d016      	beq.n	80023de <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	b292      	uxth	r2, r2
 80023bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	1c9a      	adds	r2, r3, #2
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023da:	2301      	movs	r3, #1
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023de:	f7fe fa61 	bl	80008a4 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d80b      	bhi.n	8002406 <HAL_SPI_TransmitReceive+0x21c>
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d007      	beq.n	8002406 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002404:	e109      	b.n	800261a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d19f      	bne.n	8002350 <HAL_SPI_TransmitReceive+0x166>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d199      	bne.n	8002350 <HAL_SPI_TransmitReceive+0x166>
 800241c:	e0e3      	b.n	80025e6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_SPI_TransmitReceive+0x244>
 8002426:	8a7b      	ldrh	r3, [r7, #18]
 8002428:	2b01      	cmp	r3, #1
 800242a:	f040 80cf 	bne.w	80025cc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d912      	bls.n	800245e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	881a      	ldrh	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	1c9a      	adds	r2, r3, #2
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b02      	subs	r3, #2
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800245c:	e0b6      	b.n	80025cc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002484:	e0a2      	b.n	80025cc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b02      	cmp	r3, #2
 8002492:	d134      	bne.n	80024fe <HAL_SPI_TransmitReceive+0x314>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d02f      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x314>
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d12c      	bne.n	80024fe <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d912      	bls.n	80024d4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	881a      	ldrh	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024be:	1c9a      	adds	r2, r3, #2
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b02      	subs	r3, #2
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024d2:	e012      	b.n	80024fa <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d148      	bne.n	800259e <HAL_SPI_TransmitReceive+0x3b4>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d042      	beq.n	800259e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d923      	bls.n	800256c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	b292      	uxth	r2, r2
 8002530:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	1c9a      	adds	r2, r3, #2
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b02      	subs	r3, #2
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d81f      	bhi.n	800259a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	e016      	b.n	800259a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f103 020c 	add.w	r2, r3, #12
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	7812      	ldrb	r2, [r2, #0]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800259a:	2301      	movs	r3, #1
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800259e:	f7fe f981 	bl	80008a4 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d803      	bhi.n	80025b6 <HAL_SPI_TransmitReceive+0x3cc>
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d102      	bne.n	80025bc <HAL_SPI_TransmitReceive+0x3d2>
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80025ca:	e026      	b.n	800261a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f47f af57 	bne.w	8002486 <HAL_SPI_TransmitReceive+0x29c>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f47f af50 	bne.w	8002486 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 faaa 	bl	8002b44 <SPI_EndRxTxTransaction>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002610:	e003      	b.n	800261a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002626:	4618      	mov	r0, r3
 8002628:	3728      	adds	r7, #40	; 0x28
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10e      	bne.n	8002670 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002658:	2b00      	cmp	r3, #0
 800265a:	d009      	beq.n	8002670 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d004      	beq.n	8002670 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	4798      	blx	r3
    return;
 800266e:	e0ce      	b.n	800280e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_SPI_IRQHandler+0x5e>
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	4798      	blx	r3
    return;
 800268c:	e0bf      	b.n	800280e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <HAL_SPI_IRQHandler+0x7e>
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80b0 	beq.w	800280e <HAL_SPI_IRQHandler+0x1de>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80aa 	beq.w	800280e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d023      	beq.n	800270c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d011      	beq.n	80026f4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d4:	f043 0204 	orr.w	r2, r3, #4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	e00b      	b.n	800270c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]
        return;
 800270a:	e080      	b.n	800280e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b00      	cmp	r3, #0
 8002714:	d014      	beq.n	8002740 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	f043 0201 	orr.w	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274e:	f043 0208 	orr.w	r2, r3, #8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002768:	2b00      	cmp	r3, #0
 800276a:	d04f      	beq.n	800280c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800277a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d104      	bne.n	8002798 <HAL_SPI_IRQHandler+0x168>
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d034      	beq.n	8002802 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0203 	bic.w	r2, r2, #3
 80027a6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d011      	beq.n	80027d4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	4a17      	ldr	r2, [pc, #92]	; (8002814 <HAL_SPI_IRQHandler+0x1e4>)
 80027b6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe f98e 	bl	8000ade <HAL_DMA_Abort_IT>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d016      	beq.n	800280a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <HAL_SPI_IRQHandler+0x1e4>)
 80027e2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe f978 	bl	8000ade <HAL_DMA_Abort_IT>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002800:	e003      	b.n	800280a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f808 	bl	8002818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002808:	e000      	b.n	800280c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800280a:	bf00      	nop
    return;
 800280c:	bf00      	nop
  }
}
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	0800282d 	.word	0x0800282d

08002818 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff ffe5 	bl	8002818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002868:	f7fe f81c 	bl	80008a4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	4413      	add	r3, r2
 8002876:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002878:	f7fe f814 	bl	80008a4 <HAL_GetTick>
 800287c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800287e:	4b39      	ldr	r3, [pc, #228]	; (8002964 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	015b      	lsls	r3, r3, #5
 8002884:	0d1b      	lsrs	r3, r3, #20
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800288e:	e054      	b.n	800293a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002896:	d050      	beq.n	800293a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002898:	f7fe f804 	bl	80008a4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d902      	bls.n	80028ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d13d      	bne.n	800292a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028c6:	d111      	bne.n	80028ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d0:	d004      	beq.n	80028dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	d107      	bne.n	80028ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f4:	d10f      	bne.n	8002916 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002914:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e017      	b.n	800295a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3b01      	subs	r3, #1
 8002938:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4013      	ands	r3, r2
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	429a      	cmp	r2, r3
 8002948:	bf0c      	ite	eq
 800294a:	2301      	moveq	r3, #1
 800294c:	2300      	movne	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	429a      	cmp	r2, r3
 8002956:	d19b      	bne.n	8002890 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000

08002968 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800297a:	f7fd ff93 	bl	80008a4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	4413      	add	r3, r2
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800298a:	f7fd ff8b 	bl	80008a4 <HAL_GetTick>
 800298e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002998:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00da      	lsls	r2, r3, #3
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	0d1b      	lsrs	r3, r3, #20
 80029a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80029b0:	e060      	b.n	8002a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80029b8:	d107      	bne.n	80029ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d050      	beq.n	8002a74 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029d2:	f7fd ff67 	bl	80008a4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029de:	429a      	cmp	r2, r3
 80029e0:	d902      	bls.n	80029e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d13d      	bne.n	8002a64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a00:	d111      	bne.n	8002a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0a:	d004      	beq.n	8002a16 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a14:	d107      	bne.n	8002a26 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2e:	d10f      	bne.n	8002a50 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e010      	b.n	8002a86 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d196      	bne.n	80029b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3728      	adds	r7, #40	; 0x28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000000 	.word	0x20000000

08002a94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa8:	d111      	bne.n	8002ace <SPI_EndRxTransaction+0x3a>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab2:	d004      	beq.n	8002abe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002abc:	d107      	bne.n	8002ace <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002acc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff febd 	bl	8002858 <SPI_WaitFlagStateUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e023      	b.n	8002b3c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002afc:	d11d      	bne.n	8002b3a <SPI_EndRxTransaction+0xa6>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b06:	d004      	beq.n	8002b12 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b10:	d113      	bne.n	8002b3a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7ff ff22 	bl	8002968 <SPI_WaitFifoStateUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e000      	b.n	8002b3c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f7ff ff03 	bl	8002968 <SPI_WaitFifoStateUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e027      	b.n	8002bc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff fe68 	bl	8002858 <SPI_WaitFlagStateUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e014      	b.n	8002bc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff fedc 	bl	8002968 <SPI_WaitFifoStateUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bba:	f043 0220 	orr.w	r2, r3, #32
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e000      	b.n	8002bc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <memset>:
 8002bd0:	4402      	add	r2, r0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d100      	bne.n	8002bda <memset+0xa>
 8002bd8:	4770      	bx	lr
 8002bda:	f803 1b01 	strb.w	r1, [r3], #1
 8002bde:	e7f9      	b.n	8002bd4 <memset+0x4>

08002be0 <__libc_init_array>:
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	4d0d      	ldr	r5, [pc, #52]	; (8002c18 <__libc_init_array+0x38>)
 8002be4:	4c0d      	ldr	r4, [pc, #52]	; (8002c1c <__libc_init_array+0x3c>)
 8002be6:	1b64      	subs	r4, r4, r5
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	2600      	movs	r6, #0
 8002bec:	42a6      	cmp	r6, r4
 8002bee:	d109      	bne.n	8002c04 <__libc_init_array+0x24>
 8002bf0:	4d0b      	ldr	r5, [pc, #44]	; (8002c20 <__libc_init_array+0x40>)
 8002bf2:	4c0c      	ldr	r4, [pc, #48]	; (8002c24 <__libc_init_array+0x44>)
 8002bf4:	f000 f818 	bl	8002c28 <_init>
 8002bf8:	1b64      	subs	r4, r4, r5
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	2600      	movs	r6, #0
 8002bfe:	42a6      	cmp	r6, r4
 8002c00:	d105      	bne.n	8002c0e <__libc_init_array+0x2e>
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
 8002c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c08:	4798      	blx	r3
 8002c0a:	3601      	adds	r6, #1
 8002c0c:	e7ee      	b.n	8002bec <__libc_init_array+0xc>
 8002c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c12:	4798      	blx	r3
 8002c14:	3601      	adds	r6, #1
 8002c16:	e7f2      	b.n	8002bfe <__libc_init_array+0x1e>
 8002c18:	08002c88 	.word	0x08002c88
 8002c1c:	08002c88 	.word	0x08002c88
 8002c20:	08002c88 	.word	0x08002c88
 8002c24:	08002c8c 	.word	0x08002c8c

08002c28 <_init>:
 8002c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2a:	bf00      	nop
 8002c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2e:	bc08      	pop	{r3}
 8002c30:	469e      	mov	lr, r3
 8002c32:	4770      	bx	lr

08002c34 <_fini>:
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	bf00      	nop
 8002c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3a:	bc08      	pop	{r3}
 8002c3c:	469e      	mov	lr, r3
 8002c3e:	4770      	bx	lr
