
flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b7c  08002b7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b7c  08002b7c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b7c  08002b7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002b90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002b90  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000075b8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001744  00000000  00000000  00027637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  00028d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d1  00000000  00000000  00029548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020466  00000000  00000000  00029b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c0d  00000000  00000000  00049f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3c03  00000000  00000000  00052b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e5c  00000000  00000000  00116790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001185ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002b1c 	.word	0x08002b1c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002b1c 	.word	0x08002b1c

080001d4 <W25Q128JV_WriteEnable>:
#define CMD_READ          0x03
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void W25Q128JV_WriteEnable(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    uint8_t cmd = CMD_WRITE_ENABLE;
 80001da:	2306      	movs	r3, #6
 80001dc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 80001de:	2200      	movs	r2, #0
 80001e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e8:	f000 fdae 	bl	8000d48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80001ec:	1df9      	adds	r1, r7, #7
 80001ee:	f04f 33ff 	mov.w	r3, #4294967295
 80001f2:	2201      	movs	r2, #1
 80001f4:	4806      	ldr	r0, [pc, #24]	; (8000210 <W25Q128JV_WriteEnable+0x3c>)
 80001f6:	f001 fcc6 	bl	8001b86 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000204:	f000 fda0 	bl	8000d48 <HAL_GPIO_WritePin>
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000028 	.word	0x20000028

08000214 <PageProgram>:

void PageProgram(uint32_t address, uint8_t *data, uint16_t length) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	4613      	mov	r3, r2
 8000220:	80fb      	strh	r3, [r7, #6]
    W25Q128JV_WriteEnable();
 8000222:	f7ff ffd7 	bl	80001d4 <W25Q128JV_WriteEnable>

    uint8_t cmd[4];
    cmd[0] = CMD_PAGE_PROGRAM;
 8000226:	2302      	movs	r3, #2
 8000228:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	0c1b      	lsrs	r3, r3, #16
 800022e:	b2db      	uxtb	r3, r3
 8000230:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	0a1b      	lsrs	r3, r3, #8
 8000236:	b2db      	uxtb	r3, r3
 8000238:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	b2db      	uxtb	r3, r3
 800023e:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 8000240:	2200      	movs	r2, #0
 8000242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024a:	f000 fd7d 	bl	8000d48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 800024e:	f107 0114 	add.w	r1, r7, #20
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
 8000256:	2204      	movs	r2, #4
 8000258:	480a      	ldr	r0, [pc, #40]	; (8000284 <PageProgram+0x70>)
 800025a:	f001 fc94 	bl	8001b86 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, data, length, HAL_MAX_DELAY);
 800025e:	88fa      	ldrh	r2, [r7, #6]
 8000260:	f04f 33ff 	mov.w	r3, #4294967295
 8000264:	68b9      	ldr	r1, [r7, #8]
 8000266:	4807      	ldr	r0, [pc, #28]	; (8000284 <PageProgram+0x70>)
 8000268:	f001 fc8d 	bl	8001b86 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000276:	f000 fd67 	bl	8000d48 <HAL_GPIO_WritePin>
}
 800027a:	bf00      	nop
 800027c:	3718      	adds	r7, #24
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000028 	.word	0x20000028

08000288 <Read>:

void Read(uint32_t address, uint8_t *data, uint16_t length) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	4613      	mov	r3, r2
 8000294:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4];
    cmd[0] = CMD_READ;
 8000296:	2303      	movs	r3, #3
 8000298:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	0c1b      	lsrs	r3, r3, #16
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	75fb      	strb	r3, [r7, #23]

    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); // CS low
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ba:	f000 fd45 	bl	8000d48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 80002be:	f107 0114 	add.w	r1, r7, #20
 80002c2:	f04f 33ff 	mov.w	r3, #4294967295
 80002c6:	2204      	movs	r2, #4
 80002c8:	480a      	ldr	r0, [pc, #40]	; (80002f4 <Read+0x6c>)
 80002ca:	f001 fc5c 	bl	8001b86 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, data, length, HAL_MAX_DELAY);
 80002ce:	88fa      	ldrh	r2, [r7, #6]
 80002d0:	f04f 33ff 	mov.w	r3, #4294967295
 80002d4:	68b9      	ldr	r1, [r7, #8]
 80002d6:	4807      	ldr	r0, [pc, #28]	; (80002f4 <Read+0x6c>)
 80002d8:	f001 fdca 	bl	8001e70 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET); // CS high
 80002dc:	2201      	movs	r2, #1
 80002de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e6:	f000 fd2f 	bl	8000d48 <HAL_GPIO_WritePin>
}
 80002ea:	bf00      	nop
 80002ec:	3718      	adds	r7, #24
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000028 	.word	0x20000028

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fe:	f000 f9e2 	bl	80006c6 <HAL_Init>
      SystemClock_Config();
 8000302:	f000 f821 	bl	8000348 <SystemClock_Config>
      MX_GPIO_Init();
 8000306:	f000 f8a3 	bl	8000450 <MX_GPIO_Init>
      MX_SPI2_Init();
 800030a:	f000 f863 	bl	80003d4 <MX_SPI2_Init>

      uint8_t data[] = {0xAA, 0xBB, 0xFF, 0xDD, 0xCC};
 800030e:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <main+0x4c>)
 8000310:	f107 0308 	add.w	r3, r7, #8
 8000314:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000318:	6018      	str	r0, [r3, #0]
 800031a:	3304      	adds	r3, #4
 800031c:	7019      	strb	r1, [r3, #0]
      uint8_t data_read[5];

      PageProgram(0x500000, data, sizeof(data));
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	2205      	movs	r2, #5
 8000324:	4619      	mov	r1, r3
 8000326:	f44f 00a0 	mov.w	r0, #5242880	; 0x500000
 800032a:	f7ff ff73 	bl	8000214 <PageProgram>
      Read(0x500000, data_read, sizeof(data));
 800032e:	463b      	mov	r3, r7
 8000330:	2205      	movs	r2, #5
 8000332:	4619      	mov	r1, r3
 8000334:	f44f 00a0 	mov.w	r0, #5242880	; 0x500000
 8000338:	f7ff ffa6 	bl	8000288 <Read>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033c:	f000 f804 	bl	8000348 <SystemClock_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000340:	e7fe      	b.n	8000340 <main+0x48>
 8000342:	bf00      	nop
 8000344:	08002b34 	.word	0x08002b34

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b096      	sub	sp, #88	; 0x58
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0314 	add.w	r3, r7, #20
 8000352:	2244      	movs	r2, #68	; 0x44
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f002 fbb4 	bl	8002ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	463b      	mov	r3, r7
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800036a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800036e:	f000 fd11 	bl	8000d94 <HAL_PWREx_ControlVoltageScaling>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000378:	f000 f8c0 	bl	80004fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800037c:	2310      	movs	r3, #16
 800037e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000380:	2301      	movs	r3, #1
 8000382:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000388:	2360      	movs	r3, #96	; 0x60
 800038a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038c:	2300      	movs	r3, #0
 800038e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000390:	f107 0314 	add.w	r3, r7, #20
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fd53 	bl	8000e40 <HAL_RCC_OscConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80003a0:	f000 f8ac 	bl	80004fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a4:	230f      	movs	r3, #15
 80003a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b8:	463b      	mov	r3, r7
 80003ba:	2100      	movs	r1, #0
 80003bc:	4618      	mov	r0, r3
 80003be:	f001 f953 	bl	8001668 <HAL_RCC_ClockConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003c8:	f000 f898 	bl	80004fc <Error_Handler>
  }
}
 80003cc:	bf00      	nop
 80003ce:	3758      	adds	r7, #88	; 0x58
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_SPI2_Init+0x74>)
 80003da:	4a1c      	ldr	r2, [pc, #112]	; (800044c <MX_SPI2_Init+0x78>)
 80003dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <MX_SPI2_Init+0x74>)
 80003e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_SPI2_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <MX_SPI2_Init+0x74>)
 80003ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <MX_SPI2_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <MX_SPI2_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <MX_SPI2_Init+0x74>)
 8000402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000406:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_SPI2_Init+0x74>)
 800040a:	2228      	movs	r2, #40	; 0x28
 800040c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <MX_SPI2_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000414:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_SPI2_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <MX_SPI2_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_SPI2_Init+0x74>)
 8000422:	2207      	movs	r2, #7
 8000424:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <MX_SPI2_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_SPI2_Init+0x74>)
 800042e:	2200      	movs	r2, #0
 8000430:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_SPI2_Init+0x74>)
 8000434:	f001 fb04 	bl	8001a40 <HAL_SPI_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800043e:	f000 f85d 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000028 	.word	0x20000028
 800044c:	40003800 	.word	0x40003800

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	f107 030c 	add.w	r3, r7, #12
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000466:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <MX_GPIO_Init+0xa4>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046a:	4a22      	ldr	r2, [pc, #136]	; (80004f4 <MX_GPIO_Init+0xa4>)
 800046c:	f043 0302 	orr.w	r3, r3, #2
 8000470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000472:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <MX_GPIO_Init+0xa4>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000476:	f003 0302 	and.w	r3, r3, #2
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b1d      	ldr	r3, [pc, #116]	; (80004f4 <MX_GPIO_Init+0xa4>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	4a1c      	ldr	r2, [pc, #112]	; (80004f4 <MX_GPIO_Init+0xa4>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800048a:	4b1a      	ldr	r3, [pc, #104]	; (80004f4 <MX_GPIO_Init+0xa4>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f000 fc52 	bl	8000d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2120      	movs	r1, #32
 80004a8:	4813      	ldr	r0, [pc, #76]	; (80004f8 <MX_GPIO_Init+0xa8>)
 80004aa:	f000 fc4d 	bl	8000d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 80004ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b4:	2301      	movs	r3, #1
 80004b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004bc:	2303      	movs	r3, #3
 80004be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	4619      	mov	r1, r3
 80004c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ca:	f000 fac3 	bl	8000a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004ce:	2320      	movs	r3, #32
 80004d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004da:	2303      	movs	r3, #3
 80004dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	4619      	mov	r1, r3
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <MX_GPIO_Init+0xa8>)
 80004e6:	f000 fab5 	bl	8000a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ea:	bf00      	nop
 80004ec:	3720      	adds	r7, #32
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	48000400 	.word	0x48000400

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
}
 8000502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000504:	e7fe      	b.n	8000504 <Error_Handler+0x8>
	...

08000508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_MspInit+0x44>)
 8000510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <HAL_MspInit+0x44>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6613      	str	r3, [r2, #96]	; 0x60
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_MspInit+0x44>)
 800051c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <HAL_MspInit+0x44>)
 8000528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800052a:	4a08      	ldr	r2, [pc, #32]	; (800054c <HAL_MspInit+0x44>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000530:	6593      	str	r3, [r2, #88]	; 0x58
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_MspInit+0x44>)
 8000534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <HAL_SPI_MspInit+0x8c>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d130      	bne.n	80005d4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000572:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <HAL_SPI_MspInit+0x90>)
 8000574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000576:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <HAL_SPI_MspInit+0x90>)
 8000578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057c:	6593      	str	r3, [r2, #88]	; 0x58
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_SPI_MspInit+0x90>)
 8000580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_SPI_MspInit+0x90>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <HAL_SPI_MspInit+0x90>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_SPI_MspInit+0x90>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MISO_Pin|MOSI_Pin;
 80005a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80005a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005b4:	2305      	movs	r3, #5
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <HAL_SPI_MspInit+0x94>)
 80005c0:	f000 fa48 	bl	8000a54 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	2024      	movs	r0, #36	; 0x24
 80005ca:	f000 f9cc 	bl	8000966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80005ce:	2024      	movs	r0, #36	; 0x24
 80005d0:	f000 f9e5 	bl	800099e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80005d4:	bf00      	nop
 80005d6:	3728      	adds	r7, #40	; 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40003800 	.word	0x40003800
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000400 	.word	0x48000400

080005e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005ec:	e7fe      	b.n	80005ec <NMI_Handler+0x4>

080005ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <MemManage_Handler+0x4>

080005fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <BusFault_Handler+0x4>

08000600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <UsageFault_Handler+0x4>

08000606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 f89c 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <SPI2_IRQHandler+0x10>)
 8000642:	f001 ff6f 	bl	8002524 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000028 	.word	0x20000028

08000650 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <SystemInit+0x20>)
 8000656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800065a:	4a05      	ldr	r2, [pc, #20]	; (8000670 <SystemInit+0x20>)
 800065c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000678:	f7ff ffea 	bl	8000650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800067e:	490d      	ldr	r1, [pc, #52]	; (80006b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <LoopForever+0xe>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000694:	4c0a      	ldr	r4, [pc, #40]	; (80006c0 <LoopForever+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006a2:	f002 fa17 	bl	8002ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006a6:	f7ff fe27 	bl	80002f8 <main>

080006aa <LoopForever>:

LoopForever:
    b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006ac:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b8:	08002b84 	.word	0x08002b84
  ldr r2, =_sbss
 80006bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c0:	20000090 	.word	0x20000090

080006c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC1_IRQHandler>

080006c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006cc:	2300      	movs	r3, #0
 80006ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f93d 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d6:	200f      	movs	r0, #15
 80006d8:	f000 f80e 	bl	80006f8 <HAL_InitTick>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	71fb      	strb	r3, [r7, #7]
 80006e6:	e001      	b.n	80006ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006e8:	f7ff ff0e 	bl	8000508 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <HAL_InitTick+0x6c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d023      	beq.n	8000754 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <HAL_InitTick+0x70>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_InitTick+0x6c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071a:	fbb3 f3f1 	udiv	r3, r3, r1
 800071e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f949 	bl	80009ba <HAL_SYSTICK_Config>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d10f      	bne.n	800074e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d809      	bhi.n	8000748 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000734:	2200      	movs	r2, #0
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f000 f913 	bl	8000966 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000740:	4a0a      	ldr	r2, [pc, #40]	; (800076c <HAL_InitTick+0x74>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	e007      	b.n	8000758 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
 800074c:	e004      	b.n	8000758 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	73fb      	strb	r3, [r7, #15]
 8000752:	e001      	b.n	8000758 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000758:	7bfb      	ldrb	r3, [r7, #15]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000008 	.word	0x20000008
 8000768:	20000000 	.word	0x20000000
 800076c:	20000004 	.word	0x20000004

08000770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x20>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_IncTick+0x24>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <HAL_IncTick+0x24>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000008 	.word	0x20000008
 8000794:	2000008c 	.word	0x2000008c

08000798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <HAL_GetTick+0x14>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	2000008c 	.word	0x2000008c

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4907      	ldr	r1, [pc, #28]	; (800084c <__NVIC_EnableIRQ+0x38>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100

08000850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	2b00      	cmp	r3, #0
 8000862:	db0a      	blt.n	800087a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	490c      	ldr	r1, [pc, #48]	; (800089c <__NVIC_SetPriority+0x4c>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	0112      	lsls	r2, r2, #4
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	440b      	add	r3, r1
 8000874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000878:	e00a      	b.n	8000890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <__NVIC_SetPriority+0x50>)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	3b04      	subs	r3, #4
 8000888:	0112      	lsls	r2, r2, #4
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	440b      	add	r3, r1
 800088e:	761a      	strb	r2, [r3, #24]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f1c3 0307 	rsb	r3, r3, #7
 80008be:	2b04      	cmp	r3, #4
 80008c0:	bf28      	it	cs
 80008c2:	2304      	movcs	r3, #4
 80008c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3304      	adds	r3, #4
 80008ca:	2b06      	cmp	r3, #6
 80008cc:	d902      	bls.n	80008d4 <NVIC_EncodePriority+0x30>
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3b03      	subs	r3, #3
 80008d2:	e000      	b.n	80008d6 <NVIC_EncodePriority+0x32>
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43da      	mvns	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	401a      	ands	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ec:	f04f 31ff 	mov.w	r1, #4294967295
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43d9      	mvns	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	4313      	orrs	r3, r2
         );
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3724      	adds	r7, #36	; 0x24
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800091c:	d301      	bcc.n	8000922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091e:	2301      	movs	r3, #1
 8000920:	e00f      	b.n	8000942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <SysTick_Config+0x40>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092a:	210f      	movs	r1, #15
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f7ff ff8e 	bl	8000850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <SysTick_Config+0x40>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <SysTick_Config+0x40>)
 800093c:	2207      	movs	r2, #7
 800093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff29 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000978:	f7ff ff3e 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 800097c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	6978      	ldr	r0, [r7, #20]
 8000984:	f7ff ff8e 	bl	80008a4 <NVIC_EncodePriority>
 8000988:	4602      	mov	r2, r0
 800098a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff5d 	bl	8000850 <__NVIC_SetPriority>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff31 	bl	8000814 <__NVIC_EnableIRQ>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffa2 	bl	800090c <SysTick_Config>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d005      	beq.n	80009f6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2204      	movs	r2, #4
 80009ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e029      	b.n	8000a4a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f022 020e 	bic.w	r2, r2, #14
 8000a04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 0201 	bic.w	r2, r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f003 021c 	and.w	r2, r3, #28
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	2101      	movs	r1, #1
 8000a24:	fa01 f202 	lsl.w	r2, r1, r2
 8000a28:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	4798      	blx	r3
    }
  }
  return status;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	e154      	b.n	8000d0e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	2101      	movs	r1, #1
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f000 8146 	beq.w	8000d08 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d005      	beq.n	8000a94 <HAL_GPIO_Init+0x40>
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d130      	bne.n	8000af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aca:	2201      	movs	r2, #1
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	091b      	lsrs	r3, r3, #4
 8000ae0:	f003 0201 	and.w	r2, r3, #1
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 0303 	and.w	r3, r3, #3
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d017      	beq.n	8000b32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d123      	bne.n	8000b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	08da      	lsrs	r2, r3, #3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3208      	adds	r2, #8
 8000b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	220f      	movs	r2, #15
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	691a      	ldr	r2, [r3, #16]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	08da      	lsrs	r2, r3, #3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3208      	adds	r2, #8
 8000b80:	6939      	ldr	r1, [r7, #16]
 8000b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2203      	movs	r2, #3
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0203 	and.w	r2, r3, #3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 80a0 	beq.w	8000d08 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc8:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <HAL_GPIO_Init+0x2d8>)
 8000bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bcc:	4a57      	ldr	r2, [pc, #348]	; (8000d2c <HAL_GPIO_Init+0x2d8>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd4:	4b55      	ldr	r3, [pc, #340]	; (8000d2c <HAL_GPIO_Init+0x2d8>)
 8000bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000be0:	4a53      	ldr	r2, [pc, #332]	; (8000d30 <HAL_GPIO_Init+0x2dc>)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	089b      	lsrs	r3, r3, #2
 8000be6:	3302      	adds	r3, #2
 8000be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c0a:	d019      	beq.n	8000c40 <HAL_GPIO_Init+0x1ec>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a49      	ldr	r2, [pc, #292]	; (8000d34 <HAL_GPIO_Init+0x2e0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d013      	beq.n	8000c3c <HAL_GPIO_Init+0x1e8>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a48      	ldr	r2, [pc, #288]	; (8000d38 <HAL_GPIO_Init+0x2e4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d00d      	beq.n	8000c38 <HAL_GPIO_Init+0x1e4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a47      	ldr	r2, [pc, #284]	; (8000d3c <HAL_GPIO_Init+0x2e8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0x1e0>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a46      	ldr	r2, [pc, #280]	; (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <HAL_GPIO_Init+0x1dc>
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	e008      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c30:	2307      	movs	r3, #7
 8000c32:	e006      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c34:	2303      	movs	r3, #3
 8000c36:	e004      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e002      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e000      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c40:	2300      	movs	r3, #0
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	f002 0203 	and.w	r2, r2, #3
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	4093      	lsls	r3, r2
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c52:	4937      	ldr	r1, [pc, #220]	; (8000d30 <HAL_GPIO_Init+0x2dc>)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3302      	adds	r3, #2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c60:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <HAL_GPIO_Init+0x2f0>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c84:	4a2f      	ldr	r2, [pc, #188]	; (8000d44 <HAL_GPIO_Init+0x2f0>)
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <HAL_GPIO_Init+0x2f0>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cae:	4a25      	ldr	r2, [pc, #148]	; (8000d44 <HAL_GPIO_Init+0x2f0>)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <HAL_GPIO_Init+0x2f0>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cd8:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <HAL_GPIO_Init+0x2f0>)
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_GPIO_Init+0x2f0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_GPIO_Init+0x2f0>)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	fa22 f303 	lsr.w	r3, r2, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f47f aea3 	bne.w	8000a64 <HAL_GPIO_Init+0x10>
  }
}
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
 8000d22:	371c      	adds	r7, #28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000
 8000d34:	48000400 	.word	0x48000400
 8000d38:	48000800 	.word	0x48000800
 8000d3c:	48000c00 	.word	0x48000c00
 8000d40:	48001000 	.word	0x48001000
 8000d44:	40010400 	.word	0x40010400

08000d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]
 8000d54:	4613      	mov	r3, r2
 8000d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d58:	787b      	ldrb	r3, [r7, #1]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d5e:	887a      	ldrh	r2, [r7, #2]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d64:	e002      	b.n	8000d6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d66:	887a      	ldrh	r2, [r7, #2]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40007000 	.word	0x40007000

08000d94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000da2:	d130      	bne.n	8000e06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000db0:	d038      	beq.n	8000e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dba:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2232      	movs	r2, #50	; 0x32
 8000dc8:	fb02 f303 	mul.w	r3, r2, r3
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	0c9b      	lsrs	r3, r3, #18
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dd8:	e002      	b.n	8000de0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dec:	d102      	bne.n	8000df4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1f2      	bne.n	8000dda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e00:	d110      	bne.n	8000e24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e00f      	b.n	8000e26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e12:	d007      	beq.n	8000e24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e1c:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40007000 	.word	0x40007000
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	431bde83 	.word	0x431bde83

08000e40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d102      	bne.n	8000e54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f000 bc02 	b.w	8001658 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e54:	4b96      	ldr	r3, [pc, #600]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e5e:	4b94      	ldr	r3, [pc, #592]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 80e4 	beq.w	800103e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d007      	beq.n	8000e8c <HAL_RCC_OscConfig+0x4c>
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2b0c      	cmp	r3, #12
 8000e80:	f040 808b 	bne.w	8000f9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	f040 8087 	bne.w	8000f9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e8c:	4b88      	ldr	r3, [pc, #544]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x64>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d101      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e3d9      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a1a      	ldr	r2, [r3, #32]
 8000ea8:	4b81      	ldr	r3, [pc, #516]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d004      	beq.n	8000ebe <HAL_RCC_OscConfig+0x7e>
 8000eb4:	4b7e      	ldr	r3, [pc, #504]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ebc:	e005      	b.n	8000eca <HAL_RCC_OscConfig+0x8a>
 8000ebe:	4b7c      	ldr	r3, [pc, #496]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d223      	bcs.n	8000f16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fd54 	bl	8001980 <RCC_SetFlashLatencyFromMSIRange>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e3ba      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ee2:	4b73      	ldr	r3, [pc, #460]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a72      	ldr	r2, [pc, #456]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	4b70      	ldr	r3, [pc, #448]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	496d      	ldr	r1, [pc, #436]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000efc:	4313      	orrs	r3, r2
 8000efe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f00:	4b6b      	ldr	r3, [pc, #428]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	4968      	ldr	r1, [pc, #416]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000f10:	4313      	orrs	r3, r2
 8000f12:	604b      	str	r3, [r1, #4]
 8000f14:	e025      	b.n	8000f62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f16:	4b66      	ldr	r3, [pc, #408]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a65      	ldr	r2, [pc, #404]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b63      	ldr	r3, [pc, #396]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4960      	ldr	r1, [pc, #384]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000f30:	4313      	orrs	r3, r2
 8000f32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f34:	4b5e      	ldr	r3, [pc, #376]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	495b      	ldr	r1, [pc, #364]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d109      	bne.n	8000f62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fd14 	bl	8001980 <RCC_SetFlashLatencyFromMSIRange>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e37a      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f62:	f000 fc81 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 8000f66:	4602      	mov	r2, r0
 8000f68:	4b51      	ldr	r3, [pc, #324]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	4950      	ldr	r1, [pc, #320]	; (80010b4 <HAL_RCC_OscConfig+0x274>)
 8000f74:	5ccb      	ldrb	r3, [r1, r3]
 8000f76:	f003 031f 	and.w	r3, r3, #31
 8000f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7e:	4a4e      	ldr	r2, [pc, #312]	; (80010b8 <HAL_RCC_OscConfig+0x278>)
 8000f80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f82:	4b4e      	ldr	r3, [pc, #312]	; (80010bc <HAL_RCC_OscConfig+0x27c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fbb6 	bl	80006f8 <HAL_InitTick>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d052      	beq.n	800103c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	e35e      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d032      	beq.n	8001008 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fa2:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a42      	ldr	r2, [pc, #264]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fbf3 	bl	8000798 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fb6:	f7ff fbef 	bl	8000798 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e347      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fc8:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fd4:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a35      	ldr	r2, [pc, #212]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4930      	ldr	r1, [pc, #192]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	492b      	ldr	r1, [pc, #172]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8001002:	4313      	orrs	r3, r2
 8001004:	604b      	str	r3, [r1, #4]
 8001006:	e01a      	b.n	800103e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a28      	ldr	r2, [pc, #160]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 800100e:	f023 0301 	bic.w	r3, r3, #1
 8001012:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001014:	f7ff fbc0 	bl	8000798 <HAL_GetTick>
 8001018:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800101a:	e008      	b.n	800102e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800101c:	f7ff fbbc 	bl	8000798 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e314      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x1dc>
 800103a:	e000      	b.n	800103e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800103c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d073      	beq.n	8001132 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b08      	cmp	r3, #8
 800104e:	d005      	beq.n	800105c <HAL_RCC_OscConfig+0x21c>
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b0c      	cmp	r3, #12
 8001054:	d10e      	bne.n	8001074 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b03      	cmp	r3, #3
 800105a:	d10b      	bne.n	8001074 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d063      	beq.n	8001130 <HAL_RCC_OscConfig+0x2f0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d15f      	bne.n	8001130 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e2f1      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107c:	d106      	bne.n	800108c <HAL_RCC_OscConfig+0x24c>
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8001084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e025      	b.n	80010d8 <HAL_RCC_OscConfig+0x298>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001094:	d114      	bne.n	80010c0 <HAL_RCC_OscConfig+0x280>
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a02      	ldr	r2, [pc, #8]	; (80010b0 <HAL_RCC_OscConfig+0x270>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e013      	b.n	80010d8 <HAL_RCC_OscConfig+0x298>
 80010b0:	40021000 	.word	0x40021000
 80010b4:	08002b3c 	.word	0x08002b3c
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000004 	.word	0x20000004
 80010c0:	4ba0      	ldr	r3, [pc, #640]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a9f      	ldr	r2, [pc, #636]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80010c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	4b9d      	ldr	r3, [pc, #628]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a9c      	ldr	r2, [pc, #624]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80010d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d013      	beq.n	8001108 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e0:	f7ff fb5a 	bl	8000798 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010e8:	f7ff fb56 	bl	8000798 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b64      	cmp	r3, #100	; 0x64
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e2ae      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010fa:	4b92      	ldr	r3, [pc, #584]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0x2a8>
 8001106:	e014      	b.n	8001132 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001108:	f7ff fb46 	bl	8000798 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fb42 	bl	8000798 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e29a      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001122:	4b88      	ldr	r3, [pc, #544]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0x2d0>
 800112e:	e000      	b.n	8001132 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d060      	beq.n	8001200 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b04      	cmp	r3, #4
 8001142:	d005      	beq.n	8001150 <HAL_RCC_OscConfig+0x310>
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	2b0c      	cmp	r3, #12
 8001148:	d119      	bne.n	800117e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d116      	bne.n	800117e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001150:	4b7c      	ldr	r3, [pc, #496]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <HAL_RCC_OscConfig+0x328>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e277      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001168:	4b76      	ldr	r3, [pc, #472]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	061b      	lsls	r3, r3, #24
 8001176:	4973      	ldr	r1, [pc, #460]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800117c:	e040      	b.n	8001200 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d023      	beq.n	80011ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001186:	4b6f      	ldr	r3, [pc, #444]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6e      	ldr	r2, [pc, #440]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001192:	f7ff fb01 	bl	8000798 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119a:	f7ff fafd 	bl	8000798 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e255      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ac:	4b65      	ldr	r3, [pc, #404]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b8:	4b62      	ldr	r3, [pc, #392]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	061b      	lsls	r3, r3, #24
 80011c6:	495f      	ldr	r1, [pc, #380]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
 80011cc:	e018      	b.n	8001200 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ce:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a5c      	ldr	r2, [pc, #368]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80011d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011da:	f7ff fadd 	bl	8000798 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e2:	f7ff fad9 	bl	8000798 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e231      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f0      	bne.n	80011e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	2b00      	cmp	r3, #0
 800120a:	d03c      	beq.n	8001286 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d01c      	beq.n	800124e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001214:	4b4b      	ldr	r3, [pc, #300]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800121a:	4a4a      	ldr	r2, [pc, #296]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001224:	f7ff fab8 	bl	8000798 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122c:	f7ff fab4 	bl	8000798 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e20c      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0ef      	beq.n	800122c <HAL_RCC_OscConfig+0x3ec>
 800124c:	e01b      	b.n	8001286 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001254:	4a3b      	ldr	r2, [pc, #236]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001256:	f023 0301 	bic.w	r3, r3, #1
 800125a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125e:	f7ff fa9b 	bl	8000798 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff fa97 	bl	8000798 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e1ef      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001278:	4b32      	ldr	r3, [pc, #200]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 800127a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1ef      	bne.n	8001266 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 80a6 	beq.w	80013e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10d      	bne.n	80012c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ae:	6593      	str	r3, [r2, #88]	; 0x58
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012bc:	2301      	movs	r3, #1
 80012be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_RCC_OscConfig+0x508>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d118      	bne.n	80012fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_RCC_OscConfig+0x508>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_RCC_OscConfig+0x508>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d8:	f7ff fa5e 	bl	8000798 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e0:	f7ff fa5a 	bl	8000798 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e1b2      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_RCC_OscConfig+0x508>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_RCC_OscConfig+0x4d8>
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001316:	e029      	b.n	800136c <HAL_RCC_OscConfig+0x52c>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b05      	cmp	r3, #5
 800131e:	d115      	bne.n	800134c <HAL_RCC_OscConfig+0x50c>
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001326:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001336:	4a03      	ldr	r2, [pc, #12]	; (8001344 <HAL_RCC_OscConfig+0x504>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001340:	e014      	b.n	800136c <HAL_RCC_OscConfig+0x52c>
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	40007000 	.word	0x40007000
 800134c:	4b9a      	ldr	r3, [pc, #616]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 800134e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001352:	4a99      	ldr	r2, [pc, #612]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800135c:	4b96      	ldr	r3, [pc, #600]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 800135e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001362:	4a95      	ldr	r2, [pc, #596]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001364:	f023 0304 	bic.w	r3, r3, #4
 8001368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d016      	beq.n	80013a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001374:	f7ff fa10 	bl	8000798 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800137a:	e00a      	b.n	8001392 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137c:	f7ff fa0c 	bl	8000798 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f241 3288 	movw	r2, #5000	; 0x1388
 800138a:	4293      	cmp	r3, r2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e162      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001392:	4b89      	ldr	r3, [pc, #548]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0ed      	beq.n	800137c <HAL_RCC_OscConfig+0x53c>
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a2:	f7ff f9f9 	bl	8000798 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013a8:	e00a      	b.n	80013c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f7ff f9f5 	bl	8000798 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e14b      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c0:	4b7d      	ldr	r3, [pc, #500]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 80013c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1ed      	bne.n	80013aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ce:	7ffb      	ldrb	r3, [r7, #31]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d105      	bne.n	80013e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d4:	4b78      	ldr	r3, [pc, #480]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d8:	4a77      	ldr	r2, [pc, #476]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 80013da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d03c      	beq.n	8001466 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d01c      	beq.n	800142e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013f4:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 80013f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013fa:	4a6f      	ldr	r2, [pc, #444]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff f9c8 	bl	8000798 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800140c:	f7ff f9c4 	bl	8000798 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e11c      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800141e:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0ef      	beq.n	800140c <HAL_RCC_OscConfig+0x5cc>
 800142c:	e01b      	b.n	8001466 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800142e:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001434:	4a60      	ldr	r2, [pc, #384]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143e:	f7ff f9ab 	bl	8000798 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001446:	f7ff f9a7 	bl	8000798 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e0ff      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001458:	4b57      	ldr	r3, [pc, #348]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 800145a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ef      	bne.n	8001446 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80f3 	beq.w	8001656 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	2b02      	cmp	r3, #2
 8001476:	f040 80c9 	bne.w	800160c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800147a:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0203 	and.w	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	429a      	cmp	r2, r3
 800148c:	d12c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	3b01      	subs	r3, #1
 800149a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d123      	bne.n	80014e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d11b      	bne.n	80014e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014bc:	429a      	cmp	r2, r3
 80014be:	d113      	bne.n	80014e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	3b01      	subs	r3, #1
 80014ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d109      	bne.n	80014e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	085b      	lsrs	r3, r3, #1
 80014e0:	3b01      	subs	r3, #1
 80014e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d06b      	beq.n	80015c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b0c      	cmp	r3, #12
 80014ec:	d062      	beq.n	80015b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014ee:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e0ac      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001508:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800150a:	f7ff f945 	bl	8000798 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff f941 	bl	8000798 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e099      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f0      	bne.n	8001512 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_RCC_OscConfig+0x77c>)
 8001536:	4013      	ands	r3, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001540:	3a01      	subs	r2, #1
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	4311      	orrs	r1, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800154a:	0212      	lsls	r2, r2, #8
 800154c:	4311      	orrs	r1, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001552:	0852      	lsrs	r2, r2, #1
 8001554:	3a01      	subs	r2, #1
 8001556:	0552      	lsls	r2, r2, #21
 8001558:	4311      	orrs	r1, r2
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800155e:	0852      	lsrs	r2, r2, #1
 8001560:	3a01      	subs	r2, #1
 8001562:	0652      	lsls	r2, r2, #25
 8001564:	4311      	orrs	r1, r2
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800156a:	06d2      	lsls	r2, r2, #27
 800156c:	430a      	orrs	r2, r1
 800156e:	4912      	ldr	r1, [pc, #72]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001570:	4313      	orrs	r3, r2
 8001572:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 800157a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800157e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 8001586:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800158a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800158c:	f7ff f904 	bl	8000798 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff f900 	bl	8000798 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e058      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <HAL_RCC_OscConfig+0x778>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015b2:	e050      	b.n	8001656 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e04f      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
 80015b8:	40021000 	.word	0x40021000
 80015bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_RCC_OscConfig+0x820>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d144      	bne.n	8001656 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_OscConfig+0x820>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a23      	ldr	r2, [pc, #140]	; (8001660 <HAL_RCC_OscConfig+0x820>)
 80015d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <HAL_RCC_OscConfig+0x820>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4a20      	ldr	r2, [pc, #128]	; (8001660 <HAL_RCC_OscConfig+0x820>)
 80015de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015e4:	f7ff f8d8 	bl	8000798 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff f8d4 	bl	8000798 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e02c      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_RCC_OscConfig+0x820>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x7ac>
 800160a:	e024      	b.n	8001656 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b0c      	cmp	r3, #12
 8001610:	d01f      	beq.n	8001652 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_RCC_OscConfig+0x820>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <HAL_RCC_OscConfig+0x820>)
 8001618:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800161c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161e:	f7ff f8bb 	bl	8000798 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff f8b7 	bl	8000798 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e00f      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_OscConfig+0x820>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f0      	bne.n	8001626 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_RCC_OscConfig+0x820>)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	4905      	ldr	r1, [pc, #20]	; (8001660 <HAL_RCC_OscConfig+0x820>)
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_RCC_OscConfig+0x824>)
 800164c:	4013      	ands	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
 8001650:	e001      	b.n	8001656 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	feeefffc 	.word	0xfeeefffc

08001668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0e7      	b.n	800184c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800167c:	4b75      	ldr	r3, [pc, #468]	; (8001854 <HAL_RCC_ClockConfig+0x1ec>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d910      	bls.n	80016ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b72      	ldr	r3, [pc, #456]	; (8001854 <HAL_RCC_ClockConfig+0x1ec>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 0207 	bic.w	r2, r3, #7
 8001692:	4970      	ldr	r1, [pc, #448]	; (8001854 <HAL_RCC_ClockConfig+0x1ec>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b6e      	ldr	r3, [pc, #440]	; (8001854 <HAL_RCC_ClockConfig+0x1ec>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0cf      	b.n	800184c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d010      	beq.n	80016da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	4b66      	ldr	r3, [pc, #408]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d908      	bls.n	80016da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c8:	4b63      	ldr	r3, [pc, #396]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4960      	ldr	r1, [pc, #384]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d04c      	beq.n	8001780 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ee:	4b5a      	ldr	r3, [pc, #360]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d121      	bne.n	800173e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0a6      	b.n	800184c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001706:	4b54      	ldr	r3, [pc, #336]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d115      	bne.n	800173e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e09a      	b.n	800184c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800171e:	4b4e      	ldr	r3, [pc, #312]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e08e      	b.n	800184c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800172e:	4b4a      	ldr	r3, [pc, #296]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e086      	b.n	800184c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4b46      	ldr	r3, [pc, #280]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f023 0203 	bic.w	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4943      	ldr	r1, [pc, #268]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001750:	f7ff f822 	bl	8000798 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	e00a      	b.n	800176e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff f81e 	bl	8000798 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e06e      	b.n	800184c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 020c 	and.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d1eb      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d010      	beq.n	80017ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	4b31      	ldr	r3, [pc, #196]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001798:	429a      	cmp	r2, r3
 800179a:	d208      	bcs.n	80017ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	492b      	ldr	r1, [pc, #172]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <HAL_RCC_ClockConfig+0x1ec>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d210      	bcs.n	80017de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <HAL_RCC_ClockConfig+0x1ec>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 0207 	bic.w	r2, r3, #7
 80017c4:	4923      	ldr	r1, [pc, #140]	; (8001854 <HAL_RCC_ClockConfig+0x1ec>)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <HAL_RCC_ClockConfig+0x1ec>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d001      	beq.n	80017de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e036      	b.n	800184c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d008      	beq.n	80017fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	4918      	ldr	r1, [pc, #96]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d009      	beq.n	800181c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4910      	ldr	r1, [pc, #64]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800181c:	f000 f824 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 8001820:	4602      	mov	r2, r0
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_RCC_ClockConfig+0x1f0>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	490b      	ldr	r1, [pc, #44]	; (800185c <HAL_RCC_ClockConfig+0x1f4>)
 800182e:	5ccb      	ldrb	r3, [r1, r3]
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
 8001838:	4a09      	ldr	r2, [pc, #36]	; (8001860 <HAL_RCC_ClockConfig+0x1f8>)
 800183a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_RCC_ClockConfig+0x1fc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe ff59 	bl	80006f8 <HAL_InitTick>
 8001846:	4603      	mov	r3, r0
 8001848:	72fb      	strb	r3, [r7, #11]

  return status;
 800184a:	7afb      	ldrb	r3, [r7, #11]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40022000 	.word	0x40022000
 8001858:	40021000 	.word	0x40021000
 800185c:	08002b3c 	.word	0x08002b3c
 8001860:	20000000 	.word	0x20000000
 8001864:	20000004 	.word	0x20000004

08001868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <HAL_RCC_GetSysClockFreq+0x108>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001880:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_RCC_GetSysClockFreq+0x108>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x34>
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d121      	bne.n	80018da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d11e      	bne.n	80018da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800189c:	4b34      	ldr	r3, [pc, #208]	; (8001970 <HAL_RCC_GetSysClockFreq+0x108>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d107      	bne.n	80018b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018a8:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_RCC_GetSysClockFreq+0x108>)
 80018aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	e005      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018b8:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80018c4:	4a2b      	ldr	r2, [pc, #172]	; (8001974 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10d      	bne.n	80018f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d102      	bne.n	80018e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_RCC_GetSysClockFreq+0x110>)
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	e004      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018ec:	4b23      	ldr	r3, [pc, #140]	; (800197c <HAL_RCC_GetSysClockFreq+0x114>)
 80018ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d134      	bne.n	8001960 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d003      	beq.n	800190e <HAL_RCC_GetSysClockFreq+0xa6>
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d003      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0xac>
 800190c:	e005      	b.n	800191a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_RCC_GetSysClockFreq+0x110>)
 8001910:	617b      	str	r3, [r7, #20]
      break;
 8001912:	e005      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_RCC_GetSysClockFreq+0x114>)
 8001916:	617b      	str	r3, [r7, #20]
      break;
 8001918:	e002      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	617b      	str	r3, [r7, #20]
      break;
 800191e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_RCC_GetSysClockFreq+0x108>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	3301      	adds	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_GetSysClockFreq+0x108>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	fb03 f202 	mul.w	r2, r3, r2
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_GetSysClockFreq+0x108>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	0e5b      	lsrs	r3, r3, #25
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	3301      	adds	r3, #1
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001960:	69bb      	ldr	r3, [r7, #24]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	08002b4c 	.word	0x08002b4c
 8001978:	00f42400 	.word	0x00f42400
 800197c:	007a1200 	.word	0x007a1200

08001980 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001998:	f7ff f9ee 	bl	8000d78 <HAL_PWREx_GetVoltageRange>
 800199c:	6178      	str	r0, [r7, #20]
 800199e:	e014      	b.n	80019ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019aa:	6593      	str	r3, [r2, #88]	; 0x58
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019b8:	f7ff f9de 	bl	8000d78 <HAL_PWREx_GetVoltageRange>
 80019bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d0:	d10b      	bne.n	80019ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b80      	cmp	r3, #128	; 0x80
 80019d6:	d919      	bls.n	8001a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2ba0      	cmp	r3, #160	; 0xa0
 80019dc:	d902      	bls.n	80019e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019de:	2302      	movs	r3, #2
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	e013      	b.n	8001a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019e4:	2301      	movs	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	e010      	b.n	8001a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b80      	cmp	r3, #128	; 0x80
 80019ee:	d902      	bls.n	80019f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019f0:	2303      	movs	r3, #3
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	e00a      	b.n	8001a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b80      	cmp	r3, #128	; 0x80
 80019fa:	d102      	bne.n	8001a02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019fc:	2302      	movs	r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	e004      	b.n	8001a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b70      	cmp	r3, #112	; 0x70
 8001a06:	d101      	bne.n	8001a0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a08:	2301      	movs	r3, #1
 8001a0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 0207 	bic.w	r2, r3, #7
 8001a14:	4909      	ldr	r1, [pc, #36]	; (8001a3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d001      	beq.n	8001a2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40022000 	.word	0x40022000

08001a40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e095      	b.n	8001b7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d108      	bne.n	8001a6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a62:	d009      	beq.n	8001a78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
 8001a6a:	e005      	b.n	8001a78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7fe fd5c 	bl	8000550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ab8:	d902      	bls.n	8001ac0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	e002      	b.n	8001ac6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001ace:	d007      	beq.n	8001ae0 <HAL_SPI_Init+0xa0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ad8:	d002      	beq.n	8001ae0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	ea42 0103 	orr.w	r1, r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	f003 0204 	and.w	r2, r3, #4
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001b5c:	ea42 0103 	orr.w	r1, r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b088      	sub	sp, #32
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_SPI_Transmit+0x22>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e15f      	b.n	8001e68 <HAL_SPI_Transmit+0x2e2>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bb0:	f7fe fdf2 	bl	8000798 <HAL_GetTick>
 8001bb4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d002      	beq.n	8001bcc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bca:	e148      	b.n	8001e5e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_SPI_Transmit+0x52>
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bdc:	e13f      	b.n	8001e5e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2203      	movs	r2, #3
 8001be2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	88fa      	ldrh	r2, [r7, #6]
 8001bf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	88fa      	ldrh	r2, [r7, #6]
 8001bfc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c28:	d10f      	bne.n	8001c4a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c54:	2b40      	cmp	r3, #64	; 0x40
 8001c56:	d007      	beq.n	8001c68 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c70:	d94f      	bls.n	8001d12 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_SPI_Transmit+0xfa>
 8001c7a:	8afb      	ldrh	r3, [r7, #22]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d142      	bne.n	8001d06 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c90:	1c9a      	adds	r2, r3, #2
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ca4:	e02f      	b.n	8001d06 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d112      	bne.n	8001cda <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb8:	881a      	ldrh	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc4:	1c9a      	adds	r2, r3, #2
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cd8:	e015      	b.n	8001d06 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cda:	f7fe fd5d 	bl	8000798 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d803      	bhi.n	8001cf2 <HAL_SPI_Transmit+0x16c>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d102      	bne.n	8001cf8 <HAL_SPI_Transmit+0x172>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d106      	bne.n	8001d06 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001d04:	e0ab      	b.n	8001e5e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ca      	bne.n	8001ca6 <HAL_SPI_Transmit+0x120>
 8001d10:	e080      	b.n	8001e14 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_SPI_Transmit+0x19a>
 8001d1a:	8afb      	ldrh	r3, [r7, #22]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d174      	bne.n	8001e0a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d912      	bls.n	8001d50 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	881a      	ldrh	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3a:	1c9a      	adds	r2, r3, #2
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b02      	subs	r3, #2
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d4e:	e05c      	b.n	8001e0a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	330c      	adds	r3, #12
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001d76:	e048      	b.n	8001e0a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d12b      	bne.n	8001dde <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d912      	bls.n	8001db6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d94:	881a      	ldrh	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da0:	1c9a      	adds	r2, r3, #2
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3b02      	subs	r3, #2
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001db4:	e029      	b.n	8001e0a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	330c      	adds	r3, #12
 8001dc0:	7812      	ldrb	r2, [r2, #0]
 8001dc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ddc:	e015      	b.n	8001e0a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dde:	f7fe fcdb 	bl	8000798 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d803      	bhi.n	8001df6 <HAL_SPI_Transmit+0x270>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d102      	bne.n	8001dfc <HAL_SPI_Transmit+0x276>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d106      	bne.n	8001e0a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8001e08:	e029      	b.n	8001e5e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1b1      	bne.n	8001d78 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	6839      	ldr	r1, [r7, #0]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fe0d 	bl	8002a38 <SPI_EndRxTxTransaction>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10a      	bne.n	8001e48 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	77fb      	strb	r3, [r7, #31]
 8001e54:	e003      	b.n	8001e5e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001e66:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d002      	beq.n	8001e96 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
 8001e92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e94:	e11a      	b.n	80020cc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e9e:	d112      	bne.n	8001ec6 <HAL_SPI_Receive+0x56>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10e      	bne.n	8001ec6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001eb0:	88fa      	ldrh	r2, [r7, #6]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	68b9      	ldr	r1, [r7, #8]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f90e 	bl	80020de <HAL_SPI_TransmitReceive>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	e107      	b.n	80020d6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_SPI_Receive+0x64>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e100      	b.n	80020d6 <HAL_SPI_Receive+0x266>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001edc:	f7fe fc5c 	bl	8000798 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_SPI_Receive+0x7e>
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ef2:	e0eb      	b.n	80020cc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001f3e:	d908      	bls.n	8001f52 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	e007      	b.n	8001f62 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f60:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f6a:	d10f      	bne.n	8001f8c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f8a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	2b40      	cmp	r3, #64	; 0x40
 8001f98:	d007      	beq.n	8001faa <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fb2:	d86f      	bhi.n	8002094 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001fb4:	e034      	b.n	8002020 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d117      	bne.n	8001ff4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f103 020c 	add.w	r2, r3, #12
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	7812      	ldrb	r2, [r2, #0]
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8001ff2:	e015      	b.n	8002020 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ff4:	f7fe fbd0 	bl	8000798 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d803      	bhi.n	800200c <HAL_SPI_Receive+0x19c>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200a:	d102      	bne.n	8002012 <HAL_SPI_Receive+0x1a2>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800201e:	e055      	b.n	80020cc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1c4      	bne.n	8001fb6 <HAL_SPI_Receive+0x146>
 800202c:	e038      	b.n	80020a0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d115      	bne.n	8002068 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	b292      	uxth	r2, r2
 8002048:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	1c9a      	adds	r2, r3, #2
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002066:	e015      	b.n	8002094 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002068:	f7fe fb96 	bl	8000798 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d803      	bhi.n	8002080 <HAL_SPI_Receive+0x210>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207e:	d102      	bne.n	8002086 <HAL_SPI_Receive+0x216>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002092:	e01b      	b.n	80020cc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1c6      	bne.n	800202e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	6839      	ldr	r1, [r7, #0]
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 fc6f 	bl	8002988 <SPI_EndRxTransaction>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	75fb      	strb	r3, [r7, #23]
 80020c2:	e003      	b.n	80020cc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b08a      	sub	sp, #40	; 0x28
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020ec:	2301      	movs	r3, #1
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_SPI_TransmitReceive+0x26>
 8002100:	2302      	movs	r3, #2
 8002102:	e20a      	b.n	800251a <HAL_SPI_TransmitReceive+0x43c>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800210c:	f7fe fb44 	bl	8000798 <HAL_GetTick>
 8002110:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002118:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002128:	7efb      	ldrb	r3, [r7, #27]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d00e      	beq.n	800214c <HAL_SPI_TransmitReceive+0x6e>
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002134:	d106      	bne.n	8002144 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <HAL_SPI_TransmitReceive+0x66>
 800213e:	7efb      	ldrb	r3, [r7, #27]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d003      	beq.n	800214c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002144:	2302      	movs	r3, #2
 8002146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800214a:	e1e0      	b.n	800250e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <HAL_SPI_TransmitReceive+0x80>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_SPI_TransmitReceive+0x80>
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002164:	e1d3      	b.n	800250e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b04      	cmp	r3, #4
 8002170:	d003      	beq.n	800217a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2205      	movs	r2, #5
 8002176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	887a      	ldrh	r2, [r7, #2]
 800218a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	887a      	ldrh	r2, [r7, #2]
 8002192:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	887a      	ldrh	r2, [r7, #2]
 80021a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021bc:	d802      	bhi.n	80021c4 <HAL_SPI_TransmitReceive+0xe6>
 80021be:	8a3b      	ldrh	r3, [r7, #16]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d908      	bls.n	80021d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	e007      	b.n	80021e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f0:	2b40      	cmp	r3, #64	; 0x40
 80021f2:	d007      	beq.n	8002204 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002202:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800220c:	f240 8081 	bls.w	8002312 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <HAL_SPI_TransmitReceive+0x140>
 8002218:	8a7b      	ldrh	r3, [r7, #18]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d16d      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	881a      	ldrh	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	1c9a      	adds	r2, r3, #2
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002242:	e05a      	b.n	80022fa <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b02      	cmp	r3, #2
 8002250:	d11b      	bne.n	800228a <HAL_SPI_TransmitReceive+0x1ac>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d016      	beq.n	800228a <HAL_SPI_TransmitReceive+0x1ac>
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	2b01      	cmp	r3, #1
 8002260:	d113      	bne.n	800228a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	881a      	ldrh	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	1c9a      	adds	r2, r3, #2
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d11c      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x1f4>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d016      	beq.n	80022d2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	b292      	uxth	r2, r2
 80022b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	1c9a      	adds	r2, r3, #2
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022ce:	2301      	movs	r3, #1
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022d2:	f7fe fa61 	bl	8000798 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022de:	429a      	cmp	r2, r3
 80022e0:	d80b      	bhi.n	80022fa <HAL_SPI_TransmitReceive+0x21c>
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d007      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80022f8:	e109      	b.n	800250e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d19f      	bne.n	8002244 <HAL_SPI_TransmitReceive+0x166>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d199      	bne.n	8002244 <HAL_SPI_TransmitReceive+0x166>
 8002310:	e0e3      	b.n	80024da <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_SPI_TransmitReceive+0x244>
 800231a:	8a7b      	ldrh	r3, [r7, #18]
 800231c:	2b01      	cmp	r3, #1
 800231e:	f040 80cf 	bne.w	80024c0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d912      	bls.n	8002352 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	1c9a      	adds	r2, r3, #2
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b02      	subs	r3, #2
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002350:	e0b6      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	330c      	adds	r3, #12
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002378:	e0a2      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b02      	cmp	r3, #2
 8002386:	d134      	bne.n	80023f2 <HAL_SPI_TransmitReceive+0x314>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d02f      	beq.n	80023f2 <HAL_SPI_TransmitReceive+0x314>
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	2b01      	cmp	r3, #1
 8002396:	d12c      	bne.n	80023f2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d912      	bls.n	80023c8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	881a      	ldrh	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	1c9a      	adds	r2, r3, #2
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b02      	subs	r3, #2
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023c6:	e012      	b.n	80023ee <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	330c      	adds	r3, #12
 80023d2:	7812      	ldrb	r2, [r2, #0]
 80023d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d148      	bne.n	8002492 <HAL_SPI_TransmitReceive+0x3b4>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d042      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d923      	bls.n	8002460 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	b292      	uxth	r2, r2
 8002424:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	1c9a      	adds	r2, r3, #2
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b02      	subs	r3, #2
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d81f      	bhi.n	800248e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	e016      	b.n	800248e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f103 020c 	add.w	r2, r3, #12
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800248e:	2301      	movs	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002492:	f7fe f981 	bl	8000798 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800249e:	429a      	cmp	r2, r3
 80024a0:	d803      	bhi.n	80024aa <HAL_SPI_TransmitReceive+0x3cc>
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d102      	bne.n	80024b0 <HAL_SPI_TransmitReceive+0x3d2>
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80024be:	e026      	b.n	800250e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f47f af57 	bne.w	800237a <HAL_SPI_TransmitReceive+0x29c>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f47f af50 	bne.w	800237a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 faaa 	bl	8002a38 <SPI_EndRxTxTransaction>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002504:	e003      	b.n	800250e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002516:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800251a:	4618      	mov	r0, r3
 800251c:	3728      	adds	r7, #40	; 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10e      	bne.n	8002564 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
    return;
 8002562:	e0ce      	b.n	8002702 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_SPI_IRQHandler+0x5e>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
    return;
 8002580:	e0bf      	b.n	8002702 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <HAL_SPI_IRQHandler+0x7e>
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80b0 	beq.w	8002702 <HAL_SPI_IRQHandler+0x1de>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80aa 	beq.w	8002702 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d023      	beq.n	8002600 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d011      	beq.n	80025e8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c8:	f043 0204 	orr.w	r2, r3, #4
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	e00b      	b.n	8002600 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025e8:	2300      	movs	r3, #0
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]
        return;
 80025fe:	e080      	b.n	8002702 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d014      	beq.n	8002634 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002642:	f043 0208 	orr.w	r2, r3, #8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265c:	2b00      	cmp	r3, #0
 800265e:	d04f      	beq.n	8002700 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800266e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d104      	bne.n	800268c <HAL_SPI_IRQHandler+0x168>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d034      	beq.n	80026f6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0203 	bic.w	r2, r2, #3
 800269a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d011      	beq.n	80026c8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	4a17      	ldr	r2, [pc, #92]	; (8002708 <HAL_SPI_IRQHandler+0x1e4>)
 80026aa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe f98e 	bl	80009d2 <HAL_DMA_Abort_IT>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d016      	beq.n	80026fe <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	4a0c      	ldr	r2, [pc, #48]	; (8002708 <HAL_SPI_IRQHandler+0x1e4>)
 80026d6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe f978 	bl	80009d2 <HAL_DMA_Abort_IT>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80026f4:	e003      	b.n	80026fe <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f808 	bl	800270c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80026fc:	e000      	b.n	8002700 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80026fe:	bf00      	nop
    return;
 8002700:	bf00      	nop
  }
}
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	08002721 	.word	0x08002721

0800270c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff ffe5 	bl	800270c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800275c:	f7fe f81c 	bl	8000798 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4413      	add	r3, r2
 800276a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800276c:	f7fe f814 	bl	8000798 <HAL_GetTick>
 8002770:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002772:	4b39      	ldr	r3, [pc, #228]	; (8002858 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	015b      	lsls	r3, r3, #5
 8002778:	0d1b      	lsrs	r3, r3, #20
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	fb02 f303 	mul.w	r3, r2, r3
 8002780:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002782:	e054      	b.n	800282e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278a:	d050      	beq.n	800282e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800278c:	f7fe f804 	bl	8000798 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	429a      	cmp	r2, r3
 800279a:	d902      	bls.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d13d      	bne.n	800281e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ba:	d111      	bne.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c4:	d004      	beq.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ce:	d107      	bne.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e8:	d10f      	bne.n	800280a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002808:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e017      	b.n	800284e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3b01      	subs	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4013      	ands	r3, r2
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	429a      	cmp	r2, r3
 800284a:	d19b      	bne.n	8002784 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000000 	.word	0x20000000

0800285c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800286e:	f7fd ff93 	bl	8000798 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800287e:	f7fd ff8b 	bl	8000798 <HAL_GetTick>
 8002882:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	330c      	adds	r3, #12
 800288a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800288c:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	00da      	lsls	r2, r3, #3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	0d1b      	lsrs	r3, r3, #20
 800289c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289e:	fb02 f303 	mul.w	r3, r2, r3
 80028a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80028a4:	e060      	b.n	8002968 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028ac:	d107      	bne.n	80028be <SPI_WaitFifoStateUntilTimeout+0x62>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d104      	bne.n	80028be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d050      	beq.n	8002968 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028c6:	f7fd ff67 	bl	8000798 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d902      	bls.n	80028dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d13d      	bne.n	8002958 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028f4:	d111      	bne.n	800291a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028fe:	d004      	beq.n	800290a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002908:	d107      	bne.n	800291a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002918:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002922:	d10f      	bne.n	8002944 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002942:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e010      	b.n	800297a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	3b01      	subs	r3, #1
 8002966:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	d196      	bne.n	80028a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000000 	.word	0x20000000

08002988 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800299c:	d111      	bne.n	80029c2 <SPI_EndRxTransaction+0x3a>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a6:	d004      	beq.n	80029b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d107      	bne.n	80029c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2200      	movs	r2, #0
 80029ca:	2180      	movs	r1, #128	; 0x80
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7ff febd 	bl	800274c <SPI_WaitFlagStateUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e023      	b.n	8002a30 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029f0:	d11d      	bne.n	8002a2e <SPI_EndRxTransaction+0xa6>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029fa:	d004      	beq.n	8002a06 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a04:	d113      	bne.n	8002a2e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff ff22 	bl	800285c <SPI_WaitFifoStateUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e000      	b.n	8002a30 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ff03 	bl	800285c <SPI_WaitFifoStateUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e027      	b.n	8002abc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f7ff fe68 	bl	800274c <SPI_WaitFlagStateUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a86:	f043 0220 	orr.w	r2, r3, #32
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e014      	b.n	8002abc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff fedc 	bl	800285c <SPI_WaitFifoStateUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	f043 0220 	orr.w	r2, r3, #32
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e000      	b.n	8002abc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <memset>:
 8002ac4:	4402      	add	r2, r0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d100      	bne.n	8002ace <memset+0xa>
 8002acc:	4770      	bx	lr
 8002ace:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad2:	e7f9      	b.n	8002ac8 <memset+0x4>

08002ad4 <__libc_init_array>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	4d0d      	ldr	r5, [pc, #52]	; (8002b0c <__libc_init_array+0x38>)
 8002ad8:	4c0d      	ldr	r4, [pc, #52]	; (8002b10 <__libc_init_array+0x3c>)
 8002ada:	1b64      	subs	r4, r4, r5
 8002adc:	10a4      	asrs	r4, r4, #2
 8002ade:	2600      	movs	r6, #0
 8002ae0:	42a6      	cmp	r6, r4
 8002ae2:	d109      	bne.n	8002af8 <__libc_init_array+0x24>
 8002ae4:	4d0b      	ldr	r5, [pc, #44]	; (8002b14 <__libc_init_array+0x40>)
 8002ae6:	4c0c      	ldr	r4, [pc, #48]	; (8002b18 <__libc_init_array+0x44>)
 8002ae8:	f000 f818 	bl	8002b1c <_init>
 8002aec:	1b64      	subs	r4, r4, r5
 8002aee:	10a4      	asrs	r4, r4, #2
 8002af0:	2600      	movs	r6, #0
 8002af2:	42a6      	cmp	r6, r4
 8002af4:	d105      	bne.n	8002b02 <__libc_init_array+0x2e>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afc:	4798      	blx	r3
 8002afe:	3601      	adds	r6, #1
 8002b00:	e7ee      	b.n	8002ae0 <__libc_init_array+0xc>
 8002b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b06:	4798      	blx	r3
 8002b08:	3601      	adds	r6, #1
 8002b0a:	e7f2      	b.n	8002af2 <__libc_init_array+0x1e>
 8002b0c:	08002b7c 	.word	0x08002b7c
 8002b10:	08002b7c 	.word	0x08002b7c
 8002b14:	08002b7c 	.word	0x08002b7c
 8002b18:	08002b80 	.word	0x08002b80

08002b1c <_init>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr

08002b28 <_fini>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr
